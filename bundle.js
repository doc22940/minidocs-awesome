(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

  var minidocs = require('minidocs')
  var app = minidocs({"title":"Awesome Dat","logo":"dat-data-logo.svg","logoSource":"/Users/joe/code/node_modules/minidocs-awesome/node_modules/dat-design/public/img/dat-data-logo.svg","contents":[{"depth":1,"name":"Welcome"},{"depth":2,"name":"Awesome Dat","key":"awesome-dat","link":"/awesome-dat","toc":[{"level":1,"slug":"dat-awesome-awesomehttpscdnrawgitcomsindresorhusawesomed7305f38d29fed78fa85652e3a63e154dd8e8829mediabadgesvghttpsgithubcomsindresorhusawesome","title":"Dat awesome [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)"},{"level":2,"slug":"dat-applications","title":"Dat Applications"},{"level":3,"slug":"community-applications","title":"Community Applications"},{"level":2,"slug":"using-dat","title":"Using Dat"},{"level":3,"slug":"high-level-apis","title":"High-Level APIs"},{"level":3,"slug":"hosting-and-dat-management","title":"Hosting & Dat Management"},{"level":4,"slug":"managing-and-aggregating-dats","title":"Managing & Aggregating Dats"},{"level":4,"slug":"http-hosting","title":"Http Hosting"},{"level":3,"slug":"dat-link-utilties","title":"Dat Link Utilties"},{"level":3,"slug":"dat-utilities","title":"Dat Utilities"},{"level":3,"slug":"file-imports-and-exports","title":"File Imports & Exports"},{"level":3,"slug":"hypercore-tools","title":"Hypercore Tools"},{"level":2,"slug":"dat-core-modules","title":"Dat Core Modules"},{"level":3,"slug":"cli-utilities","title":"CLI Utilities"},{"level":3,"slug":"networking","title":"Networking"},{"level":4,"slug":"lower-level-networking-modules","title":"Lower level networking modules"},{"level":3,"slug":"storage","title":"Storage"},{"level":4,"slug":"random-access","title":"Random Access"},{"level":3,"slug":"other-related-dat-project-modules","title":"Other Related Dat Project Modules"},{"level":2,"slug":"dat-project-organization-stuff","title":"Dat Project Organization Stuff"},{"level":2,"slug":"outdated","title":"Outdated"},{"level":2,"slug":"license","title":"License"}]},{"depth":1,"name":"Dat Applications"},{"depth":2,"name":"datproject/dat","key":"dat","link":"/dat","toc":[{"level":1,"slug":"dat","title":"Dat"},{"level":3,"slug":"table-of-contents","title":"Table of Contents"},{"level":4,"slug":"what-is-dat","title":"What is Dat?"},{"level":5,"slug":"other-applications","title":"Other Applications"},{"level":2,"slug":"dat-command-line","title":"dat command line"},{"level":2,"slug":"installation","title":"Installation"},{"level":3,"slug":"installing-via-npm","title":"Installing via npm"},{"level":4,"slug":"prerequisites","title":"Prerequisites"},{"level":3,"slug":"js-library","title":"JS Library"},{"level":2,"slug":"getting-started","title":"Getting started"},{"level":3,"slug":"sharing-data","title":"Sharing Data"},{"level":3,"slug":"downloading-data","title":"Downloading Data"},{"level":3,"slug":"other-cool-commands","title":"Other Cool Commands"},{"level":3,"slug":"quick-demos","title":"Quick Demos"},{"level":4,"slug":"download-demo","title":"Download Demo"},{"level":4,"slug":"sharing-demo","title":"Sharing Demo"},{"level":4,"slug":"bonus-http-demo","title":"Bonus HTTP Demo"},{"level":2,"slug":"usage","title":"Usage"},{"level":3,"slug":"sharing","title":"Sharing"},{"level":4,"slug":"creating-a-dat-and-datjson","title":"Creating a dat & dat.json"},{"level":4,"slug":"syncing-to-network","title":"Syncing to Network"},{"level":4,"slug":"ignoring-files","title":"Ignoring Files"},{"level":4,"slug":"selecting-files","title":"Selecting Files"},{"level":3,"slug":"downloading","title":"Downloading"},{"level":4,"slug":"updating-downloaded-archives","title":"Updating Downloaded Archives"},{"level":3,"slug":"shortcut-commands","title":"Shortcut commands"},{"level":3,"slug":"dat-registry-and-authentication","title":"Dat Registry and Authentication"},{"level":4,"slug":"auth-experimental","title":"Auth (experimental)"},{"level":3,"slug":"key-management-and-moving-dats","title":"Key Management & Moving Dats"},{"level":2,"slug":"troubleshooting","title":"Troubleshooting"},{"level":4,"slug":"check-your-dat-version","title":"Check Your Dat Version"},{"level":3,"slug":"installation-issues","title":"Installation Issues"},{"level":4,"slug":"node-and-npm","title":"Node & npm"},{"level":4,"slug":"global-install","title":"Global Install"},{"level":3,"slug":"debugging-output","title":"Debugging Output"},{"level":3,"slug":"networking-issues","title":"Networking Issues"},{"level":4,"slug":"dat-doctor","title":"Dat Doctor"},{"level":2,"slug":"js-api","title":"JS API"},{"level":2,"slug":"for-developers","title":"For Developers"},{"level":3,"slug":"installing-from-source","title":"Installing from source"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"datproject/dat-desktop","key":"dat-desktop","link":"/dat-desktop","toc":[{"level":2,"slug":"table-of-content","title":"Table of Content"},{"level":2,"slug":"download","title":"Download"},{"level":2,"slug":"commands","title":"Commands"},{"level":2,"slug":"directory-structure","title":"Directory structure"},{"level":2,"slug":"faq","title":"FAQ"},{"level":3,"slug":"how-can-i-speed-up-downloading-electron","title":"How can I speed up downloading Electron?"},{"level":2,"slug":"license","title":"License"},{"level":2,"slug":"font-attribution-and-license","title":"Font Attribution & License"}]},{"depth":1,"name":"Community Applications"},{"depth":2,"name":"codeforscience/sciencefair","key":"sciencefair","link":"/sciencefair","toc":[{"level":2,"slug":"why-sciencefair","title":"Why ScienceFair?"},{"level":2,"slug":"contents","title":"contents"},{"level":2,"slug":"downloads","title":"downloads"},{"level":2,"slug":"technical-details","title":"technical details"},{"level":3,"slug":"a-reading-experience-optimised-for-science","title":"A reading experience optimised for Science"},{"level":3,"slug":"instant-multi-source-search","title":"Instant multi-source search"},{"level":3,"slug":"secure-flexible-distributed-datasources","title":"Secure, flexible, distributed datasources"},{"level":3,"slug":"built-in-bibliometrics-and-analytics","title":"Built-in bibliometrics and analytics"},{"level":2,"slug":"development","title":"development"},{"level":2,"slug":"roadmap","title":"roadmap"}]},{"depth":2,"name":"mafintosh/hyperirc","key":"hyperirc","link":"/hyperirc","toc":[{"level":1,"slug":"hyperirc","title":"hyperirc"},{"level":2,"slug":"what-is-it","title":"What is it?"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"browser-support","title":"Browser support"},{"level":2,"slug":"mirrored-irc-channels","title":"Mirrored IRC channels"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"jondashkyle/soundcloud-archiver","key":"soundcloud-archiver","link":"/soundcloud-archiver","toc":[{"level":1,"slug":"soundcloud-archiver","title":"soundcloud-archiver"},{"level":2,"slug":"todo","title":"todo"},{"level":2,"slug":"scripts","title":"scripts"},{"level":2,"slug":"flow","title":"flow"},{"level":2,"slug":"internet-archive","title":"internet archive"},{"level":2,"slug":"design","title":"design"},{"level":3,"slug":"typography","title":"typography"}]},{"depth":2,"name":"mafintosh/hypervision","key":"hypervision","link":"/hypervision","toc":[{"level":1,"slug":"hypervision","title":"hypervision"},{"level":2,"slug":"installation","title":"Installation"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"joehand/hypertweet","key":"hypertweet","link":"/hypertweet","toc":[{"level":1,"slug":"hypertweet","title":"hypertweet"},{"level":2,"slug":"install","title":"Install"},{"level":3,"slug":"set-twitter-tokens","title":"Set twitter tokens"},{"level":2,"slug":"usage","title":"Usage"},{"level":3,"slug":"collect-feed-data","title":"Collect Feed Data"},{"level":3,"slug":"print-anywhere","title":"Print anywhere"},{"level":3,"slug":"or-pipe","title":"Or pipe"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"hypertweetdirorstorage-opts-callbackerr-feed","title":"`hypertweet(dir|storage, [opts], callback(err, feed))`"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"beakerbrowser/dat-photos-app","key":"dat-photos-app","link":"/dat-photos-app","toc":[{"level":2,"slug":"instructions","title":"Instructions"}]},{"depth":1,"name":"High-Level APIs"},{"depth":2,"name":"datproject/dat-node","key":"dat-node","link":"/dat-node","toc":[{"level":1,"slug":"dat-node","title":"dat-node"},{"level":4,"slug":"dat-project-documentation-and-resources","title":"Dat Project Documentation & Resources"},{"level":3,"slug":"features","title":"Features"},{"level":4,"slug":"browser-support","title":"Browser Support"},{"level":2,"slug":"example","title":"Example"},{"level":3,"slug":"example-applications","title":"Example Applications"},{"level":2,"slug":"usage","title":"Usage"},{"level":3,"slug":"storage","title":"Storage"},{"level":3,"slug":"network","title":"Network"},{"level":4,"slug":"downloading-files","title":"Downloading Files"},{"level":5,"slug":"download-on-demand","title":"Download on Demand"},{"level":3,"slug":"importing-files","title":"Importing Files"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"datdirorstorage-opts-callbackerr-dat","title":"`Dat(dir|storage, [opts], callback(err, dat))`"},{"level":4,"slug":"storage","title":"Storage"},{"level":3,"slug":"module-interfaces","title":"Module Interfaces"},{"level":4,"slug":"var-network-datjoinnetworkopts-cb","title":"`var network = dat.joinNetwork([opts], [cb])`"},{"level":5,"slug":"network-options","title":"Network Options"},{"level":4,"slug":"datleavenetwork-or-datleave","title":"`dat.leaveNetwork()` or `dat.leave()`"},{"level":4,"slug":"var-importer-datimportfilessrc-opts-cb","title":"`var importer = dat.importFiles([src], [opts], [cb])`"},{"level":5,"slug":"importer-options","title":"Importer Options"},{"level":5,"slug":"ignoring-files","title":"Ignoring Files"},{"level":4,"slug":"var-stats-dattrackstats","title":"`var stats = dat.trackStats()`"},{"level":5,"slug":"statsonupdate","title":"`stats.on('update')`"},{"level":5,"slug":"var-st-statsget","title":"`var st = stats.get()`"},{"level":5,"slug":"statsnetwork","title":"`stats.network`"},{"level":5,"slug":"var-peers-statspeers","title":"`var peers = stats.peers`"},{"level":4,"slug":"var-server-datservehttpopts","title":"`var server = dat.serveHttp(opts)`"},{"level":4,"slug":"datpause","title":"`dat.pause()`"},{"level":4,"slug":"datresume","title":"`dat.resume()`"},{"level":4,"slug":"datclosecb","title":"`dat.close(cb)`"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"datproject/dat-js","key":"dat-js","link":"/dat-js","toc":[{"level":1,"slug":"dat-js-travishttpsapitravis-ciorgdatprojectdat-jssvghttpstravis-ciorgdatprojectdat-js-npm-versionhttpsimgshieldsionpmvdat-jssvgstyleflat-squarehttpsnpmjsorgpackagedat","title":"dat-js [![Travis](https://api.travis-ci.org/datproject/dat-js.svg)](https://travis-ci.org/datproject/dat-js)  [![NPM version](https://img.shields.io/npm/v/dat-js.svg?style=flat-square)](https://npmjs.org/package/dat)"},{"level":4,"slug":"learn-more-docsdatprojectorghttpdocsdatprojectorg-or-chat-with-ushttpsgitterimdatprojectdiscussions-dat-on-irchttpwebchatfreenodenetchannelsdat","title":"Learn more! [docs.datproject.org](http://docs.datproject.org/) or [chat with us](https://gitter.im/datproject/discussions) ([#dat on IRC](http://webchat.freenode.net/?channels=dat))"},{"level":2,"slug":"example","title":"Example"},{"level":4,"slug":"getting-data-from-a-remote-dat","title":"Getting data from a remote dat"},{"level":4,"slug":"replicating-a-dat-in-memory","title":"Replicating a dat in memory"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"var-dat-new-datoptions","title":"`var dat = new Dat([options])`"},{"level":4,"slug":"dataddkey-options-onrepo","title":"`dat.add(key, [options], [onrepo])`"},{"level":3,"slug":"properties","title":"Properties"},{"level":4,"slug":"datrepos","title":"`dat.repos`"},{"level":3,"slug":"repo","title":"Repo"},{"level":4,"slug":"repokey","title":"`repo.key`"},{"level":4,"slug":"repodestroy","title":"`repo.destroy()`"},{"level":4,"slug":"reposwarm","title":"`repo.swarm`"},{"level":4,"slug":"repoarchive","title":"`repo.archive`"},{"level":3,"slug":"events","title":"Events"},{"level":4,"slug":"repo","title":"`repo`"},{"level":4,"slug":"close","title":"`close`"}]},{"depth":2,"name":"beakerbrowser/pauls-dat-api","key":"pauls-dat-api","link":"/pauls-dat-api","toc":[{"level":1,"slug":"pauls-dat-api","title":"pauls-dat-api"},{"level":2,"slug":"staging","title":"Staging"},{"level":3,"slug":"diffstaging-opts-cb","title":"diff(staging[, opts, cb])"},{"level":3,"slug":"commitstaging-opts-cb","title":"commit(staging[, opts, cb])"},{"level":3,"slug":"revertstaging-opts-cb","title":"revert(staging[, opts, cb])"},{"level":2,"slug":"lookup","title":"Lookup"},{"level":3,"slug":"statarchive-name-cb","title":"stat(archive, name[, cb])"},{"level":2,"slug":"read","title":"Read"},{"level":3,"slug":"readfilearchive-name-opts-cb","title":"readFile(archive, name[, opts, cb])"},{"level":3,"slug":"readdirarchive-path-opts-cb","title":"readdir(archive, path[, opts, cb])"},{"level":2,"slug":"write","title":"Write"},{"level":3,"slug":"writefilearchive-name-data-opts-cb","title":"writeFile(archive, name, data[, opts, cb])"},{"level":3,"slug":"mkdirarchive-name-cb","title":"mkdir(archive, name[, cb])"},{"level":3,"slug":"copyarchive-sourcename-targetname-cb","title":"copy(archive, sourceName, targetName[, cb])"},{"level":3,"slug":"renamearchive-sourcename-targetname-cb","title":"rename(archive, sourceName, targetName[, cb])"},{"level":2,"slug":"delete","title":"Delete"},{"level":3,"slug":"unlinkarchive-name-cb","title":"unlink(archive, name[, cb])"},{"level":3,"slug":"rmdirarchive-name-opts-cb","title":"rmdir(archive, name[, opts, cb])"},{"level":2,"slug":"network","title":"Network"},{"level":3,"slug":"downloadarchive-name-cb","title":"download(archive, name[, cb])"},{"level":2,"slug":"activity-streams","title":"Activity Streams"},{"level":3,"slug":"createfileactivitystreamarchive-staging-path","title":"createFileActivityStream(archive[, staging, path])"},{"level":3,"slug":"createnetworkactivitystreamarchive","title":"createNetworkActivityStream(archive)"},{"level":2,"slug":"exporters","title":"Exporters"},{"level":3,"slug":"exportfilesystemtoarchiveopts-cb","title":"exportFilesystemToArchive(opts[, cb])"},{"level":3,"slug":"exportarchivetofilesystemopts-cb","title":"exportArchiveToFilesystem(opts[, cb])"},{"level":3,"slug":"exportarchivetoarchiveopts-cb","title":"exportArchiveToArchive(opts[, cb])"},{"level":2,"slug":"manifest","title":"Manifest"},{"level":3,"slug":"readmanifestarchive-cb","title":"readManifest(archive[, cb])"},{"level":3,"slug":"writemanifestarchive-manifest-cb","title":"writeManifest(archive, manifest[, cb])"},{"level":3,"slug":"updatemanifestarchive-manifest-cb","title":"updateManifest(archive, manifest[, cb])"},{"level":3,"slug":"generatemanifestopts","title":"generateManifest(opts)"},{"level":2,"slug":"helpers","title":"Helpers"},{"level":3,"slug":"findentrybycontentblockarchive-block","title":"findEntryByContentBlock(archive, block)"}]},{"depth":2,"name":"beakerbrowser/node-dat-archive","key":"node-dat-archive","link":"/node-dat-archive","toc":[{"level":2,"slug":"node-datarchive","title":"Node DatArchive"},{"level":3,"slug":"differences-from-browser-api","title":"Differences from Browser API"},{"level":3,"slug":"quick-api-reference","title":"Quick API reference"}]},{"depth":1,"name":"Hosting & Dat Management"},{"depth":2,"name":"mafintosh/hypercore-archiver","key":"hypercore-archiver","link":"/hypercore-archiver","toc":[{"level":1,"slug":"hypercore-archiver","title":"hypercore-archiver"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"var-ar-archiverstorage-key-options","title":"`var ar = archiver(storage, [key], [options])`"},{"level":5,"slug":"sparse-file-storage","title":"Sparse File Storage"},{"level":4,"slug":"araddkey-callback","title":"`ar.add(key, [callback])`"},{"level":4,"slug":"arremovekey-callback","title":"`ar.remove(key, [callback])`"},{"level":4,"slug":"arlistcallback","title":"`ar.list(callback)`"},{"level":4,"slug":"argetkey-callback","title":"`ar.get(key, callback)`"},{"level":4,"slug":"archanges","title":"`ar.changes`"},{"level":4,"slug":"var-stream-arreplicateoptions","title":"`var stream = ar.replicate([options])`"},{"level":4,"slug":"aronadd-feed","title":"`ar.on('add', feed)`"},{"level":4,"slug":"aronremove-feed","title":"`ar.on('remove', feed)`"},{"level":4,"slug":"aronsync-feed","title":"`ar.on('sync', feed)`"},{"level":4,"slug":"arondownload-feed-index-data-peer","title":"`ar.on('download', feed, index, data, peer)`"},{"level":4,"slug":"aronupload-feed-index-data-peer","title":"`ar.on('upload', feed, index, data, peer)`"},{"level":4,"slug":"aronready","title":"`ar.on('ready')`"},{"level":2,"slug":"network-swarm","title":"Network Swarm"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"datprotocol/hypercloud","key":"hypercloud","link":"/hypercloud","toc":[{"level":1,"slug":"hypercloud-cloud","title":"Hypercloud ☁"},{"level":2,"slug":"setup","title":"Setup"},{"level":2,"slug":"configuration","title":"Configuration"},{"level":4,"slug":"basics","title":"Basics"},{"level":4,"slug":"lets-encrypt","title":"Lets Encrypt"},{"level":4,"slug":"admin-account","title":"Admin Account"},{"level":4,"slug":"ui-module","title":"UI Module"},{"level":4,"slug":"http-sites","title":"HTTP Sites"},{"level":4,"slug":"closed-registration","title":"Closed Registration"},{"level":4,"slug":"reserved-usernames","title":"Reserved Usernames"},{"level":4,"slug":"session-tokens","title":"Session Tokens"},{"level":4,"slug":"jobs","title":"Jobs"},{"level":4,"slug":"emailer","title":"Emailer"},{"level":2,"slug":"tests","title":"Tests"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"beakerbrowser/hashbase","key":"hashbase","link":"/hashbase","toc":[{"level":1,"slug":"hashbase","title":"Hashbase"},{"level":2,"slug":"setup","title":"Setup"},{"level":2,"slug":"configuration","title":"Configuration"},{"level":4,"slug":"basics","title":"Basics"},{"level":4,"slug":"lets-encrypt","title":"Lets Encrypt"},{"level":4,"slug":"admin-account","title":"Admin Account"},{"level":4,"slug":"http-sites","title":"HTTP Sites"},{"level":4,"slug":"closed-registration","title":"Closed Registration"},{"level":4,"slug":"reserved-usernames","title":"Reserved Usernames"},{"level":4,"slug":"monitoring","title":"Monitoring"},{"level":4,"slug":"session-tokens","title":"Session Tokens"},{"level":4,"slug":"jobs","title":"Jobs"},{"level":4,"slug":"emailer","title":"Emailer"},{"level":2,"slug":"tests","title":"Tests"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"joehand/dat-now","key":"dat-now","link":"/dat-now","toc":[{"level":1,"slug":"dat-now","title":"dat-now"},{"level":2,"slug":"usage","title":"Usage"},{"level":3,"slug":"what-does-this-do","title":"What does this do?"},{"level":3,"slug":"how-does-it-work","title":"How does it work?"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"mafintosh/hypercore-archiver-bot","key":"hypercore-archiver-bot","link":"/hypercore-archiver-bot","toc":[{"level":1,"slug":"hypercore-archiver-bot","title":"hypercore-archiver-bot"},{"level":3,"slug":"commands","title":"commands"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"joehand/hypercore-archiver-ws","key":"hypercore-archiver-ws","link":"/hypercore-archiver-ws","toc":[{"level":1,"slug":"hypercore-archiver-ws","title":"hypercore-archiver-ws"},{"level":2,"slug":"install","title":"Install"},{"level":2,"slug":"usage","title":"Usage"},{"level":3,"slug":"custom-server","title":"Custom server"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"datproject/dat-registry-api","key":"dat-registry-api","link":"/dat-registry-api","toc":[{"level":1,"slug":"dat-registry-api","title":"Dat Registry API"},{"level":2,"slug":"features","title":"Features"},{"level":2,"slug":"cli-usage","title":"CLI Usage"},{"level":2,"slug":"js-usage","title":"JS Usage"},{"level":4,"slug":"var-api-apiconfig","title":"`var api = API(config)`"},{"level":4,"slug":"apiclose","title":"api.close()"},{"level":2,"slug":"example","title":"Example"},{"level":2,"slug":"configuration","title":"Configuration"},{"level":3,"slug":"admins","title":"Admins"},{"level":3,"slug":"secret-key","title":"Secret key"},{"level":3,"slug":"default-location-of-account-and-sqlite-databases","title":"Default location of account and sqlite databases"},{"level":3,"slug":"closed-beta","title":"Closed beta"},{"level":3,"slug":"location-of-cached-and-archived-dat-data","title":"Location of cached and archived dat data"},{"level":3,"slug":"mixpanel-account","title":"Mixpanel account"},{"level":3,"slug":"advanced-password-security","title":"Advanced password security"}]},{"depth":2,"name":"datproject/dat-registry-client","key":"dat-registry-client","link":"/dat-registry-client","toc":[{"level":1,"slug":"dat-registry","title":"dat-registry"},{"level":2,"slug":"installation","title":"Installation"},{"level":3,"slug":"quick-example","title":"Quick Example"},{"level":3,"slug":"api","title":"API"},{"level":4,"slug":"var-registry-registryopts","title":"`var registry = Registry([opts])`"},{"level":4,"slug":"registrylogindata-cb","title":"`registry.login(data, cb)`"},{"level":4,"slug":"registryregisterdata-cb","title":"`registry.register(data, cb)`"},{"level":4,"slug":"registrylogoutcb","title":"`registry.logout(cb)`"},{"level":4,"slug":"var-user-registrywhoamiopts","title":"`var user = registry.whoami([opts])`"},{"level":3,"slug":"crud-api","title":"CRUD API"},{"level":4,"slug":"registrydatscreatedata-cb","title":"`registry.dats.create(data, cb)`"},{"level":4,"slug":"registrydatsgetdata-cb","title":"`registry.dats.get([data], cb)`"},{"level":4,"slug":"registrydatsupdatedata-cb","title":"`registry.dats.update(data, cb)`"},{"level":4,"slug":"registrydatsdeletedata-cb","title":"`registry.dats.delete(data, cb)`"},{"level":4,"slug":"registryusersgetdata-cb","title":"`registry.users.get([data], cb)`"},{"level":4,"slug":"registryusersupdatedata-cb","title":"`registry.users.update(data, cb)`"},{"level":4,"slug":"registryusersdeletedata-cb","title":"`registry.users.delete(data, cb)`"}]},{"depth":1,"name":"Managing & Aggregating Dats"},{"depth":2,"name":"datproject/multidat","key":"multidat","link":"/multidat","toc":[{"level":1,"slug":"multidat-stability01","title":"multidat [![stability][0]][1]"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"error-handling","title":"Error handling"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"multidatdb-opts-callbackerr-multidat","title":"Multidat(db, opts, callback(err, multidat))"},{"level":3,"slug":"multidatcreateopts-callbackerr-dat","title":"multidat.create(opts, callback(err, dat))"},{"level":3,"slug":"dats-multidatlist","title":"dats = multidat.list()"},{"level":3,"slug":"multidatclosekey-callbackerr","title":"multidat.close(key, callback(err))"},{"level":3,"slug":"multidatreadmanifestdat-callbackerr-manifest","title":"multidat.readManifest(dat, callback(err, manifest))"},{"level":2,"slug":"why","title":"Why?"},{"level":2,"slug":"when-not-to-use-this","title":"When not to use this"},{"level":2,"slug":"see-also","title":"See Also"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"datproject/multidrive","key":"multidrive","link":"/multidrive","toc":[{"level":1,"slug":"multidrive-stability01","title":"multidrive [![stability][0]][1]"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"error-handling","title":"Error handling"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"multidrivestore-createarchive-closearchive-callbackerr-drive","title":"multidrive(store, createArchive, closeArchive, callback(err, drive))"},{"level":3,"slug":"archives-drivelist","title":"archives = drive.list()"},{"level":3,"slug":"drivecreatedata-callbackerr-drive-duplicate","title":"drive.create(data, callback(err, drive[, duplicate]))"},{"level":3,"slug":"driveclosekey-callbackerr","title":"drive.close(key, callback(err))"},{"level":2,"slug":"installation","title":"Installation"},{"level":2,"slug":"see-also","title":"See Also"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"jayrbolton/dat-pki","key":"dat-pki","link":"/dat-pki","toc":[{"level":1,"slug":"dat-public-key-infrastucture","title":"dat public key infrastucture"},{"level":1,"slug":"api","title":"api"},{"level":2,"slug":"setupoptions-callback","title":"setup(options, callback)"},{"level":2,"slug":"loadpath-passphrase-callback","title":"load(path, passphrase, callback)"},{"level":2,"slug":"createdatuser-datname-callback","title":"createDat(user, datName, callback)"},{"level":2,"slug":"makedatpublicuser-datname-callback","title":"makeDatPublic(user, datName, callback)"},{"level":2,"slug":"makedatprivateuser-datname-callback","title":"makeDatPrivate(user, datName, callback)"},{"level":2,"slug":"sharedatuser-datname-accessids-callback","title":"shareDat(user, datName, accessIDs, callback)"},{"level":2,"slug":"unsharedatuser-datname-accessids-callback","title":"unshareDat(user, datName, accessIds, callback)"},{"level":2,"slug":"followusera-userblink-callback","title":"follow(userA, userBLink, callback)"},{"level":2,"slug":"handshakeusera-userblink-callback","title":"handshake(userA, userBLink, callback)"},{"level":2,"slug":"checkhandshakeusera-userb-cb","title":"checkHandshake(userA, userB, cb)"},{"level":2,"slug":"creategroupuser-groupname-callback","title":"createGroup(user, groupName, callback)"},{"level":2,"slug":"adduserstogroupuser-groupid-userids-callback","title":"addUsersToGroup(user, groupID, [userIDs], callback)"},{"level":2,"slug":"removeusersfromgroupuser-groupid-userids-callback","title":"removeUsersFromGroup(user, groupID, [userIDs], callback)"}]},{"depth":2,"name":"beakerbrowser/injestdb","key":"injestdb","link":"/injestdb","toc":[{"level":1,"slug":"injestdb","title":"InjestDB"},{"level":4,"slug":"example","title":"Example"},{"level":2,"slug":"todos","title":"TODOs"},{"level":2,"slug":"api-quick-reference","title":"API quick reference"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"dbschemadefinition","title":"db.schema(definition)"},{"level":2,"slug":"how-it-works","title":"How it works"}]},{"depth":1,"name":"Http Hosting"},{"depth":2,"name":"joehand/hyperdrive-http","key":"hyperdrive-http","link":"/hyperdrive-http","toc":[{"level":1,"slug":"hyperdrive-http","title":"Hyperdrive Http"},{"level":2,"slug":"usage","title":"Usage"},{"level":3,"slug":"setup","title":"Setup"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"options","title":"Options"},{"level":3,"slug":"url-format","title":"URL Format"},{"level":2,"slug":"cli","title":"CLI"}]},{"depth":2,"name":"beakerbrowser/dathttpd","key":"dathttpd","link":"/dathttpd","toc":[{"level":1,"slug":"dathttpd","title":"dathttpd"},{"level":2,"slug":"getting-started","title":"Getting started"},{"level":3,"slug":"start-hosting-your-website-with-dat","title":"Start hosting your website with Dat"},{"level":3,"slug":"update-your-dns-records","title":"Update your DNS records"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"config","title":"Config"},{"level":3,"slug":"portshttp","title":"ports.http"},{"level":3,"slug":"portshttps","title":"ports.https"},{"level":3,"slug":"portsmetric","title":"ports.metric"},{"level":3,"slug":"directory","title":"directory"},{"level":3,"slug":"letsencrypt","title":"letsencrypt"},{"level":3,"slug":"letsencryptemail","title":"letsencrypt.email"},{"level":3,"slug":"letsencryptagreetos","title":"letsencrypt.agreeTos"},{"level":3,"slug":"sites","title":"sites"},{"level":3,"slug":"siteshostnameurl","title":"sites.{hostname}.url"},{"level":3,"slug":"siteshostnameproxy","title":"sites.{hostname}.proxy"},{"level":3,"slug":"siteshostnamedatonly","title":"sites.{hostname}.datOnly"},{"level":2,"slug":"env-vars","title":"Env Vars"},{"level":2,"slug":"metrics-dashboard","title":"Metrics Dashboard"}]},{"depth":1,"name":"Dat Link Utilties"},{"depth":2,"name":"datprotocol/dat-dns","key":"dat-dns","link":"/dat-dns","toc":[{"level":1,"slug":"dat-dns","title":"dat-dns"},{"level":2,"slug":"api","title":"API"},{"level":2,"slug":"spec","title":"Spec"},{"level":3,"slug":"dat-name-resolution","title":"Dat-name Resolution"}]},{"depth":2,"name":"joehand/dat-link-resolve","key":"dat-link-resolve","link":"/dat-link-resolve","toc":[{"level":1,"slug":"dat-link-resolve","title":"dat-link-resolve"},{"level":3,"slug":"supports","title":"Supports"},{"level":2,"slug":"install","title":"Install"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"datresolvelink-callbackerr-key","title":"`datResolve(link, callback(err, key))`"},{"level":2,"slug":"contributing","title":"Contributing"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"pfrazee/parse-dat-url","key":"parse-dat-url","link":"/parse-dat-url","toc":[{"level":1,"slug":"parse-dat-url","title":"parse-dat-url"}]},{"depth":2,"name":"juliangruber/dat-encoding","key":"dat-encoding","link":"/dat-encoding","toc":[{"level":1,"slug":"dat-encoding","title":"dat-encoding"},{"level":2,"slug":"example","title":"Example"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"encodebuf","title":".encode(buf)"},{"level":3,"slug":"tostrbuf","title":".toStr(buf)"},{"level":3,"slug":"decodestr","title":".decode(str)"},{"level":3,"slug":"tobufstr","title":".toBuf(str)"},{"level":2,"slug":"license","title":"License"}]},{"depth":1,"name":"Dat Utilities"},{"depth":2,"name":"joehand/dat-log","key":"dat-log","link":"/dat-log","toc":[{"level":1,"slug":"dat-log","title":"dat-log"},{"level":2,"slug":"install","title":"Install"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"mafintosh/dat-ls","key":"dat-ls","link":"/dat-ls","toc":[{"level":1,"slug":"dat-ls","title":"dat-ls"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"karissa/hyperhealth","key":"hyperhealth","link":"/hyperhealth","toc":[{"level":1,"slug":"hyperhealth","title":"hyperhealth"},{"level":2,"slug":"example","title":"Example"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"health-healthkey-or-archive-opts","title":"`health = Health(key-or-archive, [opts])`"},{"level":3,"slug":"healthget","title":"`health.get()`"},{"level":3,"slug":"peer-object","title":"Peer object"}]},{"depth":2,"name":"joehand/hyperdrive-network-speed","key":"hyperdrive-network-speed","link":"/hyperdrive-network-speed","toc":[{"level":1,"slug":"hyperdrive-network-speed","title":"hyperdrive-network-speed"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"var-speed-networkspeedarchive-opts","title":"`var speed = networkSpeed(archive, [opts])`"},{"level":4,"slug":"speeduploadspeed","title":"`speed.uploadSpeed`"},{"level":4,"slug":"speeddownloadspeed","title":"`speed.downloadSpeed`"},{"level":2,"slug":"license","title":"License"}]},{"depth":1,"name":"File Imports & Exports"},{"depth":2,"name":"juliangruber/hyperdrive-import-files","key":"hyperdrive-import-files","link":"/hyperdrive-import-files","toc":[{"level":1,"slug":"hyperdrive-import-files","title":"hyperdrive-import-files"},{"level":2,"slug":"example","title":"Example"},{"level":2,"slug":"installation","title":"Installation"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"hyperimportarchive-target-options-cb","title":"hyperImport(archive, target, [, options][, cb])"},{"level":3,"slug":"status","title":"status"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"mafintosh/mirror-folder","key":"mirror-folder","link":"/mirror-folder","toc":[{"level":1,"slug":"mirror-folder","title":"mirror-folder"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"var-progress-mirrorsrc-dst-options-callback","title":"`var progress = mirror(src, dst, [options], [callback])`"},{"level":4,"slug":"progressonpending-name-live","title":"`progress.on('pending', {name, live})`"},{"level":4,"slug":"progresspending","title":"`progress.pending`"},{"level":4,"slug":"progressonput-src-dst","title":"`progress.on('put', src, dst)`"},{"level":4,"slug":"progressonput-data-data","title":"`progress.on('put-data', data)`"},{"level":4,"slug":"progressonput-end-src-dst","title":"`progress.on('put-end', src, dst)`"},{"level":4,"slug":"progressondel-dst","title":"`progress.on('del', dst)`"},{"level":4,"slug":"progressonignore-src-dst","title":"`progress.on('ignore', src, dst)`"},{"level":4,"slug":"progressonskip-src-dst","title":"`progress.on('skip', src, dst)`"},{"level":4,"slug":"progressonend","title":"`progress.on('end')`"},{"level":4,"slug":"progressonerror-err","title":"`progress.on('error', err)`"},{"level":4,"slug":"progressdestory","title":"`progress.destory()`"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"pfrazee/hyperdrive-staging-area","key":"hyperdrive-staging-area","link":"/hyperdrive-staging-area","toc":[{"level":1,"slug":"hyperdrive-staging-area","title":"hyperdrive-staging-area"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"var-staging-hyperdrivestagingareaarchive-stagingpath-baseopts","title":"`var staging = HyperdriveStagingArea(archive, stagingPath[, baseOpts])`"},{"level":4,"slug":"stagingpath","title":"`staging.path`"},{"level":4,"slug":"stagingisstaging","title":"`staging.isStaging`"},{"level":4,"slug":"stagingkey","title":"`staging.key`"},{"level":4,"slug":"stagingwritable","title":"`staging.writable`"},{"level":4,"slug":"stagingdiffopts-cb","title":"`staging.diff(opts, cb)`"},{"level":4,"slug":"stagingcommitopts-cb","title":"`staging.commit(opts, cb)`"},{"level":4,"slug":"stagingrevertopts-cb","title":"`staging.revert(opts, cb)`"},{"level":4,"slug":"stagingreadignoreopts-cb","title":"`staging.readIgnore(opts, cb)`"},{"level":4,"slug":"stagingstartautosync","title":"`staging.startAutoSync()`"},{"level":4,"slug":"stagingstopautosync","title":"`staging.stopAutoSync()`"},{"level":4,"slug":"hyperdrivestagingareaparseignorerulesstr","title":"`HyperdriveStagingArea.parseIgnoreRules(str)`"}]},{"depth":2,"name":"pfrazee/hyperdrive-to-zip-stream","key":"hyperdrive-to-zip-stream","link":"/hyperdrive-to-zip-stream","toc":[{"level":1,"slug":"hyperdrive-to-zip-stream","title":"hyperdrive-to-zip-stream"},{"level":2,"slug":"license","title":"License"}]},{"depth":1,"name":"Hypercore Tools"},{"depth":2,"name":"mafintosh/hyperpipe","key":"hyperpipe","link":"/hyperpipe","toc":[{"level":1,"slug":"hyperpipe","title":"hyperpipe"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":2,"slug":"license","title":"License"}]},{"depth":1,"name":"Dat Core Modules"},{"depth":2,"name":"mafintosh/hyperdrive","key":"hyperdrive","link":"/hyperdrive","toc":[{"level":1,"slug":"hyperdrive","title":"Hyperdrive"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"var-archive-hyperdrivestorage-key-options","title":"`var archive = hyperdrive(storage, [key], [options])`"},{"level":4,"slug":"var-stream-archivereplicateoptions","title":"`var stream = archive.replicate([options])`"},{"level":4,"slug":"archiveversion","title":"`archive.version`"},{"level":4,"slug":"archivekey","title":"`archive.key`"},{"level":4,"slug":"archivediscoverykey","title":"`archive.discoveryKey`"},{"level":4,"slug":"archivewritable","title":"`archive.writable`"},{"level":4,"slug":"archiveonready","title":"`archive.on('ready')`"},{"level":4,"slug":"archiveonerror-err","title":"`archive.on('error', err)`"},{"level":4,"slug":"var-olddrive-archivecheckoutversion","title":"`var oldDrive = archive.checkout(version)`"},{"level":4,"slug":"var-stream-archivehistoryoptions","title":"`var stream = archive.history([options])`"},{"level":4,"slug":"var-stream-archivecreatereadstreamname-options","title":"`var stream = archive.createReadStream(name, [options])`"},{"level":4,"slug":"archivereadfilename-encoding-callback","title":"`archive.readFile(name, [encoding], callback)`"},{"level":4,"slug":"var-stream-archivecreatewritestreamname-options","title":"`var stream = archive.createWriteStream(name, [options])`"},{"level":4,"slug":"archivewritefilename-buffer-options-callback","title":"`archive.writeFile(name, buffer, [options], [callback])`"},{"level":4,"slug":"archiveunlinkname-callback","title":"`archive.unlink(name, [callback])`"},{"level":4,"slug":"archivemkdirname-options-callback","title":"`archive.mkdir(name, [options], [callback])`"},{"level":4,"slug":"archivermdirname-callback","title":"`archive.rmdir(name, [callback])`"},{"level":4,"slug":"archivereaddirname-options-callback","title":"`archive.readdir(name, [options], [callback])`"},{"level":4,"slug":"archivestatname-callback","title":"`archive.stat(name, callback)`"},{"level":4,"slug":"archivelstatname-callback","title":"`archive.lstat(name, callback)`"},{"level":4,"slug":"archiveaccessname-callback","title":"`archive.access(name, callback)`"},{"level":4,"slug":"archiveclosecallback","title":"`archive.close([callback])`"}]},{"depth":2,"name":"mafintosh/hypercore","key":"hypercore","link":"/hypercore","toc":[{"level":1,"slug":"hypercore","title":"hypercore"},{"level":2,"slug":"features","title":"Features"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"var-feed-hypercorestorage-key-options","title":"`var feed = hypercore(storage, [key], [options])`"},{"level":4,"slug":"feedwritable","title":"`feed.writable`"},{"level":4,"slug":"feedreadable","title":"`feed.readable`"},{"level":4,"slug":"feedkey","title":"`feed.key`"},{"level":4,"slug":"feeddiscoverykey","title":"`feed.discoveryKey`"},{"level":4,"slug":"feedlength","title":"`feed.length`"},{"level":4,"slug":"feedbytelength","title":"`feed.byteLength`"},{"level":4,"slug":"feedgetindex-options-callback","title":"`feed.get(index, [options], callback)`"},{"level":4,"slug":"feedheadoptions-callback","title":"`feed.head([options], callback)`"},{"level":4,"slug":"feeddownloadrange-callback","title":"`feed.download([range], [callback])`"},{"level":4,"slug":"feedundownloadrange","title":"`feed.undownload(range)`"},{"level":4,"slug":"var-number-feeddownloadedstart-end","title":"`var number = feed.downloaded([start], [end])`"},{"level":4,"slug":"var-bool-feedhasindex","title":"`var bool = feed.has(index)`"},{"level":4,"slug":"var-bool-feedhasstart-end","title":"`var bool = feed.has(start, end)`"},{"level":4,"slug":"feedappenddata-callback","title":"`feed.append(data, [callback])`"},{"level":4,"slug":"feedclearstart-end-callback","title":"`feed.clear(start, [end], [callback])`"},{"level":4,"slug":"feedseekbyteoffset-callback","title":"`feed.seek(byteOffset, callback)`"},{"level":4,"slug":"feedupdateminlength-callback","title":"`feed.update([minLength], [callback])`"},{"level":4,"slug":"var-stream-feedcreatereadstreamoptions","title":"`var stream = feed.createReadStream([options])`"},{"level":4,"slug":"var-stream-feedcreatewritestream","title":"`var stream = feed.createWriteStream()`"},{"level":4,"slug":"var-stream-feedreplicateoptions","title":"`var stream = feed.replicate([options])`"},{"level":4,"slug":"feedclosecallback","title":"`feed.close([callback])`"},{"level":4,"slug":"feedonready","title":"`feed.on('ready')`"},{"level":4,"slug":"feedonerror-err","title":"`feed.on('error', err)`"},{"level":4,"slug":"feedondownload-index-data","title":"`feed.on('download', index, data)`"},{"level":4,"slug":"feedonupload-index-data","title":"`feed.on('upload', index, data)`"},{"level":4,"slug":"feedonappend","title":"`feed.on('append')`"},{"level":4,"slug":"feedonsync","title":"`feed.on('sync')`"},{"level":4,"slug":"feedonclose","title":"`feed.on('close')`"},{"level":2,"slug":"license","title":"License"}]},{"depth":1,"name":"CLI Utilities"},{"depth":2,"name":"joehand/dat-doctor","key":"dat-doctor","link":"/dat-doctor","toc":[{"level":1,"slug":"dat-doctor","title":"dat-doctor"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"joehand/dat-ignore","key":"dat-ignore","link":"/dat-ignore","toc":[{"level":1,"slug":"dat-ignore","title":"dat-ignore"},{"level":2,"slug":"install","title":"Install"},{"level":2,"slug":"usage","title":"Usage"},{"level":3,"slug":"example-options","title":"Example Options"},{"level":4,"slug":"add-custom-ignore","title":"Add custom ignore"},{"level":4,"slug":"allow-hidden-files","title":"Allow Hidden Files"},{"level":4,"slug":"change-dat-ignore-path","title":"Change Dat Ignore Path"},{"level":4,"slug":"datignore-as-stringbuffer","title":"`.datignore` as string/buffer"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"var-ignore-datignoredir-opts","title":"`var ignore = datIgnore([dir], [opts])`"},{"level":4,"slug":"dir","title":"`dir`"},{"level":4,"slug":"options","title":"Options:"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"joehand/dat-json","key":"dat-json","link":"/dat-json","toc":[{"level":1,"slug":"dat-json","title":"dat-json"},{"level":2,"slug":"install","title":"Install"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"var-datjson-datjsonarchive-opts","title":"`var datjson = DatJSON(archive, [opts])`"},{"level":4,"slug":"datjsoncreatedata-cb","title":"`datjson.create([data], cb)`"},{"level":4,"slug":"datjsonwritekey-val-cb-or-datjsonwritedata-cb","title":"`datjson.write(key, val, cb)` or `datjson.write(data, cb)`"},{"level":4,"slug":"datjsondeletekey-cb","title":"`datjson.delete(key, cb)`"},{"level":4,"slug":"datjsonreadcb","title":"`datjson.read(cb)`"},{"level":2,"slug":"license","title":"License"}]},{"depth":1,"name":"Networking"},{"depth":2,"name":"karissa/hyperdiscovery","key":"hyperdiscovery","link":"/hyperdiscovery","toc":[{"level":1,"slug":"hyperdiscovery","title":"hyperdiscovery"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"var-sw-swarmarchive-opts","title":"`var sw = swarm(archive, opts)`"},{"level":3,"slug":"swconnections","title":"sw.connections"},{"level":3,"slug":"swclose","title":"sw.close()"},{"level":5,"slug":"options","title":"Options"},{"level":2,"slug":"see-also","title":"See Also"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"mafintosh/discovery-swarm","key":"discovery-swarm","link":"/discovery-swarm","toc":[{"level":1,"slug":"discovery-swarm","title":"discovery-swarm"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"var-sw-swarmopts","title":"`var sw = swarm(opts)`"},{"level":4,"slug":"swjoinkey-opts-cb","title":"`sw.join(key, [opts], [cb])`"},{"level":4,"slug":"swleavekey","title":"`sw.leave(key)`"},{"level":4,"slug":"swconnecting","title":"`sw.connecting`"},{"level":4,"slug":"swqueued","title":"`sw.queued`"},{"level":4,"slug":"swconnected","title":"`sw.connected`"},{"level":4,"slug":"swonconnection-connection-info","title":"`sw.on('connection', connection, info)`"},{"level":4,"slug":"swlistenport","title":"`sw.listen(port)`"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"mafintosh/webrtc-swarm","key":"webrtc-swarm","link":"/webrtc-swarm","toc":[{"level":1,"slug":"webrtc-swarm","title":"webrtc-swarm"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"var-sw-swarmhub-opts","title":"var sw = swarm(hub, opts)"},{"level":3,"slug":"swclose","title":"sw.close()"},{"level":3,"slug":"swonpeerorconnect-peer-id","title":"sw.on('peer|connect', peer, id)"},{"level":3,"slug":"swondisconnect-peer-id","title":"sw.on('disconnect', peer, id)"},{"level":3,"slug":"swonclose","title":"sw.on('close')"},{"level":3,"slug":"swpeers","title":"sw.peers"},{"level":3,"slug":"swarmwebrtc_support","title":"swarm.WEBRTC_SUPPORT"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"joehand/dat-swarm-defaults","key":"dat-swarm-defaults","link":"/dat-swarm-defaults","toc":[{"level":1,"slug":"dat-swarm-defaults","title":"Dat Swarm Defaults"},{"level":2,"slug":"usage","title":"Usage"}]},{"depth":1,"name":"Lower level networking modules"},{"depth":2,"name":"maxogden/discovery-channel","key":"discovery-channel","link":"/discovery-channel","toc":[{"level":1,"slug":"discovery-channel","title":"discovery-channel"},{"level":2,"slug":"usage","title":"Usage"},{"level":3,"slug":"var-dc-requirediscovery-channel","title":"`var DC = require('discovery-channel')`"},{"level":3,"slug":"var-channel-dclessoptsgreater","title":"`var channel = DC(<opts>)`"},{"level":3,"slug":"channeljoinid-port-cb","title":"`channel.join(id, [port], [cb])`"},{"level":3,"slug":"channelleaveid-port","title":"`channel.leave(id, [port])`"},{"level":3,"slug":"channelupdate","title":"`channel.update()`"},{"level":3,"slug":"var-list-channellist","title":"`var list = channel.list()`"},{"level":3,"slug":"channelonpeer-id-peer-type","title":"`channel.on('peer', id, peer, type)`"},{"level":3,"slug":"channeldestroycb","title":"`channel.destroy(cb)`"},{"level":3,"slug":"channelonclose","title":"`channel.on('close')`"}]},{"depth":2,"name":"mafintosh/dns-discovery","key":"dns-discovery","link":"/dns-discovery","toc":[{"level":1,"slug":"dns-discovery","title":"dns-discovery"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"var-disc-discoveryoptions","title":"`var disc = discovery([options])`"},{"level":4,"slug":"disclookupname-callback","title":"`disc.lookup(name, [callback])`"},{"level":4,"slug":"discannouncename-port-options-callback","title":"`disc.announce(name, port, [options], [callback])`"},{"level":4,"slug":"discunannouncename-port-options-callback","title":"`disc.unannounce(name, port, [options], [callback])`"},{"level":4,"slug":"disclistenport-callback","title":"`disc.listen([port], [callback])`"},{"level":4,"slug":"discdestroyonclose","title":"`disc.destroy([onclose])`"},{"level":2,"slug":"cli","title":"CLI"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"mafintosh/multicast-dns","key":"multicast-dns","link":"/multicast-dns","toc":[{"level":1,"slug":"multicast-dns","title":"multicast-dns"},{"level":2,"slug":"usage","title":"Usage"},{"level":1,"slug":"cli","title":"CLI"},{"level":1,"slug":"api","title":"API"},{"level":4,"slug":"mdns-multicastdnsoptions","title":"`mdns = multicastdns([options])`"},{"level":4,"slug":"mdnsonquery-packet-rinfo","title":"`mdns.on('query', (packet, rinfo))`"},{"level":4,"slug":"mdnsonresponse-packet-rinfo","title":"`mdns.on('response', (packet, rinfo))`"},{"level":4,"slug":"mdnsquerypacket-cb","title":"`mdns.query(packet, [cb])`"},{"level":4,"slug":"mdnsrespondpacket-cb","title":"`mdns.respond(packet, [cb])`"},{"level":4,"slug":"mdnsdestroy","title":"`mdns.destroy()`"},{"level":1,"slug":"development","title":"Development"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"webtorrent/bittorrent-dht","key":"bittorrent-dht","link":"/bittorrent-dht","toc":[{"level":1,"slug":"bittorrent-dht-travistravis-imagetravis-url-npmnpm-imagenpm-url-downloadsdownloads-imagedownloads-url-javascript-style-guidestandard-imagestandard-url","title":"bittorrent-dht [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]"},{"level":3,"slug":"simple-robust-bittorrent-dht-implementation","title":"Simple, robust, BitTorrent DHT implementation"},{"level":3,"slug":"features","title":"features"},{"level":3,"slug":"install","title":"install"},{"level":3,"slug":"example","title":"example"},{"level":3,"slug":"api","title":"api"},{"level":4,"slug":"dht-new-dhtopts","title":"`dht = new DHT([opts])`"},{"level":4,"slug":"dhtlookupinfohash-callback","title":"`dht.lookup(infoHash, [callback])`"},{"level":4,"slug":"dhtlistenport-address-onlistening","title":"`dht.listen([port], [address], [onlistening])`"},{"level":4,"slug":"dhtaddress","title":"`dht.address()`"},{"level":4,"slug":"dhtannounceinfohash-port-callback","title":"`dht.announce(infoHash, [port], [callback])`"},{"level":4,"slug":"arr-dhttojson","title":"`arr = dht.toJSON()`"},{"level":4,"slug":"dhtaddnodenode","title":"`dht.addNode(node)`"},{"level":4,"slug":"dhtdestroycallback","title":"`dht.destroy([callback])`"},{"level":4,"slug":"dhtputopts-callback","title":"`dht.put(opts, callback)`"},{"level":4,"slug":"dhtgethash-callback","title":"`dht.get(hash, callback)`"},{"level":3,"slug":"events","title":"events"},{"level":4,"slug":"dhtonready-function","title":"`dht.on('ready', function () { ... })`"},{"level":4,"slug":"dhtonlistening-function","title":"`dht.on('listening', function () { ... })`"},{"level":4,"slug":"dhtonpeer-function-peer-infohash-from","title":"`dht.on('peer', function (peer, infoHash, from) { ... })`"},{"level":4,"slug":"dhtonerror-function-err","title":"`dht.on('error', function (err) { ... })`"},{"level":4,"slug":"internal-events","title":"internal events"},{"level":4,"slug":"dhtonnode-function-node","title":"`dht.on('node', function (node) { ... })`"},{"level":4,"slug":"dhtonannounce-function-peer-infohash","title":"`dht.on('announce', function (peer, infoHash) { ... })`"},{"level":4,"slug":"dhtonwarning-function-err","title":"`dht.on('warning', function (err) { ... })`"},{"level":3,"slug":"further-reading","title":"further reading"},{"level":3,"slug":"license","title":"license"}]},{"depth":2,"name":"mafintosh/utp-native","key":"utp-native","link":"/utp-native","toc":[{"level":1,"slug":"utp-native","title":"utp-native"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":2,"slug":"nethttpnodejsorgapinethtml-like-api","title":"[net](http://nodejs.org/api/net.html)-like API"},{"level":4,"slug":"server-utpcreateserveronconnection","title":"`server = utp.createServer([onconnection])`"},{"level":4,"slug":"serverlistenport-address-onlistening","title":"`server.listen([port], [address], [onlistening])`"},{"level":4,"slug":"var-addr-serveraddress","title":"`var addr = server.address()`"},{"level":4,"slug":"serveronlistening","title":"`server.on('listening')`"},{"level":4,"slug":"serveronconnection-connection","title":"`server.on('connection', connection)`"},{"level":4,"slug":"serveronerror-err","title":"`server.on('error', err)`"},{"level":4,"slug":"serverclose","title":"`server.close()`"},{"level":4,"slug":"serveronclose","title":"`server.on('close')`"},{"level":4,"slug":"servermaxconnections","title":"`server.maxConnections`"},{"level":4,"slug":"serverconnections","title":"`server.connections`"},{"level":4,"slug":"serverref","title":"`server.ref()`"},{"level":4,"slug":"serverunref","title":"`server.unref()`"},{"level":4,"slug":"connection-utpconnectport-host","title":"`connection = utp.connect(port, [host])`"},{"level":4,"slug":"address-connectionaddress","title":"`address = connection.address()`"},{"level":4,"slug":"connectionref","title":"`connection.ref()`"},{"level":4,"slug":"connectionunref","title":"`connection.unref()`"},{"level":4,"slug":"connectiononclose","title":"`connection.on('close')`"},{"level":4,"slug":"connectiononerror-err","title":"`connection.on('error', err)`"},{"level":4,"slug":"connectiondestroy","title":"`connection.destroy()`"},{"level":2,"slug":"socket-api","title":"Socket API"},{"level":4,"slug":"socket-utp","title":"`socket = utp()`"},{"level":4,"slug":"socketbindport-host-onlistening","title":"`socket.bind([port], [host], [onlistening])`"},{"level":4,"slug":"socketonlistening","title":"`socket.on('listening')`"},{"level":4,"slug":"socketsendbuf-offset-len-port-host-callback","title":"`socket.send(buf, offset, len, port, host, [callback])`"},{"level":4,"slug":"socketonmessage-buffer-rinfo","title":"`socket.on('message', buffer, rinfo)`"},{"level":4,"slug":"socketclose","title":"`socket.close()`"},{"level":4,"slug":"address-socketaddress","title":"`address = socket.address()`"},{"level":4,"slug":"socketonclose","title":"`socket.on('close')`"},{"level":4,"slug":"socketonerror","title":"`socket.on('error')`"},{"level":4,"slug":"socketlistenport-host-onlistening","title":"`socket.listen([port], [host], [onlistening])`"},{"level":4,"slug":"socketonconnection-connection","title":"`socket.on('connection', connection)`"},{"level":4,"slug":"connection-socketconnectport-host","title":"`connection = socket.connect(port, host)`"},{"level":4,"slug":"socketunref","title":"`socket.unref()`"},{"level":4,"slug":"socketref","title":"`socket.ref()`"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"mafintosh/signalhub","key":"signalhub","link":"/signalhub","toc":[{"level":1,"slug":"signalhub","title":"signalhub"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"hub-signalhubappname-urls","title":"`hub = signalhub(appName, urls)`"},{"level":4,"slug":"stream-hubsubscribechannel","title":"`stream = hub.subscribe(channel)`"},{"level":4,"slug":"hubbroadcastchannel-message-callback","title":"`hub.broadcast(channel, message, [callback])`"},{"level":4,"slug":"hubclosecallback","title":"`hub.close([callback])`"},{"level":2,"slug":"cli-api","title":"CLI API"},{"level":2,"slug":"browserify","title":"Browserify"},{"level":2,"slug":"heroku","title":"Heroku"},{"level":2,"slug":"license","title":"License"}]},{"depth":1,"name":"Storage"},{"depth":2,"name":"datproject/dat-storage","key":"dat-storage","link":"/dat-storage","toc":[{"level":1,"slug":"dat-storage","title":"dat-storage"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"datproject/dat-secret-storage","key":"dat-secret-storage","link":"/dat-secret-storage","toc":[{"level":1,"slug":"dat-secret-storage","title":"dat-secret-storage"},{"level":2,"slug":"install","title":"Install"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"secretstoragedirownershipfile-opts","title":"`secretStorage([dir])(ownershipFile, opts)`"},{"level":2,"slug":"license","title":"License"}]},{"depth":1,"name":"Random Access"},{"depth":2,"name":"juliangruber/abstract-random-access","key":"abstract-random-access","link":"/abstract-random-access","toc":[{"level":1,"slug":"abstract-random-access","title":"abstract-random-access"},{"level":2,"slug":"features","title":"Features"},{"level":2,"slug":"example","title":"Example"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"mafintosh/multi-random-access","key":"multi-random-access","link":"/multi-random-access","toc":[{"level":1,"slug":"multi-random-access","title":"multi-random-access"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"var-storage-multioptions-open","title":"`var storage = multi([options], open)`"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"mafintosh/random-access-file","key":"random-access-file","link":"/random-access-file","toc":[{"level":1,"slug":"random-access-file","title":"random-access-file"},{"level":2,"slug":"why","title":"Why?"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"var-file-randomaccessfilefilename-options","title":"`var file = randomAccessFile(filename, [options])`"},{"level":4,"slug":"filewriteoffset-buffer-callback","title":"`file.write(offset, buffer, [callback])`"},{"level":4,"slug":"filereadoffset-length-callback","title":"`file.read(offset, length, callback)`"},{"level":4,"slug":"filedeloffset-length-callback","title":"`file.del(offset, length, callback)`"},{"level":4,"slug":"fileendoptions-callback","title":"`file.end([options], callback)`"},{"level":4,"slug":"fileclosecallback","title":"`file.close([callback])`"},{"level":4,"slug":"fileunlinkcallback","title":"`file.unlink([callback])`"},{"level":4,"slug":"fileonopen","title":"`file.on('open')`"},{"level":4,"slug":"fileonclose","title":"`file.on('close')`"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"mafintosh/random-access-memory","key":"random-access-memory","link":"/random-access-memory","toc":[{"level":1,"slug":"random-access-memory","title":"random-access-memory"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"mafintosh/random-access-page-files","key":"random-access-page-files","link":"/random-access-page-files","toc":[{"level":1,"slug":"random-access-page-files","title":"random-access-page-files"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"var-storage-pagesfolder-options","title":"`var storage = pages(folder, [options])`"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"datproject/dat-http","key":"dat-http","link":"/dat-http","toc":[{"level":1,"slug":"dat-http","title":"dat-http"},{"level":3,"slug":"example","title":"example"}]},{"depth":2,"name":"substack/random-access-idb","key":"random-access-idb","link":"/random-access-idb","toc":[{"level":1,"slug":"random-access-idb","title":"random-access-idb"},{"level":1,"slug":"example","title":"example"},{"level":1,"slug":"api","title":"api"},{"level":2,"slug":"var-db-randomdbname-opts","title":"var db = random(dbname, opts)"},{"level":2,"slug":"var-file-dbname-opts","title":"var file = db(name, opts)"},{"level":2,"slug":"filereadoffset-length-cb","title":"file.read(offset, length, cb)"},{"level":2,"slug":"filewriteoffset-buf-cb","title":"file.write(offset, buf, cb)"},{"level":1,"slug":"install","title":"install"},{"level":1,"slug":"license","title":"license"}]},{"depth":1,"name":"Other Related Dat Project Modules"},{"depth":2,"name":"mafintosh/peer-network","key":"peer-network","link":"/peer-network","toc":[{"level":1,"slug":"peer-network","title":"peer-network"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"var-network-peernetopts","title":"`var network = peernet(opts)`"},{"level":4,"slug":"var-server-networkcreateserveronconnection","title":"`var server = network.createServer([onconnection])`"},{"level":4,"slug":"serverlistenname-onlistening","title":"`server.listen(name, [onlistening])`"},{"level":4,"slug":"servercloseonclose","title":"`server.close([onclose])`"},{"level":4,"slug":"serveronconnection-stream","title":"`server.on('connection', stream)`"},{"level":4,"slug":"serveronlistening","title":"`server.on('listening')`"},{"level":4,"slug":"serveronerror-err","title":"`server.on('error', err)`"},{"level":4,"slug":"serveronclose","title":"`server.on('close')`"},{"level":4,"slug":"var-stream-networkconnectname","title":"`var stream = network.connect(name)`"},{"level":4,"slug":"streamonconnect","title":"`stream.on('connect')`"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"mafintosh/hyperdht","key":"hyperdht","link":"/hyperdht","toc":[{"level":1,"slug":"hyperdht","title":"hyperdht"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"usage","title":"Usage"},{"level":4,"slug":"var-dht-hyperdhtoptions","title":"`var dht = hyperdht([options])`"},{"level":4,"slug":"var-stream-dhtannouncekey-options-callback","title":"`var stream = dht.announce(key, [options], [callback])`"},{"level":4,"slug":"var-stream-dhtlookupkey-options-callback","title":"`var stream = dht.lookup(key, [options], [callback])`"},{"level":4,"slug":"dhtunannouncekey-options-callback","title":"`dht.unannounce(key, [options], [callback])`"},{"level":4,"slug":"dhtpingpeer-callback","title":"`dht.ping(peer, callback)`"},{"level":4,"slug":"dhtholepunchpeer-node-callback","title":"`dht.holepunch(peer, node, callback)`"},{"level":4,"slug":"dhtreadycallback","title":"`dht.ready(callback)`"},{"level":4,"slug":"dhtdestroycallback","title":"`dht.destroy(callback)`"},{"level":4,"slug":"dhtbootstrapcallback","title":"`dht.bootstrap([callback])`"},{"level":4,"slug":"dhtlistenport-callback","title":"`dht.listen(port, callback)`"},{"level":2,"slug":"command-line-tool","title":"Command line tool"},{"level":2,"slug":"license","title":"License"}]},{"depth":1,"name":"Dat Project Organization Stuff"},{"depth":2,"name":"datproject/datproject.org","key":"datproject.org","link":"/datproject.org","toc":[{"level":1,"slug":"dat-registry","title":"Dat Registry"},{"level":2,"slug":"features","title":"Features"},{"level":2,"slug":"setup","title":"Setup"},{"level":2,"slug":"configuration","title":"Configuration"},{"level":3,"slug":"secret-key","title":"Secret key"},{"level":3,"slug":"default-location-of-account-and-sqlite-databases","title":"Default location of account and sqlite databases"},{"level":3,"slug":"closed-beta","title":"Closed beta"},{"level":3,"slug":"location-of-cached-and-archived-dat-data","title":"Location of cached and archived dat data"},{"level":3,"slug":"mixpanel-account","title":"Mixpanel account"},{"level":3,"slug":"advanced-password-security","title":"Advanced password security"}]},{"depth":2,"name":"datproject/discussions","key":"discussions","link":"/discussions","toc":[]},{"depth":2,"name":"datproject/design","key":"design","link":"/design","toc":[{"level":1,"slug":"dat-design","title":"dat-design"},{"level":2,"slug":"build-and-deploy-documentation-website","title":"Build and deploy documentation website"},{"level":2,"slug":"build-andor-develop-on-this-module","title":"Build and/or develop on this module:"},{"level":2,"slug":"lessa-namedat-design-apigreaterlessagreaterapi-for-importing-scss-assets-into-other-projects","title":"<a name=\"dat-design-api\"></a>api for importing (s)css assets into other projects"},{"level":4,"slug":"vanilla-link","title":"vanilla link"},{"level":4,"slug":"vanilla-import","title":"vanilla @import:"},{"level":4,"slug":"node-sass-magic-importer","title":"node-sass-magic-importer:"},{"level":3,"slug":"how-to-use-dat-scss-in-your-project","title":"How To Use Dat (S)CSS in Your Project"},{"level":4,"slug":"reset","title":"Reset"},{"level":4,"slug":"variables","title":"Variables"},{"level":4,"slug":"dat-classes","title":"Dat classes"},{"level":4,"slug":"logo-assets","title":"Logo Assets"},{"level":2,"slug":"is-something-missing","title":"Is something missing?"}]},{"depth":2,"name":"datproject/dat-elements","key":"dat-elements","link":"/dat-elements","toc":[{"level":1,"slug":"dat-elements-stability01","title":"dat-elements [![stability][0]][1]"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"loader-loader","title":"`loader = Loader()`"},{"level":3,"slug":"sprite-sprite","title":"`sprite = Sprite()`"},{"level":3,"slug":"icon-iconiconname-options","title":"`icon = Icon(iconName, [options])`"},{"level":2,"slug":"installation","title":"Installation"},{"level":2,"slug":"see-also","title":"See Also"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"kriesse/dat-colors","key":"dat-colors","link":"/dat-colors","toc":[{"level":1,"slug":"dat-colors","title":"Dat Colors"},{"level":2,"slug":"styles","title":"Styles"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"kriesse/dat-icons","key":"dat-icons","link":"/dat-icons","toc":[{"level":1,"slug":"dat-icons","title":"dat-icons"},{"level":2,"slug":"usage","title":"Usage"},{"level":3,"slug":"icon-names","title":"Icon Names"},{"level":2,"slug":"build","title":"Build"}]},{"depth":2,"name":"juliangruber/dat.json","key":"dat.json","link":"/dat.json","toc":[{"level":1,"slug":"datjson","title":"dat.json"},{"level":2,"slug":"specification","title":"Specification"},{"level":3,"slug":"title","title":"`.title`"},{"level":3,"slug":"description","title":"`.description`"},{"level":3,"slug":"url","title":"`.url`"},{"level":3,"slug":"author","title":"`.author`"},{"level":2,"slug":"support","title":"Support"}]},{"depth":1,"name":"Outdated"},{"depth":2,"name":"juliangruber/dat.haus","key":"dat.haus","link":"/dat.haus","toc":[{"level":1,"slug":"httpsdathaus","title":"https://dat.haus/"},{"level":2,"slug":"roadmap","title":"Roadmap"}]},{"depth":2,"name":"poga/hyperfeed","key":"hyperfeed","link":"/hyperfeed","toc":[{"level":1,"slug":"hyperfeed","title":"Hyperfeed"},{"level":2,"slug":"synopsis","title":"Synopsis"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"var-feed-hyperfeedarchive-opts","title":"`var feed = hyperfeed(archive, [opts])`"},{"level":4,"slug":"feedkey","title":"`feed.key`"},{"level":4,"slug":"feeddiscoverykey","title":"`feed.discoveryKey`"},{"level":4,"slug":"feedmeta","title":"`feed.meta`"},{"level":4,"slug":"feedreadycb","title":"`feed.ready(cb)`"},{"level":4,"slug":"feedupdatefeedstream-cberr-feed","title":"`feed.update(feedStream, cb(err, feed))`"},{"level":4,"slug":"feedsetmetametadataobject-cberr","title":"`feed.setMeta(metadataObject, cb(err))`"},{"level":4,"slug":"feedlistcberr-entries","title":"`feed.list(cb(err, entries))`"},{"level":4,"slug":"feedsaveitem-scrappeddata-cberr","title":"`feed.save(item, [scrappedData], cb(err))`"},{"level":4,"slug":"feedexportcount-cberr-rss","title":"`feed.export(count, cb(err, rss))`"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"yoshuawuyts/normcore","key":"normcore","link":"/normcore","toc":[{"level":1,"slug":"normcore-stability01","title":"normcore [![stability][0]][1]"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"feed-normcorekeyornameorpath-opts","title":"feed = normcore(keyOrNameOrPath, [opts])"},{"level":3,"slug":"key-feedkey","title":"key = feed.key"},{"level":3,"slug":"feedappenddata","title":"feed.append(data)"},{"level":3,"slug":"writeablestream-feedcreatewriteablestream","title":"writeableStream = feed.createWriteableStream()"},{"level":3,"slug":"readablestream-feedcreatereadablestream","title":"readableStream = feed.createReadableStream()"},{"level":2,"slug":"installation","title":"Installation"},{"level":2,"slug":"see-also","title":"See Also"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"yoshuawuyts/github-to-hypercore","key":"github-to-hypercore","link":"/github-to-hypercore","toc":[{"level":1,"slug":"github-to-hypercore-stability01","title":"github-to-hypercore [![stability][0]][1]"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"installation","title":"Installation"},{"level":2,"slug":"see-also","title":"See Also"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"poga/hyperspark","key":"hyperspark","link":"/hyperspark","toc":[{"level":1,"slug":"hyperspark","title":"Hyperspark"},{"level":3,"slug":"goal","title":"Goal"},{"level":2,"slug":"how-to-use","title":"How to use"},{"level":4,"slug":"data-owner","title":"Data owner"},{"level":4,"slug":"data-scientist","title":"Data Scientist"},{"level":4,"slug":"computation-provider","title":"Computation Provider"},{"level":2,"slug":"synopsis","title":"Synopsis"},{"level":2,"slug":"related-modules","title":"Related Modules"}]},{"depth":2,"name":"juliangruber/hypercore-index","key":"hypercore-index","link":"/hypercore-index","toc":[{"level":1,"slug":"hypercore-index","title":"hypercore-index"},{"level":2,"slug":"example","title":"Example"},{"level":2,"slug":"installation","title":"Installation"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"var-append-indexstorage-opts-onentry-ondone","title":"var append = index(storage, opts, onentry, [ondone])"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"juliangruber/hyperdrive-encoding","key":"hyperdrive-encoding","link":"/hyperdrive-encoding","toc":[{"level":1,"slug":"hyperdrive-encoding","title":"hyperdrive-encoding"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"decodebuffer-start-end","title":".decode(buffer[, start][, end])"},{"level":3,"slug":"encodeobj-buffer-offset","title":".encode(obj[, buffer][, offset])"},{"level":2,"slug":"installation","title":"Installation"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"mafintosh/hyperdrive-http-server","key":"hyperdrive-http-server","link":"/hyperdrive-http-server","toc":[{"level":1,"slug":"hyperdrive-http-server","title":"hyperdrive-http-server"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"joehand/hyperdrive-http","key":"hyperdrive-http","link":"/hyperdrive-http","toc":[{"level":1,"slug":"hyperdrive-http","title":"Hyperdrive Http"},{"level":2,"slug":"usage","title":"Usage"},{"level":3,"slug":"setup","title":"Setup"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"options","title":"Options"},{"level":3,"slug":"url-format","title":"URL Format"},{"level":2,"slug":"cli","title":"CLI"}]},{"depth":2,"name":"joehand/dat-push","key":"dat-push","link":"/dat-push","toc":[{"level":1,"slug":"dat-push","title":"Dat Push"},{"level":3,"slug":"features","title":"Features"},{"level":2,"slug":"installation","title":"Installation"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"var-datpush-datpushopts","title":"`var datPush = DatPush(opts)`"},{"level":3,"slug":"datpushpushserverkey-cb","title":"`datPush.push(serverKey, [cb])`"},{"level":3,"slug":"datpushonceconnect-key","title":"`datPush.once('connect', key)`"},{"level":3,"slug":"datpushoncedat-open","title":"`datPush.once('dat-open')`"},{"level":3,"slug":"datpushoncereplication-ready-key","title":"`datPush.once('replication-ready', key)`"},{"level":3,"slug":"datpushoncereplicating-key","title":"`datPush.once('replicating', key)`"},{"level":3,"slug":"datpushonprogress-key-remote-total","title":"`datPush.on('progress', key, remote, total)`"},{"level":3,"slug":"datpushonceupload-finished-key","title":"`datPush.once('upload-finished', key)`"},{"level":3,"slug":"datpushdat","title":"`datPush.dat`"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"joehand/dat-backup","key":"dat-backup","link":"/dat-backup","toc":[{"level":1,"slug":"dat-backup","title":"dat-backup"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"var-backup-createbackupsource-opts","title":"`var backup = createBackup(source, [opts])`"},{"level":4,"slug":"backupready","title":"`backup.ready()`"},{"level":4,"slug":"backupaddopts-cb","title":"`backup.add([opts], cb)`"},{"level":4,"slug":"backupremovestart-end-cb","title":"`backup.remove(start, [end], cb)`"},{"level":4,"slug":"var-stream-backuplistopts-cb","title":"`var stream = backup.list([opts], [cb])`"},{"level":4,"slug":"backupserve","title":"`backup.serve()`"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"joehand/archiver-server","key":"archiver-server","link":"/archiver-server","toc":[{"level":1,"slug":"archiver-server","title":"Archiver-Server"},{"level":2,"slug":"usage","title":"Usage"},{"level":3,"slug":"serve-on-dat-network","title":"Serve on Dat Network"},{"level":3,"slug":"serve-over-http","title":"Serve Over HTTP"},{"level":3,"slug":"cli","title":"CLI"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"var-server-archiverserverarchiver-opts","title":"var server = archiverServer(archiver, [opts])"},{"level":4,"slug":"serverswarm","title":"`server.swarm`"},{"level":4,"slug":"serverhttprequest","title":"`server.httpRequest`"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"joehand/archiver-api","key":"archiver-api","link":"/archiver-api","toc":[{"level":1,"slug":"archiver-api-travishttpstravis-ciorgjoehandarchiver-apisvghttpstravis-ciorgjoehandarchiver-api-npmhttpsimgshieldsionpmvarchiver-apisvghttpsnpmjsorgpackagearchiver-api","title":"Archiver-API [![Travis](https://travis-ci.org/joehand/archiver-api.svg)](https://travis-ci.org/joehand/archiver-api) [![npm](https://img.shields.io/npm/v/archiver-api.svg)](https://npmjs.org/package/archiver-api)"},{"level":4,"slug":"features","title":"Features"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"var-api-archiverapiarchiver-opts","title":"`var api = ArchiverApi(archiver, [opts])`"},{"level":3,"slug":"apiaddopts-cb","title":"`api.add(opts, cb)`"},{"level":3,"slug":"apiremoveopts-cb","title":"`api.remove(opts, cb)`"},{"level":3,"slug":"apistatuscb","title":"`api.status(cb)`"},{"level":3,"slug":"apiarchiveprogresskey-cb","title":"`api.archiveProgress(key, cb)`"},{"level":3,"slug":"api-status","title":"API Status"},{"level":4,"slug":"implemented","title":"Implemented"},{"level":4,"slug":"todo","title":"TODO:"},{"level":2,"slug":"example-with-archiver-server","title":"Example with Archiver-Server"},{"level":3,"slug":"run-the-servers","title":"Run the Servers:"},{"level":3,"slug":"send-a-post-request-to-the-api","title":"Send a POST request to the API"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"poga/hyperdrive-ln","key":"hyperdrive-ln","link":"/hyperdrive-ln","toc":[{"level":1,"slug":"hyperdrive-ln","title":"hyperdrive-ln"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"lnlinkarchive-path-archivekey-meta-cb","title":"`ln.link(archive, path, archiveKey, [meta], cb)`"},{"level":4,"slug":"lnreadlinkarchive-path-cb","title":"`ln.readlink(archive, path, cb)`"},{"level":4,"slug":"lnresolvearchive-path-cb","title":"`ln.resolve(archive, path, cb)`"},{"level":4,"slug":"lndeepresolvedrive-swarmer-archive-path-cb","title":"`ln.deepResolve(drive, swarmer, archive, path, cb)`"},{"level":4,"slug":"lndeepcloseresult","title":"`ln.deepClose(result)`"},{"level":4,"slug":"body-lnencodekey-meta","title":"`body = ln.encode(key, [meta])`"},{"level":4,"slug":"lndecodebody","title":"`ln.decode(body)`"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"substack/hyperdrive-multiwriter","key":"hyperdrive-multiwriter","link":"/hyperdrive-multiwriter","toc":[{"level":1,"slug":"hyperdrive-multiwriter","title":"hyperdrive-multiwriter"},{"level":1,"slug":"example","title":"example"},{"level":1,"slug":"api","title":"api"},{"level":2,"slug":"var-mdrive-multidriveopts","title":"var mdrive = multidrive(opts)"},{"level":2,"slug":"var-r-mdrivelistopts-cb","title":"var r = mdrive.list(opts, cb)"},{"level":2,"slug":"var-w-mdrivecreatefilewritestreamentry","title":"var w = mdrive.createFileWriteStream(entry)"},{"level":2,"slug":"var-r-mdrivecreatefilereadstreamentry","title":"var r = mdrive.createFileReadStream(entry)"},{"level":2,"slug":"mdriveappendentry-cb","title":"mdrive.append(entry, cb)"},{"level":2,"slug":"mdrivegetentry-opts-cb","title":"mdrive.get(entry, opts, cb)"},{"level":2,"slug":"mdrivedownloadentry-opts-cb","title":"mdrive.download(entry, opts, cb)"},{"level":2,"slug":"mdriveclosecb","title":"mdrive.close(cb)"},{"level":2,"slug":"var-cursor-mdrivecreatebytecursorentry","title":"var cursor = mdrive.createByteCursor(entry)"},{"level":2,"slug":"var-stream-mdrivereplicate","title":"var stream = mdrive.replicate()"},{"level":2,"slug":"mdriveunreplicatestream","title":"mdrive.unreplicate(stream)"},{"level":1,"slug":"install","title":"install"},{"level":1,"slug":"license","title":"license"}]},{"depth":2,"name":"substack/hyperdrive-named-archives","key":"hyperdrive-named-archives","link":"/hyperdrive-named-archives","toc":[{"level":1,"slug":"hyperdrive-named-archives","title":"hyperdrive-named-archives"},{"level":1,"slug":"example","title":"example"},{"level":1,"slug":"api","title":"api"},{"level":2,"slug":"var-named-namedarchivesopts","title":"var named = namedArchives(opts)"},{"level":2,"slug":"var-archive-namedcreatearchivename-opts","title":"var archive = named.createArchive(name, opts)"},{"level":2,"slug":"namedgetlinkname-cb","title":"named.getLink(name, cb)"},{"level":2,"slug":"var-stream-namedlistopts-cb","title":"var stream = named.list(opts, cb)"},{"level":1,"slug":"install","title":"install"},{"level":1,"slug":"license","title":"license"}]},{"depth":2,"name":"substack/git-dat","key":"git-dat","link":"/git-dat","toc":[{"level":1,"slug":"git-dat","title":"git-dat"}]},{"depth":2,"name":"CfABrigadePhiladelphia/jawn","key":"jawn","link":"/jawn","toc":[{"level":1,"slug":"dat-jawn-git-for-tabular-data","title":"dat jawn: 'Git for Tabular Data'"},{"level":2,"slug":"project-team","title":"Project Team"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"contributing","title":"Contributing"}]},{"depth":2,"name":"maxogden/dat-archiver","key":"dat-archiver","link":"/dat-archiver","toc":[{"level":1,"slug":"dat-archiver","title":"Dat Archiver"},{"level":2,"slug":"installation","title":"Installation"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"var-archiver-archiveropts","title":"`var archiver = Archiver(opts)`"},{"level":3,"slug":"archiverjoinserverkey","title":"archiver.join(serverKey)"},{"level":3,"slug":"events","title":"Events"},{"level":4,"slug":"archiveronconnection-serverkey","title":"archiver.on('connection', serverKey)"},{"level":4,"slug":"archiveronkey-received-archivekey","title":"archiver.on('key received', archiveKey)"},{"level":4,"slug":"archiveronreplication-started-archivekey","title":"archiver.on('replication started', archiveKey)"},{"level":4,"slug":"archiveronreplication-ended-archivekey","title":"archiver.on('replication ended', archiveKey)"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"juliangruber/hyperdrive-stats","key":"hyperdrive-stats","link":"/hyperdrive-stats","toc":[{"level":1,"slug":"hyperdrive-stats","title":"hyperdrive-stats"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"stats","title":"Stats"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"karissa/hypercore-stats-server","key":"hypercore-stats-server","link":"/hypercore-stats-server","toc":[{"level":1,"slug":"hypercore-stats-server","title":"hypercore-stats-server"},{"level":3,"slug":"example","title":"Example"},{"level":3,"slug":"api","title":"API"},{"level":5,"slug":"statsarchive-response","title":"`stats(archive, response)`"}]},{"depth":2,"name":"mafintosh/hypercore-stats-ui","key":"hypercore-stats-ui","link":"/hypercore-stats-ui","toc":[{"level":1,"slug":"hypercore-stats-ui","title":"hypercore-stats-ui"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"var-onrequest-statsfeed-or-archive","title":"`var onrequest = stats(feed or archive)`"},{"level":2,"slug":"license","title":"License"}]},{"depth":2,"name":"karissa/zip-to-hyperdrive","key":"zip-to-hyperdrive","link":"/zip-to-hyperdrive","toc":[{"level":1,"slug":"zip-to-hyperdrive","title":"zip-to-hyperdrive"},{"level":2,"slug":"example","title":"Example"},{"level":2,"slug":"api","title":"API"},{"level":4,"slug":"hyperzipzipfile-archive-cb","title":"hyperzip(zipfile, archive, [cb])"}]},{"depth":2,"name":"joehand/url-dat","key":"url-dat","link":"/url-dat","toc":[{"level":1,"slug":"urls-to-dat","title":"Urls to Dat"},{"level":2,"slug":"usage","title":"Usage"}]},{"depth":2,"name":"joehand/tar-dat","key":"tar-dat","link":"/tar-dat","toc":[{"level":2,"slug":"tar-to-dat","title":"Tar to Dat"},{"level":3,"slug":"install","title":"Install"},{"level":3,"slug":"usage-packpipetardatarchive","title":"Usage: `pack.pipe(tarDat(archive))`"}]},{"depth":2,"name":"joehand/hyperdrive-duplicate","key":"hyperdrive-duplicate","link":"/hyperdrive-duplicate","toc":[{"level":1,"slug":"hyperdrive-duplicate","title":"hyperdrive-duplicate"},{"level":2,"slug":"usage","title":"Usage"},{"level":2,"slug":"api","title":"API"},{"level":3,"slug":"isduplicatearchive-filepath-entryname-cb","title":"isDuplicate(archive, filePath, [entryName], cb)"},{"level":2,"slug":"license","title":"License"}]}],"markdown":"/Users/joe/code/node_modules/minidocs-awesome/docs","initial":"awesome-dat","basedir":"","dir":"/Users/joe/code/node_modules/minidocs-awesome","routes":{"index":"/","awesome-dat":"/awesome-dat/","dat":"/dat/","dat-desktop":"/dat-desktop/","sciencefair":"/sciencefair/","hyperirc":"/hyperirc/","soundcloud-archiver":"/soundcloud-archiver/","hypervision":"/hypervision/","hypertweet":"/hypertweet/","dat-photos-app":"/dat-photos-app/","dat-node":"/dat-node/","dat-js":"/dat-js/","pauls-dat-api":"/pauls-dat-api/","node-dat-archive":"/node-dat-archive/","hypercore-archiver":"/hypercore-archiver/","hypercloud":"/hypercloud/","hashbase":"/hashbase/","dat-now":"/dat-now/","hypercore-archiver-bot":"/hypercore-archiver-bot/","hypercore-archiver-ws":"/hypercore-archiver-ws/","dat-registry-api":"/dat-registry-api/","dat-registry-client":"/dat-registry-client/","multidat":"/multidat/","multidrive":"/multidrive/","dat-pki":"/dat-pki/","injestdb":"/injestdb/","hyperdrive-http":"/hyperdrive-http/","dathttpd":"/dathttpd/","dat-dns":"/dat-dns/","dat-link-resolve":"/dat-link-resolve/","parse-dat-url":"/parse-dat-url/","dat-encoding":"/dat-encoding/","dat-log":"/dat-log/","dat-ls":"/dat-ls/","hyperhealth":"/hyperhealth/","hyperdrive-network-speed":"/hyperdrive-network-speed/","hyperdrive-import-files":"/hyperdrive-import-files/","mirror-folder":"/mirror-folder/","hyperdrive-staging-area":"/hyperdrive-staging-area/","hyperdrive-to-zip-stream":"/hyperdrive-to-zip-stream/","hyperpipe":"/hyperpipe/","hyperdrive":"/hyperdrive/","hypercore":"/hypercore/","dat-doctor":"/dat-doctor/","dat-ignore":"/dat-ignore/","dat-json":"/dat-json/","hyperdiscovery":"/hyperdiscovery/","discovery-swarm":"/discovery-swarm/","webrtc-swarm":"/webrtc-swarm/","dat-swarm-defaults":"/dat-swarm-defaults/","discovery-channel":"/discovery-channel/","dns-discovery":"/dns-discovery/","multicast-dns":"/multicast-dns/","bittorrent-dht":"/bittorrent-dht/","utp-native":"/utp-native/","signalhub":"/signalhub/","dat-storage":"/dat-storage/","dat-secret-storage":"/dat-secret-storage/","abstract-random-access":"/abstract-random-access/","multi-random-access":"/multi-random-access/","random-access-file":"/random-access-file/","random-access-memory":"/random-access-memory/","random-access-page-files":"/random-access-page-files/","dat-http":"/dat-http/","random-access-idb":"/random-access-idb/","peer-network":"/peer-network/","hyperdht":"/hyperdht/","datproject.org":"/datproject.org/","discussions":"/discussions/","design":"/design/","dat-elements":"/dat-elements/","dat-colors":"/dat-colors/","dat-icons":"/dat-icons/","dat.json":"/dat.json/","dat.haus":"/dat.haus/","hyperfeed":"/hyperfeed/","normcore":"/normcore/","github-to-hypercore":"/github-to-hypercore/","hyperspark":"/hyperspark/","hypercore-index":"/hypercore-index/","hyperdrive-encoding":"/hyperdrive-encoding/","hyperdrive-http-server":"/hyperdrive-http-server/","dat-push":"/dat-push/","dat-backup":"/dat-backup/","archiver-server":"/archiver-server/","archiver-api":"/archiver-api/","hyperdrive-ln":"/hyperdrive-ln/","hyperdrive-multiwriter":"/hyperdrive-multiwriter/","hyperdrive-named-archives":"/hyperdrive-named-archives/","git-dat":"/git-dat/","jawn":"/jawn/","dat-archiver":"/dat-archiver/","hyperdrive-stats":"/hyperdrive-stats/","hypercore-stats-server":"/hypercore-stats-server/","hypercore-stats-ui":"/hypercore-stats-ui/","zip-to-hyperdrive":"/zip-to-hyperdrive/","url-dat":"/url-dat/","tar-dat":"/tar-dat/","hyperdrive-duplicate":"/hyperdrive-duplicate/"},"html":{"awesome-dat":"<h1 id=\"dat-awesome-awesomehttpscdnrawgitcomsindresorhusawesomed7305f38d29fed78fa85652e3a63e154dd8e8829mediabadgesvghttpsgithubcomsindresorhusawesome\"><a href=\"#dat-awesome-awesomehttpscdnrawgitcomsindresorhusawesomed7305f38d29fed78fa85652e3a63e154dd8e8829mediabadgesvghttpsgithubcomsindresorhusawesome\" class=\"anchor\"></a>Dat awesome <a href=\"https://github.com/sindresorhus/awesome\"><img src=\"https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg\" alt=\"Awesome\"></a></h1><p><a href=\"https://datproject.org\"><img src=\"http://datproject.github.io/design/downloads/dat-data-logo.png\" align=\"right\" width=\"140\"></a></p>\n<blockquote>\n<p>A curated list of the <a href=\"https://datproject.org\">Dat Project</a> ecosystem.</p>\n</blockquote>\n<p><em>Please read the <a href=\"contributing.md\">contribution guidelines</a> before contributing.</em></p>\n<p>Want to learn more? Check out:</p>\n<ul>\n<li><a href=\"https://docs.datproject.org/\">docs.datproject.org</a></li>\n<li><a href=\"https://datproject.org/paper\">dat whitepaper</a></li>\n<li><a href=\"http://chat.datproject.org/\">chat.datproject.org</a></li>\n</ul>\n<h2 id=\"dat-applications\"><a href=\"#dat-applications\" class=\"anchor\"></a>Dat Applications</h2><p>User facing applications for sharing, downloading, and managing dats.</p>\n<ul>\n<li><a href=\"https://github.com/datproject/dat\">dat</a> - command line interface for managing dat archives</li>\n<li><a href=\"https://github.com/datproject/dat-desktop\">Dat Desktop</a> - desktop app for managing dat archives</li>\n<li><a href=\"https://beakerbrowser.com/\">Beaker Browser</a> - a peer-to-peer browser with tools to create and host websites.</li>\n</ul>\n<h3 id=\"community-applications\"><a href=\"#community-applications\" class=\"anchor\"></a>Community Applications</h3><p>Projects built using Dat to share and transfer data. Open a PR to add your project here!</p>\n<ul>\n<li><a href=\"https://github.com/codeforscience/sciencefair\">sciencefair</a> - The open source p2p desktop science library that puts users in control 🔬 📖 <a href=\"http://sciencefair-app.com\">http://sciencefair-app.com</a></li>\n<li><a href=\"https://github.com/mafintosh/hyperirc\">hyperirc</a> - bot that mirrors irc channels to a hypercore read-only log</li>\n<li><a href=\"https://github.com/jondashkyle/soundcloud-archiver\">soundcloud-archiver</a> - decentralized archives rescue music in case soundcloud shuts down</li>\n<li><a href=\"https://github.com/mafintosh/hypervision\">hypervision</a> - watch and broadcast peer-to-peer live video streams</li>\n<li><a href=\"https://github.com/joehand/hypertweet\">hypertweet</a> - stream your twitter feed to a hypercore feed</li>\n<li><a href=\"https://github.com/beakerbrowser/dat-photos-app\">dat-photos-app</a> - decentralized, peer-to-peer photo sharing app for beaker browser</li>\n</ul>\n<h2 id=\"using-dat\"><a href=\"#using-dat\" class=\"anchor\"></a>Using Dat</h2><p>Modules that help you build things on top of Dat:</p>\n<h3 id=\"high-level-apis\"><a href=\"#high-level-apis\" class=\"anchor\"></a>High-Level APIs</h3><p>High-level APIs that act as glue for many of the Dat modules:</p>\n<ul>\n<li><a href=\"https://github.com/datproject/dat-node\">dat-node</a> - Node module for creating Dat applications with distributed file systems.</li>\n<li><a href=\"https://github.com/datproject/dat-js\">dat-js</a> - A pure JavaScript browser-friendly api for using dat over webrtc</li>\n<li><a href=\"https://github.com/beakerbrowser/pauls-dat-api\">pauls-dat-api</a> - Library of functions that make working with dat / hyperdrive easier.</li>\n<li><a href=\"https://github.com/beakerbrowser/node-dat-archive\">node-dat-archive</a> - node api that supports beaker browser DatArchive format, uses <code>pauls-dat-api</code></li>\n</ul>\n<h3 id=\"hosting-and-dat-management\"><a href=\"#hosting-and-dat-management\" class=\"anchor\"></a>Hosting &amp; Dat Management</h3><p>Tools for hosting Dats, managing sets of Dats, etc.</p>\n<ul>\n<li><a href=\"https://github.com/mafintosh/hypercore-archiver\">hypercore-archiver</a> - archiver peer that backs up multiple hypercore / hyperdrive feeds to disk</li>\n<li><a href=\"https://github.com/datprotocol/hypercloud\">hypercloud</a> - p2p + ☁</li>\n<li><a href=\"https://github.com/beakerbrowser/hashbase\">hashbase</a> - hosting for the peer-to-peer web</li>\n<li><a href=\"https://github.com/joehand/dat-now\">dat-now</a> - publish live syncing and versioned websites, files or whatever to <code>now.sh</code> instantly</li>\n</ul>\n<p>Utilities for <code>hypercore-archiver</code>:</p>\n<ul>\n<li><a href=\"https://github.com/mafintosh/hypercore-archiver-bot\">hypercore-archiver-bot</a> - IRC bot that provides an interface to <code>hypercore-archiver</code></li>\n<li><a href=\"https://github.com/joehand/hypercore-archiver-ws\">hypercore-archiver-ws</a> - websocket server for hypercore-archiver</li>\n</ul>\n<p>Dat project runs a registry at datproject.org. We use these tools to manage our dats:</p>\n<ul>\n<li><a href=\"https://github.com/datproject/dat-registry-api\">dat-registry-api</a> - account registry api for dat archives with user accounts, uses <code>township</code></li>\n<li><a href=\"https://github.com/datproject/dat-registry-client\">dat-registry-client</a> - client for registry api for user registration, login and publishing</li>\n</ul>\n<h4 id=\"managing-and-aggregating-dats\"><a href=\"#managing-and-aggregating-dats\" class=\"anchor\"></a>Managing &amp; Aggregating Dats</h4><ul>\n<li><a href=\"https://github.com/datproject/multidat\">multidat</a> - manage dat archives in multiple locations, uses a dat factory, based on <code>multidrive</code></li>\n<li><a href=\"https://github.com/datproject/multidrive\">multidrive</a> - manage multiple hyperdrive archives located anywhere on the filesystem</li>\n<li><a href=\"https://github.com/jayrbolton/dat-pki\">dat-pki</a> - A public key infrastructure with many encryption utilities for Dat filesharing</li>\n<li><a href=\"https://github.com/beakerbrowser/injestdb\">injestdb</a> - decentralized table/records-based database with sql-like behaviour, uses <code>node-dat-archive</code></li>\n</ul>\n<h4 id=\"http-hosting\"><a href=\"#http-hosting\" class=\"anchor\"></a>Http Hosting</h4><ul>\n<li><a href=\"https://github.com/joehand/hyperdrive-http\">hyperdrive-http</a> - serve hyperdrive archives over http</li>\n<li><a href=\"https://github.com/beakerbrowser/dathttpd\">dathttpd</a> - A Web server for Dat and HTTPS, with zero-config TLS.</li>\n</ul>\n<h3 id=\"dat-link-utilties\"><a href=\"#dat-link-utilties\" class=\"anchor\"></a>Dat Link Utilties</h3><p>Resolving, parsing, encoding dat links.</p>\n<ul>\n<li><a href=\"https://github.com/datprotocol/dat-dns\">dat-dns</a> - issue dns lookups for dat archives using https requests to a target host</li>\n<li><a href=\"https://github.com/joehand/dat-link-resolve\">dat-link-resolve</a> - resolve dat url&#39;s, links to a dat key using common methods, uses <code>dat-dns</code></li>\n<li><a href=\"https://github.com/pfrazee/parse-dat-url\">parse-dat-url</a> - node&#39;s <code>url.parse</code> updated to support versioned dat url&#39;s</li>\n<li><a href=\"https://github.com/juliangruber/dat-encoding\">dat-encoding</a> - encoder and decoder that supports the dat url-scheme</li>\n</ul>\n<h3 id=\"dat-utilities\"><a href=\"#dat-utilities\" class=\"anchor\"></a>Dat Utilities</h3><p>Utilities to show information about an existing dat archive.</p>\n<ul>\n<li><a href=\"https://github.com/joehand/dat-log\">dat-log</a> - simple cli that lists the history of a dat archive</li>\n<li><a href=\"https://github.com/mafintosh/dat-ls\">dat-ls</a> - simple cli that lists all the changes in a dat archive</li>\n<li><a href=\"https://github.com/karissa/hyperhealth\">hyperhealth</a> - monitor health of hyperdrive or dat archives, e.g. peer count and peer mirror %</li>\n<li><a href=\"https://github.com/joehand/hyperdrive-network-speed\">hyperdrive-network-speed</a> - track upload and download speeds on hyperdrive archives</li>\n</ul>\n<h3 id=\"file-imports-and-exports\"><a href=\"#file-imports-and-exports\" class=\"anchor\"></a>File Imports &amp; Exports</h3><ul>\n<li><a href=\"https://github.com/juliangruber/hyperdrive-import-files\">hyperdrive-import-files</a> - import files and folders into a hyperdrive archive</li>\n<li><a href=\"https://github.com/mafintosh/mirror-folder\">mirror-folder</a> - Small module to mirror a folder to another folder. Supports live mode as well.</li>\n<li><a href=\"https://github.com/pfrazee/hyperdrive-staging-area\">hyperdrive-staging-area</a> - staging area for uncommited writes that can sync to a hyperdrive archive</li>\n<li><a href=\"https://github.com/pfrazee/hyperdrive-to-zip-stream\">hyperdrive-to-zip-stream</a> - export hyperdrive archives as a zip files</li>\n</ul>\n<h3 id=\"hypercore-tools\"><a href=\"#hypercore-tools\" class=\"anchor\"></a>Hypercore Tools</h3><p>Tools for using hypercore feeds</p>\n<ul>\n<li><a href=\"https://github.com/mafintosh/hyperpipe\">hyperpipe</a> - simple cli to pipe and read files into live hypercore feeds</li>\n</ul>\n<h2 id=\"dat-core-modules\"><a href=\"#dat-core-modules\" class=\"anchor\"></a>Dat Core Modules</h2><p>Things we used to build Dat. Dat tools (CLI, Desktop, dat-node) are opinonated versions of hyperdrive that work well for using facing applications.</p>\n<ul>\n<li><a href=\"https://github.com/mafintosh/hyperdrive\">hyperdrive</a> - secure, decentralized peer-to-peer file system on top of hypercore</li>\n<li><a href=\"https://github.com/mafintosh/hypercore\">hypercore</a> - decentralized peer-to-peer append-only logs using hypercore protocol</li>\n</ul>\n<h3 id=\"cli-utilities\"><a href=\"#cli-utilities\" class=\"anchor\"></a>CLI Utilities</h3><p>Utilities used in our command line interface</p>\n<ul>\n<li><a href=\"https://github.com/joehand/dat-doctor\">dat-doctor</a> - diagnose networking problems for dat, comes bundled with <code>dat-cli</code></li>\n<li><a href=\"https://github.com/joehand/dat-ignore\">dat-ignore</a> - check files against <code>.datignore</code> before adding to a dat archive</li>\n<li><a href=\"https://github.com/joehand/dat-json\">dat-json</a> - read and write <code>dat.json</code> files, uses <code>toiletdb</code></li>\n</ul>\n<h3 id=\"networking\"><a href=\"#networking\" class=\"anchor\"></a>Networking</h3><ul>\n<li><a href=\"https://github.com/karissa/hyperdiscovery\">hyperdiscovery</a> - join the p2p swarm for hypercore feeds, uses <code>discovery-swarm</code></li>\n<li><a href=\"https://github.com/mafintosh/discovery-swarm\">discovery-swarm</a> - discover and connect to peers, uses <code>discovery-channel</code></li>\n<li><a href=\"https://github.com/mafintosh/webrtc-swarm\">webrtc-swarm</a> - create a swarm of p2p connections using webrtc and a signalhub</li>\n<li><a href=\"https://github.com/joehand/dat-swarm-defaults\">dat-swarm-defaults</a> - default configuration for dns and dht for use with <code>discovery-swarm</code></li>\n</ul>\n<h4 id=\"lower-level-networking-modules\"><a href=\"#lower-level-networking-modules\" class=\"anchor\"></a>Lower level networking modules</h4><ul>\n<li><a href=\"https://github.com/maxogden/discovery-channel\">discovery-channel</a> - search discovery networks to find answering peers</li>\n<li><a href=\"https://github.com/mafintosh/dns-discovery\">dns-discovery</a> - discover peers using regular- and <code>multicast-dns</code></li>\n<li><a href=\"https://github.com/mafintosh/multicast-dns\">multicast-dns</a> - low-level multicast-dns implementation in pure javascript</li>\n<li><a href=\"https://github.com/webtorrent/bittorrent-dht\">bittorrent-dht</a> - complete js implementation of DHT peer discovery protocol</li>\n<li><a href=\"https://github.com/mafintosh/utp-native\">utp-native</a> - utp protocol implementation, based on <code>libutp</code> native bindings</li>\n<li><a href=\"https://github.com/mafintosh/signalhub\">signalhub</a> - simple signalling server that can be used to coordinate handshaking with webrtc</li>\n</ul>\n<h3 id=\"storage\"><a href=\"#storage\" class=\"anchor\"></a>Storage</h3><ul>\n<li><a href=\"https://github.com/datproject/dat-storage\">dat-storage</a> - Dat specific storage provider for Hyperdrive</li>\n<li><a href=\"https://github.com/datproject/dat-secret-storage\">dat-secret-storage</a> - hyperdrive storage module for dat secret keys</li>\n</ul>\n<h4 id=\"random-access\"><a href=\"#random-access\" class=\"anchor\"></a>Random Access</h4><p>Dat relies on random access storage. Any of these modules can be used to provide the storage for a dat archive.</p>\n<ul>\n<li><a href=\"https://github.com/juliangruber/abstract-random-access\">abstract-random-access</a> - base class for random access stores</li>\n<li><a href=\"https://github.com/mafintosh/multi-random-access\">multi-random-access</a> - combine multiple <code>abstract-random-access</code> stores into a single one</li>\n</ul>\n<p>The following are specific implementations of abstract-random-access:</p>\n<ul>\n<li><a href=\"https://github.com/mafintosh/random-access-file\">random-access-file</a> - continuous reading / writing to files using random offset and lengths</li>\n<li><a href=\"https://github.com/mafintosh/random-access-memory\">random-access-memory</a> - same as <code>random-access-file</code> but maintains data in memory</li>\n<li><a href=\"https://github.com/mafintosh/random-access-page-files\">random-access-page-files</a> - backend writing to fixed size page files, useful for sparse data</li>\n<li><a href=\"https://github.com/datproject/dat-http\">dat-http</a> - http transport and storage provider for dat archives</li>\n<li><a href=\"https://github.com/substack/random-access-idb\">random-access-idb</a> - random-access-compatible indexedDB storage layer</li>\n</ul>\n<h3 id=\"other-related-dat-project-modules\"><a href=\"#other-related-dat-project-modules\" class=\"anchor\"></a>Other Related Dat Project Modules</h3><p>More modules from Dat project that are related to Dat but may not be used currently.</p>\n<ul>\n<li><a href=\"https://github.com/mafintosh/peer-network\">peer-network</a> - create internet-accessible servers/clients listening on names, not hostnames</li>\n<li><a href=\"https://github.com/mafintosh/hyperdht\">hyperdht</a> - DHT that supports peer discovery and distributed hole punching</li>\n</ul>\n<h2 id=\"dat-project-organization-stuff\"><a href=\"#dat-project-organization-stuff\" class=\"anchor\"></a>Dat Project Organization Stuff</h2><ul>\n<li><a href=\"https://github.com/datproject/datproject.org\">datproject.org</a> - datproject.org on github</li>\n<li><a href=\"https://github.com/datproject/discussions/issues\">discussions</a> - general dat project discussion, ideas, feature requests</li>\n<li><a href=\"https://github.com/datproject/design\">styleguide</a> - styleguide and visual assets for the dat project</li>\n<li><a href=\"https://github.com/datproject/dat-elements\">dat-elements</a> - reusable ui elements for dat-based apps, such as loader, sprite, icon</li>\n<li><a href=\"https://github.com/kriesse/dat-colors\">dat-colors</a> - css color definitions that match dat styleguide</li>\n<li><a href=\"https://github.com/kriesse/dat-icons\">dat-icons</a> - svg icon definitions that match dat styleguide</li>\n<li><a href=\"https://github.com/juliangruber/dat.json\">dat.json specification</a> - specification of the dat.json metadata format</li>\n</ul>\n<h2 id=\"outdated\"><a href=\"#outdated\" class=\"anchor\"></a>Outdated</h2><p>Modules that are currently outdated. We released a major breaking change (hypercore v6, hyperdrive v9) in May 2017. This change included major speed and storage improvements. These modules need to be updated to support the new API.</p>\n<p>If you want to update one of these, we are happy to help you choose one depending on your interests and what may still be useful.</p>\n<ul>\n<li><a href=\"https://github.com/juliangruber/dat.haus\">dat.haus</a> - dat + http + unix, the composable http api to the dat network</li>\n<li><a href=\"https://github.com/poga/hyperfeed\">hyperfeed</a> - publish decentralized rss, atom or rdf feeds, based on <code>hyperdrive</code> and <code>feed</code></li>\n<li><a href=\"https://github.com/yoshuawuyts/normcore\">normcore</a> - no-config distributed streams using <code>hypercore</code></li>\n<li><a href=\"https://github.com/yoshuawuyts/github-to-hypercore\">github-to-hypercore</a> - stream github event feeds into hypercore feeds, uses <code>normcore</code></li>\n<li><a href=\"https://github.com/poga/hyperspark\">hyperspark</a> - decentralized data processing platform for dat archives, inspired by <code>spark</code></li>\n<li><a href=\"https://github.com/juliangruber/hypercore-index\">hypercore-index</a> - linear asynchronous stateful indexing of a hypercore feed</li>\n<li><a href=\"https://github.com/juliangruber/hyperdrive-encoding\">hyperdrive-protocol</a> -  message encoding used by <code>hyperdrive</code></li>\n<li><a href=\"https://github.com/mafintosh/hyperdrive-http-server\">hyperdrive-http-server</a> - small cli to serve hyperdrive archives over http</li>\n<li><a href=\"https://github.com/joehand/hyperdrive-http\">dat-publish</a> - small cli to publish dat archives to a <code>hyperdrive-http</code> or <code>dat-archiver</code> server</li>\n<li><a href=\"https://github.com/joehand/dat-push\">dat-push</a> - small cli for pushing files to a <code>dat-archiver</code> or <code>dat-publish</code> server</li>\n<li><a href=\"https://github.com/joehand/dat-backup\">dat-backup</a> - backup a dat archive as a single file to local storage and retain full history</li>\n<li><a href=\"https://github.com/joehand/archiver-server\">archiver-server</a> - serve <code>hypercore-archiver</code> feeds over the dat network and http, uses <code>discovery-swarm</code></li>\n<li><a href=\"https://github.com/joehand/archiver-api\">archiver-api</a> - simple rest api for accessing <code>hypercore-archiver</code> peers</li>\n<li><a href=\"https://github.com/poga/hyperdrive-ln\">hyperdrive-ln</a> - create symbolic links between hyperdrive archives</li>\n<li><a href=\"https://github.com/substack/hyperdrive-multiwriter\">hyperdrive-multiwriter</a> - present a bundle of hyperdrive archives together as a multi-writer view</li>\n<li><a href=\"https://github.com/substack/hyperdrive-named-archives\">hyperdrive-named-archives</a> - create hyperdrive archives that store and load link keys from names</li>\n<li><a href=\"https://github.com/substack/git-dat\">git-dat</a> - git plugin to use dat archives as remotes for a git repository</li>\n<li><a href=\"https://github.com/CfABrigadePhiladelphia/jawn\">jawn</a> - distributed version control for tabular data, based on <code>hypercore</code></li>\n<li><a href=\"https://github.com/maxogden/dat-archiver\">dat-archiver</a> - archiver peer that backs up dat archives, based on <code>hypercore-archiver</code></li>\n<li><a href=\"https://github.com/juliangruber/hyperdrive-stats\">hyperdrive-stats</a> - live and persistent statistics tracker for hyperdrive archives</li>\n<li><a href=\"https://github.com/karissa/hypercore-stats-server\">hyperdrive-stats-server</a> - server for sending hypercore / hyperdrive stats over server-side events</li>\n<li><a href=\"https://github.com/mafintosh/hypercore-stats-ui\">hyperdrive-stats-ui</a> - html-based user interface to <code>hypercore-stats-server</code></li>\n<li><a href=\"https://github.com/karissa/zip-to-hyperdrive\">zip-to-hyperdrive</a> - import contents of a zip archive into a hyperdrive archive</li>\n<li><a href=\"https://github.com/joehand/url-dat\">url-dat</a> - import files from http url&#39;s into a hyperdrive archive, uses <code>tar-dat</code></li>\n<li><a href=\"https://github.com/joehand/tar-dat\">tar-dat</a> - stream tar files into a hyperdrive archive</li>\n<li><a href=\"https://github.com/joehand/hyperdrive-duplicate\">hyperdrive-duplicate</a> - check if a file is a duplicate to a hyperdrive archive entry</li>\n</ul>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p><a href=\"https://creativecommons.org/publicdomain/zero/1.0/\"><img src=\"http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg\" alt=\"CC0\"></a></p>\n<p>To the extent possible under law, the Dat team, and contributors have waived all copyright and related or neighboring rights to this work.</p>\n","dat":"<h1 id=\"dat\"><a href=\"#dat\" class=\"anchor\"></a>Dat</h1><blockquote>\n<p>npm install -g dat</p>\n</blockquote>\n<p>Dat is the distributed data sharing tool.\nShare files with version control, back up data to servers, browse remote files on demand, and automate long-term data preservation.\nSecure, distributed, fast.</p>\n<p><a href=\"https://datproject.org\"><img src=\"https://datproject.github.io/design/downloads/dat-data-logo.png\" align=\"right\" width=\"140\"></a></p>\n<p>Have questions? Join our chat via IRC or Gitter:</p>\n<p><a href=\"http://webchat.freenode.net/?channels=dat\"><img src=\"https://img.shields.io/badge/irc%20channel-%23dat%20on%20freenode-blue.svg\" alt=\"#dat IRC channel on freenode\"></a>\n<a href=\"https://gitter.im/datproject/discussions?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\"><img src=\"https://badges.gitter.im/Join%20Chat.svg\" alt=\"datproject/discussions\"></a></p>\n<h3 id=\"table-of-contents\"><a href=\"#table-of-contents\" class=\"anchor\"></a>Table of Contents</h3><li><a href=\"#installation\">Installation</a></li>\n<li><a href=\"#getting-started\">Getting Started</a></li>\n<li><a href=\"#usage\">Using Dat</a></li>\n<li><a href=\"#troubleshooting\">Troubleshooting</a></li>\n<li><a href=\"#js-api\">Javascript API</a></li>\n<li><a href=\"#for-developers\">For Developers</a></li>\n\n<h4 id=\"what-is-dat\"><a href=\"#what-is-dat\" class=\"anchor\"></a>What is Dat?</h4><p>Share, backup, and publish your filesystem. You can turn any folder on your computer into a dat. Dat scans your folder, allowing you to:</p>\n<ul>\n<li>Track your files with automatic version history.</li>\n<li>Share files with others over a secure peer to peer network.</li>\n<li>Automate live backups to external hds or remote servers.</li>\n<li>Publish and share files with built in HTTP server.</li>\n</ul>\n<p>Dat allows you to focus on the fun work without worrying about moving files around. <strong>Secure</strong>, <strong>distributed</strong>, <strong>fast</strong>.</p>\n<p>The <a href=\"http://datproject.org\">Dat Project</a> is the home to open source data sharing applications led by <a href=\"http://codeforscience.org\">Code for Science &amp; Society</a>, a nonprofit.</p>\n<ul>\n<li>Documentation: <a href=\"http://docs.datproject.org\">docs.datproject.org</a></li>\n<li>Dat Protocol: <a href=\"http://www.datprotocol.com\">datprotocol.com</a></li>\n<li><a href=\"https://github.com/datproject/docs/blob/master/papers/dat-paper.pdf\">Dat white paper</a></li>\n</ul>\n<h5 id=\"other-applications\"><a href=\"#other-applications\" class=\"anchor\"></a>Other Applications</h5><p>Rather not use the command line? Check out these options:</p>\n<ul>\n<li><a href=\"https://datproject.org/install#desktop\">Dat Desktop</a> - A desktop app to manage multiple Dats on your desktop machine.</li>\n<li><a href=\"http://beakerbrowser.com\">Beaker Browser</a> - An experimental p2p browser with built-in support for the Dat protocol.</li>\n</ul>\n<h2 id=\"dat-command-line\"><a href=\"#dat-command-line\" class=\"anchor\"></a>dat command line</h2><p>Share, download, and backup files with the command line! Automatically sync changes to datasets. Never worry about manually transferring files again.</p>\n<table>\n<thead>\n<tr>\n<th>Mac/Linux</th>\n<th>Windows</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://travis-ci.org/datproject/dat\"><img src=\"https://travis-ci.org/datproject/dat.svg?branch=master\" alt=\"Travis\"></a></td>\n<td><a href=\"https://ci.appveyor.com/project/joehand/dat/branch/master\"><img src=\"https://ci.appveyor.com/api/projects/status/github/datproject/dat?branch=master&amp;svg=true\" alt=\"Build status\"></a></td>\n<td><a href=\"https://npmjs.org/package/dat\"><img src=\"https://img.shields.io/npm/v/dat.svg\" alt=\"NPM version\"></a></td>\n</tr>\n</tbody>\n</table>\n<p>Have questions or need some guidance?\nYou can chat with us in IRC on <a href=\"http://webchat.freenode.net/?channels=dat\">#dat</a> or <a href=\"https://gitter.im/datproject/discussions?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\">Gitter</a>!</p>\n<h2 id=\"installation\"><a href=\"#installation\" class=\"anchor\"></a>Installation</h2><p>Dat can be used as a command line tool or as javascript library:</p>\n<ul>\n<li><code>npm install -g dat</code> - Install <code>dat</code> globally to use in the command line.</li>\n<li><a href=\"http://github.com/datproject/dat-node\">require(&#39;dat&#39;)</a> - dat-node, a library for downloading and sharing Dat archives in javascript apps.</li>\n</ul>\n<h3 id=\"installing-via-npm\"><a href=\"#installing-via-npm\" class=\"anchor\"></a>Installing via npm</h3><p>The Dat command line tool can be installed with <code>npm</code>:</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> -g dat\n</code></pre><p>Make sure you have <code>node</code> and <code>npm</code> installed first. If not, see the prerequisites section below.</p>\n<p>Once <code>npm install</code> finishes, you should be able to run the <code>dat</code> command. If not, see the <a href=\"#troubleshooting\">installation troubleshooting</a> for tips.</p>\n<h4 id=\"prerequisites\"><a href=\"#prerequisites\" class=\"anchor\"></a>Prerequisites</h4><ul>\n<li><strong>Node</strong>: You&#39;ll need to <a href=\"https://nodejs.org/en/download/\">install Node</a> before installing Dat. Dat needs <code>node</code> version 4 or above and <code>npm</code> installed. You can run <code>node -v</code> to check your version.</li>\n<li><strong>npm</strong>: <code>npm</code> is installed with node. You can run <code>npm -v</code> to make sure it is installed.</li>\n</ul>\n<p>Once you have <code>npm</code> ready, install <code>dat</code> from npm with the <code>--global, -g</code> option, <code>npm install -g dat</code>.</p>\n<h3 id=\"js-library\"><a href=\"#js-library\" class=\"anchor\"></a>JS Library</h3><p>Add Dat to your <code>package.json</code>, <code>npm install dat --save</code>. Dat exports the <a href=\"http://github.com/datproject/dat-node\">dat-node</a> API via <code>require(&#39;dat&#39;)</code>. Use it in your javascript applications! Dat Desktop and dat command line both use dat-node to share and download dats.</p>\n<p>Full API documentation is available in the dat-node repository on Github.</p>\n<h2 id=\"getting-started\"><a href=\"#getting-started\" class=\"anchor\"></a>Getting started</h2><p>We have Dat installed, let&#39;s use it!</p>\n<p>Dat&#39;s unique design works wherever you store your data. You can create a new dat from any folder on your computer.</p>\n<p>A dat is some files from your computer and a <code>.dat</code> folder. Each dat has unique <code>dat://</code> link. With your dat link, other users can download your files and live sync any updates.</p>\n<h3 id=\"sharing-data\"><a href=\"#sharing-data\" class=\"anchor\"></a>Sharing Data</h3><p>You can start sharing your files with a single command. Unlike <code>git</code>, you do not have to initialize a repository first, <code>dat share</code> will do that for you:</p>\n<pre><code>dat share <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dir</span>&gt;</span>\n</code></pre><p>Use <code>dat share</code> to create a dat and sync your files from your computer to other users. Dat scans your files inside <code>&lt;dir&gt;</code>, creating metadata in <code>&lt;dir&gt;/.dat</code>. Dat stores the public link, version history, and file information inside the dat folder.</p>\n<p><img src=\"https://raw.githubusercontent.com/datproject/docs/master/assets/cli-share.gif\" alt=\"share\"></p>\n<h3 id=\"downloading-data\"><a href=\"#downloading-data\" class=\"anchor\"></a>Downloading Data</h3><pre><code>dat <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">dat</span>://<span class=\"hljs-tag\">&lt;link&gt;</span> <span class=\"hljs-tag\">&lt;download-dir&gt;</span>\n</code></pre><p>Use <code>dat clone</code> to download files from a remote computers sharing files with Dat. This will download the files from <code>dat://&lt;link&gt;</code> to your <code>&lt;download-dir&gt;</code>. The download exits after it completes but you can continue to update the files later after the clone is done. Use <code>dat pull</code> to update new files or <code>dat sync</code> to live sync changes.</p>\n<p><img src=\"https://raw.githubusercontent.com/datproject/docs/master/assets/cli-clone.gif\" alt=\"clone\"></p>\n<p>Try out <code>dat clone</code> with the link above to read more about the protocol!</p>\n<h3 id=\"other-cool-commands\"><a href=\"#other-cool-commands\" class=\"anchor\"></a>Other Cool Commands</h3><p>A few other highlights. Run <code>dat help</code> to see the full usage guide.</p>\n<ul>\n<li><code>dat create</code> - Create a empty dat and dat.json file.</li>\n<li><code>dat doctor</code> - Dat network doctor! The doctor tries to connect to a public peer. The doctor also creates a key to test direct connections.</li>\n<li><code>dat log ~/data/dat-folder/</code> or <code>dat log dat://&lt;key&gt;</code> - view the history and metadata information for a dat.</li>\n</ul>\n<h3 id=\"quick-demos\"><a href=\"#quick-demos\" class=\"anchor\"></a>Quick Demos</h3><p>To get started using Dat, you can try downloading a dat and then sharing a dat of your own.</p>\n<h4 id=\"download-demo\"><a href=\"#download-demo\" class=\"anchor\"></a>Download Demo</h4><p>We made a demo folder we made just for this exercise. Inside the demo folder is a <code>dat.json</code> file and a gif. We shared these files via Dat and now you can download them with our dat key!</p>\n<p>Similar to git, you do download somebody&#39;s dat by running <code>dat clone &lt;link&gt;</code>. You can also specify the directory:</p>\n<pre><code>❯ dat clone <span class=\"hljs-string\">dat:</span><span class=\"hljs-comment\">//778f8d955175c92e4ced5e4f5563f69bfec0c86cc6f670352c457943666fe639 ~/Downloads/dat-demo</span>\ndat v13<span class=\"hljs-number\">.5</span><span class=\"hljs-number\">.0</span>\nCreated <span class=\"hljs-keyword\">new</span> dat <span class=\"hljs-keyword\">in</span> <span class=\"hljs-regexp\">/Users/</span>joe<span class=\"hljs-regexp\">/Downloads/</span>dat-demo/.dat\n<span class=\"hljs-string\">Cloning:</span> <span class=\"hljs-number\">2</span> files (<span class=\"hljs-number\">1.4</span> MB)\n\n<span class=\"hljs-number\">2</span> connections | Download <span class=\"hljs-number\">614</span> KB<span class=\"hljs-regexp\">/s Upload 0 B/</span>s\n\ndat sync complete.\nVersion <span class=\"hljs-number\">4</span>\n</code></pre><p>This will download our demo files to the <code>~/downloads/dat-demo</code> folder. These files are being shared by a server over Dat (to ensure high availability) but you may connect to any number of users also hosting the content.</p>\n<p>You can also also view the files online: <a href=\"https://datproject.org/778f8d955175c92e4ced5e4f5563f69bfec0c86cc6f670352c457943666fe639/\">datproject.org/778f8d955175c92e4ced5e4f5563f69bfec0c86cc6f670352c457943666fe639</a>. datproject.org can download files over Dat and display them on http as long as someone is hosting it. The website temporarily caches data for any visited links (do not view your dat on datproject.org if you do not want us caching your data).</p>\n<h4 id=\"sharing-demo\"><a href=\"#sharing-demo\" class=\"anchor\"></a>Sharing Demo</h4><p>Dat can share files from your computer to anywhere. If you have a friend going through this demo with you, try sharing to them! If not we&#39;ll see what we can do.</p>\n<p>Find a folder on your computer to share. Inside the folder can be anything, Dat can handle all sorts of files (Dat works with really big folders too!).</p>\n<p>First, you can create a new dat inside that folder. Using the <code>dat create</code> command also walks us through making a <code>dat.json</code> file:</p>\n<pre><code>❯ dat <span class=\"hljs-built_in\">create</span>\nWelcome <span class=\"hljs-built_in\">to</span> dat program!\nYou can turn <span class=\"hljs-keyword\">any</span> <span class=\"hljs-built_in\">folder</span> <span class=\"hljs-keyword\">on</span> <span class=\"hljs-title\">your</span> <span class=\"hljs-title\">computer</span> <span class=\"hljs-title\">into</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-title\">Dat</span>.\nA Dat is <span class=\"hljs-keyword\">a</span> <span class=\"hljs-built_in\">folder</span> <span class=\"hljs-keyword\">with</span> some magic.\n</code></pre><p>This will create a new (empty) dat. Dat will print a link, share this link to give others access to view your files.</p>\n<p>Once we have our dat, run <code>dat share</code> to scan your files and sync them to the network. Share the link with your friend to instantly start downloading files.</p>\n<p>You can also try viewing your files online. Go to <a href=\"https://datproject.org/explore\">datproject.org</a> and enter your link to preview on the top right. <em>(Some users, including me when writing this, may have trouble connecting to datproject.org initially. Don&#39;t be alarmed! It is something we are working on. Thanks.)</em></p>\n<h4 id=\"bonus-http-demo\"><a href=\"#bonus-http-demo\" class=\"anchor\"></a>Bonus HTTP Demo</h4><p>Dat makes it really easy to live files on a http server. This is a cool demo because we can also see how version history works! Serve dat files on http with the <code>--http</code> option. For example, <code>dat sync --http</code>, serves your files to a http website with live reloading and version history! This even works dats your are downloading (add the <code>--sparse</code> option to only download files you select via http). The default http port is 8080.</p>\n<p><em>Hint: Use <code>localhost:8080/?version=10</code> to view a specific version.</em></p>\n<p>Get started using Dat today with the <code>share</code> and <code>clone</code> commands or read below for more details.</p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>The first time you run a command, a <code>.dat</code> folder to store the Dat metadata.\nOnce a Dat is created, you can run all the commands inside that folder, similar to git.</p>\n<p>Dat keep secret keys in the <code>~/.dat/secret_keys</code> folder. These are required to write to any dats you create.</p>\n<h3 id=\"sharing\"><a href=\"#sharing\" class=\"anchor\"></a>Sharing</h3><p>The quickest way to get started sharing files is to <code>share</code>:</p>\n<pre><code>❯ dat share\n<span class=\"hljs-string\">dat:</span><span class=\"hljs-comment\">//3e830227b4b2be197679ff1b573cc85e689f202c0884eb8bdb0e1fcecbd93119</span>\nSharing <span class=\"hljs-string\">dat:</span> <span class=\"hljs-number\">24</span> files (<span class=\"hljs-number\">383</span> MB)\n\n<span class=\"hljs-number\">0</span> connections | Download <span class=\"hljs-number\">0</span> B<span class=\"hljs-regexp\">/s Upload 0 B/</span>s\n\nImporting <span class=\"hljs-number\">528</span> files to Archive (<span class=\"hljs-number\">165</span> MB/s)\n[=-----------------------------------------] <span class=\"hljs-number\">3</span>%\n<span class=\"hljs-string\">ADD:</span> data<span class=\"hljs-regexp\">/expn_cd.csv (403 MB /</span> <span class=\"hljs-number\">920</span> MB)\n</code></pre><h4 id=\"creating-a-dat-and-datjson\"><a href=\"#creating-a-dat-and-datjson\" class=\"anchor\"></a>Creating a dat &amp; dat.json</h4><pre><code>dat create <span class=\"hljs-meta\">[&lt;folder&gt;]</span>\n</code></pre><p>The create command prompts you to make a dat.json file and creates a new dat. Import the files with sync or share.</p>\n<h4 id=\"syncing-to-network\"><a href=\"#syncing-to-network\" class=\"anchor\"></a>Syncing to Network</h4><pre><code>dat sync <span class=\"hljs-meta\">[&lt;folder&gt;]</span> [--no-import] [--no-watch]\n</code></pre><p>Start sharing your Dat Archive over the network.\nSync will import new or updated files since you ran <code>create</code> or <code>sync</code> last.\nSync watched files for changes and imports updated files.</p>\n<ul>\n<li>Use <code>--no-import</code> to not import any new or updated files.</li>\n<li>Use <code>--no-watch</code> to not watch directory for changes. <code>--import</code> must be true for <code>--watch</code> to work.</li>\n</ul>\n<h4 id=\"ignoring-files\"><a href=\"#ignoring-files\" class=\"anchor\"></a>Ignoring Files</h4><p>By default, dat will ignore any files in a <code>.datignore</code> file, similar to git. Each file should separated by a newline. Dat also ignores all hidden folders and files.</p>\n<p>Dat uses <a href=\"https://github.com/joehand/dat-ignore\">dat-ignore</a> to decide if a file should be ignored.</p>\n<h4 id=\"selecting-files\"><a href=\"#selecting-files\" class=\"anchor\"></a>Selecting Files</h4><p>By default, dat will download all files. If you want to only download a subset, you can create a <code>.datdownload</code> file which downloads only the files and folders specified. Each should be separated by a newline.</p>\n<h3 id=\"downloading\"><a href=\"#downloading\" class=\"anchor\"></a>Downloading</h3><p>Start downloading by running the <code>clone</code> command. This creates a folder, download the content and metadata, and a <code>.dat</code> folder inside. Once you started the download, you can resume using <code>clone</code> or the other download commands.</p>\n<pre><code>dat clone &lt;dat-link&gt; <span class=\"hljs-meta\">[&lt;folder&gt;]</span> [--temp]\n</code></pre><p>Clone a remote Dat Archive to a local folder.\nThis will create a folder with the key name is no folder is specified.</p>\n<h4 id=\"updating-downloaded-archives\"><a href=\"#updating-downloaded-archives\" class=\"anchor\"></a>Updating Downloaded Archives</h4><p>Once a Dat is clone, you can run either <code>dat pull</code> or <code>dat sync</code> in the folder to update the archive.</p>\n<pre><code>dat pull <span class=\"hljs-meta\">[&lt;folder&gt;]</span>\n</code></pre><p>Update a cloned Dat Archive to latest files and exit.</p>\n<pre><code>dat sync <span class=\"hljs-meta\">[&lt;folder&gt;]</span>\n</code></pre><p>Download latest files and keep connection open to continue updating as remote source is updated.</p>\n<h3 id=\"shortcut-commands\"><a href=\"#shortcut-commands\" class=\"anchor\"></a>Shortcut commands</h3><ul>\n<li><code>dat &lt;link&gt; {dir}</code> will run <code>dat clone</code> for new dats or resume the exiting dat in <code>dir</code></li>\n<li><code>dat {dir}</code> is the same as running <code>dat sync {dir}</code></li>\n</ul>\n<h3 id=\"dat-registry-and-authentication\"><a href=\"#dat-registry-and-authentication\" class=\"anchor\"></a>Dat Registry and Authentication</h3><p>As part of our <a href=\"https://datproject.org/blog/2016-02-01-announcing-publicbits\">Knight Foundation grant</a>, we are building a registry for Dat archives.\nWe will be running a Dat registry at datproject.org, but anyone will be able to create their own.\nOnce registered, you will be able to publish Dat archives from our registry.\nAnyone can clone archives published to a registry without registration:</p>\n<pre><code>dat <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">datproject</span>.org/jhand/cli-demo\n</code></pre><h4 id=\"auth-experimental\"><a href=\"#auth-experimental\" class=\"anchor\"></a>Auth (experimental)</h4><p>You can also use the <code>dat</code> command line to register and publish to Dat registries. Dat plans to support any registry. Currently, <code>datproject.org</code> is the only available and the default.</p>\n<p>To register and login you can use the following commands:</p>\n<pre><code>dat register <span class=\"hljs-meta\">[&lt;registry&gt;]</span>\ndat login\ndat whoami\n</code></pre><p>Once you are logged in to a registry. You can publish a Dat archive:</p>\n<pre><code><span class=\"hljs-title\">cd</span> my-<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span></span>\n<span class=\"hljs-title\">dat</span> create\n<span class=\"hljs-title\">dat</span> publish <span class=\"hljs-comment\">--name my-dataset</span>\n</code></pre><p>All registry requests take the <code>&lt;registry&gt;</code> option if you&#39;d like to publish to a different registry than datproject.org.\nYou can deploy your own compatible <a href=\"https://github.com/datproject/datproject.org\">registry server</a> if you&#39;d rather use your own service.</p>\n<h3 id=\"key-management-and-moving-dats\"><a href=\"#key-management-and-moving-dats\" class=\"anchor\"></a>Key Management &amp; Moving Dats</h3><p><code>dat keys</code> provides a few commands to help you move or backup your dats.</p>\n<p>Writing to a dat requires the secret key, stored in the <code>~/.dat</code> folder. You can export and import these keys between dats. First, clone your dat to the new location:</p>\n<ul>\n<li>(original) <code>dat share</code></li>\n<li>(duplicate) <code>dat clone &lt;key&gt;</code></li>\n</ul>\n<p>Then transfer the secret key:</p>\n<ul>\n<li>(original) <code>dat keys export</code> - copy the secret key printed out.</li>\n<li>(duplicate) <code>dat keys import</code> - this will prompt you for the secret key, paste it in here.</li>\n</ul>\n<h2 id=\"troubleshooting\"><a href=\"#troubleshooting\" class=\"anchor\"></a>Troubleshooting</h2><p>We&#39;ve provided some troubleshooting tips based on issues users have seen.\nPlease <a href=\"https://github.com/datproject/dat/issues/new\">open an issue</a> or ask us in our <a href=\"https://gitter.im/datproject/discussions\">chat room</a> if you need help troubleshooting and it is not covered here.</p>\n<p>If you have trouble sharing/downloading in a directory with a <code>.dat</code> folder, try deleting it and running the command again.</p>\n<h4 id=\"check-your-dat-version\"><a href=\"#check-your-dat-version\" class=\"anchor\"></a>Check Your Dat Version</h4><p>Knowing the version is really helpful if you run into any bugs, and will help us troubleshoot your issue.</p>\n<p>Check your Dat version:</p>\n<pre><code><span class=\"hljs-attribute\">dat -v</span>\n</code></pre><p>You should see the Dat semantic version printed, e.g. 13.1.2.</p>\n<h3 id=\"installation-issues\"><a href=\"#installation-issues\" class=\"anchor\"></a>Installation Issues</h3><h4 id=\"node-and-npm\"><a href=\"#node-and-npm\" class=\"anchor\"></a>Node &amp; npm</h4><p>To use the Dat command line tool you will need to have <a href=\"https://docs.npmjs.com/getting-started/installing-node\">node and npm installed</a>.\nMake sure those are installed correctly before installing Dat.\nYou can check the version of each:</p>\n<pre><code><span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">-v</span>\nnpm -v\n</code></pre><h4 id=\"global-install\"><a href=\"#global-install\" class=\"anchor\"></a>Global Install</h4><p>The <code>-g</code> option installs Dat globally allowing you to run it as a command.\nMake sure you installed with that option.</p>\n<ul>\n<li>If you receive an <code>EACCES</code> error, read <a href=\"https://docs.npmjs.com/getting-started/fixing-npm-permissions\">this guide</a> on fixing npm permissions.</li>\n<li>If you receive an <code>EACCES</code> error, you may also install dat with sudo: <code>sudo npm install -g dat</code>.</li>\n<li>Have other installation issues? Let us know, you can <a href=\"https://github.com/datproject/dat/issues/new\">open an issue</a> or ask us in our <a href=\"https://gitter.im/datproject/discussions\">chat room</a>.</li>\n</ul>\n<h3 id=\"debugging-output\"><a href=\"#debugging-output\" class=\"anchor\"></a>Debugging Output</h3><p>If you are having trouble with a specific command, run with the debug environment variable set to <code>dat</code> (and optionally also <code>dat-node</code>). =\nThis will help us debug any issues:</p>\n<pre><code><span class=\"hljs-attr\">DEBUG=</span>dat,dat-<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">dat</span> <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">dat</span>://<span class=\"hljs-tag\">&lt;link&gt;</span> dir\n</code></pre><h3 id=\"networking-issues\"><a href=\"#networking-issues\" class=\"anchor\"></a>Networking Issues</h3><p>Networking capabilities vary widely with each computer, network, and configuration.\nWhenever you run a Dat there are several steps to share or download files with peers:</p>\n<ol>\n<li>Discovering Peers</li>\n<li>Connecting to Peers</li>\n<li>Sending &amp; Receiving Data</li>\n</ol>\n<p>With successful use, Dat will show <code>Connected to 1 peer</code> after connection.\nIf you never see a peer connected your network may be restricting discovery or connection.\nPlease try using the <code>dat --doctor</code> command (see below) between the two computers not connecting. This will help troubleshoot the networks.</p>\n<ul>\n<li>Dat may <a href=\"https://github.com/datproject/dat/issues/503\">have issues</a> connecting if you are using iptables.</li>\n</ul>\n<h4 id=\"dat-doctor\"><a href=\"#dat-doctor\" class=\"anchor\"></a>Dat Doctor</h4><p>We&#39;ve included a tool to identify network issues with Dat, the Dat doctor.\nThe Dat doctor will run two tests:</p>\n<ol>\n<li>Attempt to connect to a server running a Dat peer.</li>\n<li>Attempt a direct connection between two peers. You will need to run the command on both the computers you are trying to share data between.</li>\n</ol>\n<p>Start the doctor by running:</p>\n<pre><code><span class=\"hljs-attribute\">dat doctor</span>\n</code></pre><p>For direct connection tests, the doctor will print out a command to run on the other computer, <code>dat doctor &lt;64-character-string&gt;</code>.\nThe doctor will run through the key steps in the process of sharing data between computers to help identify the issue.</p>\n<hr>\n<h2 id=\"js-api\"><a href=\"#js-api\" class=\"anchor\"></a>JS API</h2><p>You can use Dat in your javascript application:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> Dat = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat'</span>)\n\nDat(<span class=\"hljs-string\">'/data'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, dat</span>) </span>{\n  <span class=\"hljs-comment\">// use dat</span>\n})\n</code></pre>\n<p><strong><a href=\"https://github.com/datproject/dat-node\">Read more</a> about the JS usage provided via <code>dat-node</code>.</strong></p>\n<h2 id=\"for-developers\"><a href=\"#for-developers\" class=\"anchor\"></a>For Developers</h2><p>Please see <a href=\"https://github.com/datproject/dat/blob/master/CONTRIBUTING.md\">guidelines on contributing</a> before submitting an issue or PR.</p>\n<p>This command line library uses <a href=\"https://github.com/datproject/dat-node\">dat-node</a> to create and manage the archives and networking.\nIf you&#39;d like to build your own Dat application that is compatible with this command line tool, we suggest using dat-node.</p>\n<h3 id=\"installing-from-source\"><a href=\"#installing-from-source\" class=\"anchor\"></a>Installing from source</h3><p>Clone this repository and in a terminal inside of the folder you cloned run this command:</p>\n<pre><code><span class=\"hljs-built_in\">npm</span> link\n</code></pre><p>This should add a <code>dat</code> command line command to your PATH.\nNow you can run the dat command to try it out.</p>\n<p>The contribution guide also has more tips on our <a href=\"https://github.com/datproject/dat/blob/master/CONTRIBUTING.md#development-workflow\">development workflow</a>.</p>\n<ul>\n<li><code>npm run test</code> to run tests</li>\n<li><code>npm run auth-server</code> to run a local auth server for testing</li>\n</ul>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>BSD-3-Clause</p>\n","dat-desktop":"<h1 align=\"center\">Dat Desktop</h1>\n\n<div align=\"center\">\n  <strong>Peer to peer data sharing app built for humans.</strong>\n</div>\n\n<p><br /></p>\n<div align=\"center\">\n  <!-- Build Status -->\n  <a href=\"https://travis-ci.org/datproject/dat-desktop\">\n    <img src=\"https://img.shields.io/travis/datproject/dat-desktop/master.svg?style=flat-square\"\n      alt=\"Build Status\" />\n  </a>\n  <!-- Standard -->\n  <a href=\"https://codecov.io/github/yoshuawuyts/choo\">\n    <img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\"\n      alt=\"Standard\" />\n  </a>\n</div>\n\n<p><img src=\"assets/screenshot.png\" alt=\"screenshot\"></p>\n<h2 id=\"table-of-content\"><a href=\"#table-of-content\" class=\"anchor\"></a>Table of Content</h2><ul>\n<li><a href=\"#download\">Download</a></li>\n<li><a href=\"#commands\">Commands</a></li>\n<li><a href=\"#directory-structure\">Directory Structure</a></li>\n<li><a href=\"#faq\">FAQ</a></li>\n<li><a href=\"#license\">License</a></li>\n</ul>\n<h2 id=\"download\"><a href=\"#download\" class=\"anchor\"></a>Download</h2><p>To run the app locally check out our <a href=\"https://datproject.org/install\">download\nguide</a> or install directly from the command\nline using <a href=\"https://caskroom.github.io\">Homebrew Cask</a>. Currently only MacOS is\nsupported.</p>\n<pre><code class=\"lang-sh\">$ brew update &amp;&amp; brew cask install dat\n</code></pre>\n<h2 id=\"commands\"><a href=\"#commands\" class=\"anchor\"></a>Commands</h2><pre><code class=\"lang-bash\">$ npm install             <span class=\"hljs-comment\"># install dependencies</span>\n$ npm start               <span class=\"hljs-comment\"># start the application</span>\n$ npm run dist            <span class=\"hljs-comment\"># compile the app into an ASAR file to release</span>\n$ npm start --dat=&lt;dir&gt;   <span class=\"hljs-comment\"># change the path for new dat archives (default ~/Downloads)</span>\n</code></pre>\n<h2 id=\"directory-structure\"><a href=\"#directory-structure\" class=\"anchor\"></a>Directory structure</h2><pre><code class=\"lang-txt\">elements/      Standalone application-specific elements\nlib/           Generalized components, should be moved out of project later\nmodels/        Choo models\npages/         Views that are directly mounted on the router\npublic/        Various assets\nscripts/       Various scripts used to build and manage the repository\napp.js         Client application entry file\nindex.html     Initial HTML served\nindex.js       Electron application entry\n</code></pre>\n<h2 id=\"faq\"><a href=\"#faq\" class=\"anchor\"></a>FAQ</h2><h3 id=\"how-can-i-speed-up-downloading-electron\"><a href=\"#how-can-i-speed-up-downloading-electron\" class=\"anchor\"></a>How can I speed up downloading Electron?</h3><p>If you’re not in Europe or the US, you might want to use a different mirror for <code>electron</code>.\nYou can set the <code>ELECTRON_MIRROR</code> variable to point to a different provider:</p>\n<pre><code class=\"lang-sh\"><span class=\"hljs-comment\"># Europe / US</span>\n$ npm install\n\n<span class=\"hljs-comment\"># Asia / Oceania</span>\n$ ELECTRON_MIRROR=<span class=\"hljs-string\">\"https://npm.taobao.org/mirrors/electron/\"</span> npm install\n</code></pre>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n<h2 id=\"font-attribution-and-license\"><a href=\"#font-attribution-and-license\" class=\"anchor\"></a>Font Attribution &amp; License</h2><p>SourceSansPro-Regular.ttf: Copyright 2010, 2012 Adobe Systems Incorporated (<a href=\"http://www.adobe.com/\">http://www.adobe.com/</a>), with Reserved Font Name &#39;Source&#39;. All Rights Reserved. Source is a trademark of Adobe Systems Incorporated in the United States and/or other countries. <a href=\"http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&amp;id=OFL\">SIL Open Font License, 1.1</a></p>\n<p>SourceCodePro-Regular.ttf: Copyright 2010, 2012 Adobe Systems Incorporated. All Rights Reserved. <a href=\"http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&amp;id=OFL\">SIL Open Font License, 1.1</a></p>\n","sciencefair":"<div align=\"center\"><img src=\"https://raw.githubusercontent.com/codeforscience/sciencefair/master/assets/header_v2.png\" width=\"100%\" /></div>\n\n<p align=\"center\">\n  <strong>The open source p2p desktop science library that puts users in control.</strong>\n</p>\n\n<p align=\"center\">\n  <!-- Stability -->\n  <a href=\"https://nodejs.org/api/documentation.html#documentation_stability_index\">\n    <img src=\"https://img.shields.io/badge/stability-experimental-orange.svg?style=flat-square\"\n      alt=\"API stability\" />\n  </a>\n  <!-- Release -->\n  <a href=\"https://github.com/codeforscience/sciencefair/releases/latest\">\n    <img src=\"https://img.shields.io/github/release/codeforscience/sciencefair.svg?style=flat-square\"\n      alt=\"Latest release\" />\n  </a>\n  <!-- Downloads -->\n  <a href=\"https://github.com/codeforscience/sciencefair/releases/latest\">\n    <img src=\"https://img.shields.io/github/downloads/codeforscience/sciencefair/total.svg?style=flat-square\" />\n  </a>\n  <!-- License -->\n  <a href=\"https://github.com/codeforscience/sciencefair/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/badge/license-MIT-green.svg?style=flat-square\"\n      alt=\"MIT license\" />\n  </a>\n  <!-- Made with <3 -->\n  <a href=\"https://codeforscience.org\" target=\"_blank\">\n    <img src=\"https://img.shields.io/badge/made_with-❤️💛💚💙💜-e6e6e6.svg?style=flat-square\" />\n  </a>\n</p>\n\n<blockquote>\n<p><strong>We&#39;ve released <a href=\"https://github.com/codeforscience/sciencefair/releases/latest\">:balloon: v1.0 :balloon:</a>! But we&#39;re just getting started. Check out the <a href=\"#roadmap\">roadmap</a> to see where we&#39;re headed.</strong></p>\n</blockquote>\n<hr>\n<h2 id=\"why-sciencefair\"><a href=\"#why-sciencefair\" class=\"anchor\"></a>Why ScienceFair?</h2><p>How we access, read and reuse scientific literature is largely controlled\nby a few vast publishing organisations. Many wonderful innovations are being\nexplored outside those organisations, but they are rarely\nintegrated into the platforms where people actually access science.</p>\n<p><strong>We have a vision of a different, better, future for science.</strong> A future that&#39;s more <strong>fair, inclusive and open.</strong>\nA future where <strong>people can explore and innovate</strong> and where <strong>users control and customise their experience</strong>.</p>\n<p><strong>ScienceFair aims to help pave the road to that future.</strong> The main thing that sets it apart? <strong>Freedom from centralised control.</strong></p>\n<hr>\n<p>We&#39;re creating a desktop experience for discovering, tracking, collecting and reading scientific articles that:</p>\n<ul>\n<li>is completely free from external control (e.g. by publishers or platforms)</li>\n<li>helps decentralise the distribution and storage of the scholarly literature</li>\n<li>allows the user to customise their experience</li>\n<li>promotes and integrates open data and metadata</li>\n<li>helps grow an ecosystem of open source tools around scientific literature</li>\n</ul>\n<h2 id=\"contents\"><a href=\"#contents\" class=\"anchor\"></a>contents</h2><ul>\n<li><a href=\"#downloads\">downloads</a></li>\n<li><a href=\"#technical-details\">technical details</a></li>\n<li><a href=\"#screenshots\">screenshots</a><ul>\n<li><a href=\"#home-screen\">home screen</a></li>\n<li><a href=\"#search-results\">search results</a></li>\n<li><a href=\"#selection--stats\">selection &amp; stats</a></li>\n<li><a href=\"#reader\">reader</a></li>\n</ul>\n</li>\n<li><a href=\"#development\">development</a></li>\n<li><a href=\"#roadmap\">roadmap</a></li>\n</ul>\n<h2 id=\"downloads\"><a href=\"#downloads\" class=\"anchor\"></a>downloads</h2><p>You can download installers or bundled apps for Windows, Mac and Linux from the <a href=\"https://github.com/codeforscience/sciencefair/releases\">releases page</a>.</p>\n<p>Please note that ScienceFair is currently pre-release, so there will be bugs - we&#39;re working hard to polish it to v1 release standard. If you&#39;d like to <a href=\"https://github.com/codeforscience/sciencefair/issues\">report bugs in the issue tracker</a>, that would be super helpful.</p>\n<h2 id=\"technical-details\"><a href=\"#technical-details\" class=\"anchor\"></a>technical details</h2><p>Some of the things that ScienceFair does differently:</p>\n<h3 id=\"a-reading-experience-optimised-for-science\"><a href=\"#a-reading-experience-optimised-for-science\" class=\"anchor\"></a>A reading experience optimised for Science</h3><p>We use the beautiful <a href=\"https://github.com/elifesciences/lens\">Lens reader</a> to render JATS XML to a reading experience optimised for scientific papers.</p>\n<p><img src=\"https://github.com/codeforscience/sciencefair/raw/master/assets/screenshots/reader.png\" alt=\"reader\" /></p>\n<h3 id=\"instant-multi-source-search\"><a href=\"#instant-multi-source-search\" class=\"anchor\"></a>Instant multi-source search</h3><p>Instant search of your local collection <strong>and</strong> remote datasources, only downloading the data requested.</p>\n<p><img src=\"https://github.com/codeforscience/sciencefair/raw/master/assets/screenshots/results.png\" alt=\"results\" /></p>\n<h3 id=\"secure-flexible-distributed-datasources\"><a href=\"#secure-flexible-distributed-datasources\" class=\"anchor\"></a>Secure, flexible, distributed datasources</h3><p>A ScienceFair datasource can be a journal, a curated community collection, a personal reading list... anything you like.</p>\n<p>v1.0 comes with the eLife journal by default, and more will follow very soon.</p>\n<p>Datasources are append-only feeds of JATS XML articles, signed with public-key encryption and distributed peer-to-peer (using <a href=\"https://datproject.org/\">dat</a>). This means:</p>\n<ul>\n<li>downloads come from the nearest, fastest sources</li>\n<li>it doesn&#39;t matter if the original source goes offline</li>\n<li>only the original creator can add new content</li>\n<li>anyone can create a datasource (tools to make this easy <a href=\"#roadmap\">coming soon</a>)</li>\n<li>your local collection of articles is ready for data mining</li>\n</ul>\n<p>And importantly, <strong>datasources you create are private</strong> unless you decide to share them, and <strong>nobody can ever take a datasource offline</strong>.</p>\n<h3 id=\"built-in-bibliometrics-and-analytics\"><a href=\"#built-in-bibliometrics-and-analytics\" class=\"anchor\"></a>Built-in bibliometrics and analytics</h3><p>Basic bibliometrics are built-in in <code>v1.0</code>.</p>\n<p>Full analysis and data-mining tools, alt-metrics and enriched annotation will be <a href=\"#roadmap\">coming soon</a>.</p>\n<p><img src=\"https://github.com/codeforscience/sciencefair/raw/master/assets/screenshots/selection.png\" alt=\"selection\" /></p>\n<p>ScienceFair also follows a few simple design principles that we feel are missing from the ecosystem:</p>\n<ul>\n<li>we keep the interface minimal and clear</li>\n<li>incremental discovery is the way</li>\n<li>be beautiful</li>\n</ul>\n<p><img src=\"https://github.com/codeforscience/sciencefair/raw/master/assets/screenshots/home.png\" alt=\"home screen\" /></p>\n<h2 id=\"development\"><a href=\"#development\" class=\"anchor\"></a>development</h2><p>This project uses node <code>v7</code>, ideally the <a href=\"https://nodejs.org/dist/latest-v7.x/\">latest version</a>. It also uses the two-<code>package.json</code> structure (<a href=\"https://github.com/electron-userland/electron-builder/wiki/Two-package.json-Structure\">what??</a>).</p>\n<p>To get a local copy working, clone this repo, then run</p>\n<ul>\n<li><code>npm install</code> to install dev dependencies</li>\n<li><code>cd app &amp;&amp; npm install</code> to install regular dependencies</li>\n<li><code>cd .. &amp;&amp; npm run dev</code> to start in development mode</li>\n</ul>\n<h2 id=\"roadmap\"><a href=\"#roadmap\" class=\"anchor\"></a>roadmap</h2><ul>\n<li>[x] <code>v1.0</code> <strong>proof of concept</strong>:<ul>\n<li>incorporate major new technologies (dat/hyperdrive, lens reader, instant search)</li>\n<li>core user experience and design</li>\n<li>development, packaging and distribution architecture in place</li>\n<li><code>1.0.x</code> releases will be bug fixes and non-breaking improvements</li>\n</ul>\n</li>\n<li>[ ] <code>v1.1</code> <strong>focus on datasources</strong>:<ul>\n<li>more, and bigger, datasources available by default</li>\n<li>tools for creating and managing datasources</li>\n<li>interface for creating and securely sharing p2p collections within the app</li>\n<li>a platform and interface for discovering and managing datasources</li>\n</ul>\n</li>\n<li>[ ] <code>v1.2</code> <strong>focus on enrichment</strong>:<ul>\n<li>altmetrics, updates (e.g. retractions), etc. displayed in context in realtime</li>\n<li>advanced bibliometrics and data-mining tools</li>\n<li>annotation and commenting, within the app and drawn from existing sources</li>\n</ul>\n</li>\n<li>[ ] <code>v2.0</code> <strong>focus on user customisation</strong>:<ul>\n<li>a package system, allowing customising and extending key aspects of the experience</li>\n<li>tools and documentation for making new packages</li>\n<li>a platform and interface for discovering and managing packages</li>\n</ul>\n</li>\n</ul>\n","hyperirc":"<h1 id=\"hyperirc\"><a href=\"#hyperirc\" class=\"anchor\"></a>hyperirc</h1><p>Read IRC through hypercore.</p>\n<h2 id=\"what-is-it\"><a href=\"#what-is-it\" class=\"anchor\"></a>What is it?</h2><p><a href=\"https://github.com/mafintosh/hypercore\">Hypercore</a> is the underlying p2p network that powers <a href=\"https://dat-data.com\">Dat</a></p>\n<p>Hyperirc is a bot that mirrors irc channels to a hypercore append-only log.\nThis allows you to read an IRC channel using the hypercore p2p network. Anyone who is reading the irc logs is also helping hosting them.</p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code>npm <span class=\"hljs-keyword\">install</span> -g hyperirc\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>First, somewhere, start a mirror.</p>\n<pre><code class=\"lang-sh\">hyperirc --mirror=an-irc-channel\n</code></pre>\n<p>This will mirror <code>an-irc-channel</code> on freenode into a hyperdrive feed.\nThe feed key is printed out.</p>\n<p>Then on a couple of other computers run this to tail the channel</p>\n<pre><code class=\"lang-sh\">hyperirc --tail=the-key-printed-out-above\n</code></pre>\n<p>Thats it! Every peer tailing (and the peer mirroring) will join the p2p network and help eachother host the irc logs.</p>\n<p>By default, hyperirc will save its database under <code>~/.hyperirc</code>. You may choose your own location.</p>\n<pre><code class=\"lang-sh\">hyperirc --mirror=an-irc-channel --database=/path/to/db\n</code></pre>\n<p>For more options run <code>hyperirc --help</code>.</p>\n<h2 id=\"browser-support\"><a href=\"#browser-support\" class=\"anchor\"></a>Browser support</h2><p>You can also seed the irc logs to the browser by adding the <code>--webrtc</code> option. This will make hyperirc join a p2p webrtc swarm\nas well.</p>\n<pre><code class=\"lang-sh\">hyperirc --tail=the-key-printed-out-above --webrtc\n</code></pre>\n<p>To view the logs in the browser visit the static website hosted here, <a href=\"https://github.com/mafintosh/hyperirc-www\">https://github.com/mafintosh/hyperirc-www</a></p>\n<h2 id=\"mirrored-irc-channels\"><a href=\"#mirrored-irc-channels\" class=\"anchor\"></a>Mirrored IRC channels</h2><ul>\n<li>#dat on freenode, <code>hyperirc --tail=227d9212ee85c0f14416885c5390f2d270ba372252e781bf45a6b7056bb0a1b5</code></li>\n<li>#sciencefair on freenode, <code>hyperirc --tail=d5ec4f72d2dfde000510b1d84912242a2c10400bbd9721311a548a1e3a7913b5</code></li>\n<li>#beakerbrowser on freenode, <code>hyperirc --tail=18bab41fd4cfd47425226bebf6030ef270091481b39a1959768c2ccc90db02a3</code></li>\n</ul>\n<p>If you mirror a channel open a PR and add your key.</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","soundcloud-archiver":"<h1 id=\"soundcloud-archiver\"><a href=\"#soundcloud-archiver\" class=\"anchor\"></a>soundcloud-archiver</h1><p>it is rumored that soundcloud may be shuttering soon. it is a useful opertunity to tell people about why data ownership is important, and provide a tool for backing up and sharing their tracks.</p>\n<p>this is a super sloppy build b/c it was done in around 10 hours.</p>\n<h2 id=\"todo\"><a href=\"#todo\" class=\"anchor\"></a>todo</h2><ul>\n<li>[ ] validate the url is a souncloud url on submit</li>\n<li>[x] add messaging to interface</li>\n<li>[x] keep db of added dats with timestamps</li>\n<li>[ ] setup a cron job to delete them after 15 minutes reading from db</li>\n<li>[ ] notify completion of the archive</li>\n</ul>\n<h2 id=\"scripts\"><a href=\"#scripts\" class=\"anchor\"></a>scripts</h2><p>make sure you have youtube-dl installed!</p>\n<ul>\n<li><strong>dev</strong>: <code>npm run dev</code> to spin up a local sever and watch for changes</li>\n<li><strong>build</strong>: <code>npm run build</code> to bundle the js and generate an index file</li>\n<li><strong>start</strong>: for production after having built</li>\n</ul>\n<h2 id=\"flow\"><a href=\"#flow\" class=\"anchor\"></a>flow</h2><ul>\n<li>a paragraph about what is happening, and why</li>\n<li>enter a soundcloud url</li>\n<li>download the tracks and metadata into a dat:// archive</li>\n<li>write meta-data json to the archive</li>\n<li>use choo to generate an index.html page with audio plays for the tracks</li>\n<li>show a link to dat project, downloading beaker, how to rehost on hashbase, and a link to the motherboard</li>\n</ul>\n<h2 id=\"internet-archive\"><a href=\"#internet-archive\" class=\"anchor\"></a>internet archive</h2><ul>\n<li><a href=\"https://twitter.com/bcrypt\">https://twitter.com/bcrypt</a></li>\n</ul>\n<h2 id=\"design\"><a href=\"#design\" class=\"anchor\"></a>design</h2><h3 id=\"typography\"><a href=\"#typography\" class=\"anchor\"></a>typography</h3><ul>\n<li><strong>serif</strong>: <a href=\"https://fonts.google.com/specimen/Spectral\">https://fonts.google.com/specimen/Spectral</a></li>\n<li><strong>sans</strong>: <a href=\"https://fonts.google.com/specimen/Rubik\">https://fonts.google.com/specimen/Rubik</a></li>\n</ul>\n","hypervision":"<h1 id=\"hypervision\"><a href=\"#hypervision\" class=\"anchor\"></a>hypervision</h1><p><code>hypervision</code> is a desktop application that lets you both watch and broadcast p2p live streams.</p>\n<p>When users connect to a stream, they distribute the data they receive amongst each other. This bypasses the need for a central server, and the huge amount of bandwidth required to deliver the same data to every user.</p>\n<p><code>hypervision</code> is built on top of <a href=\"https://github.com/mafintosh/hypercore\">hypercore</a> &amp; <a href=\"https://github.com/karissa/hyperdiscovery\">hyperdiscovery</a>, both of which help facilitate the p2p networking which connects broadcasters and viewers together.</p>\n<p><img src=\"screenshot.png\" alt=\"hypervision screenshot\"></p>\n<h2 id=\"installation\"><a href=\"#installation\" class=\"anchor\"></a>Installation</h2><pre><code>git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">git</span>://github.com/mafintosh/hypervision.git\ncd hypervision\n\nnpm install\nnpm run build\nnpm <span class=\"hljs-literal\">start</span>\n</code></pre><h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","hypertweet":"<h1 id=\"hypertweet\"><a href=\"#hypertweet\" class=\"anchor\"></a>hypertweet</h1><p>Proof of concept Twitter + <a href=\"https://datproject.org\">Dat</a> feed stream thingy.</p>\n<p>Streams your twitter feed to a <a href=\"https://github.com/mafintosh/hypercore\">hypercore</a> feed. Pretty print your feed or stream it anywhere with <a href=\"https://github.com/mafintosh/hyperpipe\">hyperpipe</a>.</p>\n<p><img src=\"https://raw.githubusercontent.com/joehand/hypertweet/master/hypertweet.png\" alt=\"hypertweet\"></p>\n<h2 id=\"install\"><a href=\"#install\" class=\"anchor\"></a>Install</h2><pre><code class=\"lang-sh\">npm install -g hypertweet\n\nhypertweet --<span class=\"hljs-built_in\">help</span> <span class=\"hljs-comment\"># see help!</span>\n</code></pre>\n<h3 id=\"set-twitter-tokens\"><a href=\"#set-twitter-tokens\" class=\"anchor\"></a>Set twitter tokens</h3><p><a href=\"https://apps.twitter.com/\">Get Twitter developer key</a> and either set them as environment variables or copy <code>.sample.env</code> to <code>.env</code> file.</p>\n<pre><code>process<span class=\"hljs-selector-class\">.env</span><span class=\"hljs-selector-class\">.TWITTER_CONSUMER_KEY</span>,\nprocess<span class=\"hljs-selector-class\">.env</span><span class=\"hljs-selector-class\">.TWITTER_CONSUMER_SECRET</span>\nprocess<span class=\"hljs-selector-class\">.env</span><span class=\"hljs-selector-class\">.TWITTER_ACCESS_TOKEN_KEY</span>,\nprocess<span class=\"hljs-selector-class\">.env</span><span class=\"hljs-selector-class\">.TWITTER_ACCESS_TOKEN_SECRET</span>\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>Use <code>hypertweet --help</code> to see all the options.</p>\n<h3 id=\"collect-feed-data\"><a href=\"#collect-feed-data\" class=\"anchor\"></a>Collect Feed Data</h3><p>Streams your feed into a hypercore feed:</p>\n<pre><code class=\"lang-sh\">❯ hypertweet --dir=/joe/my-twitter-data/\nsharing 0c3ec59a8111fde379e7ef82e6610ec02daf6bd3b704f41554cd5fe76afd5cc4\n\n2017-04-21T02:20:24.205Z tweet by: <span class=\"hljs-string\">'some twitter user'</span>\n2017-04-21T02:20:25.000Z tweet by: <span class=\"hljs-string\">'more chirps'</span>\n2017-04-21T02:20:30.043Z tweet by: <span class=\"hljs-string\">'asdf'</span>\n</code></pre>\n<h3 id=\"print-anywhere\"><a href=\"#print-anywhere\" class=\"anchor\"></a>Print anywhere</h3><p>Pretty print it in another terminal (or another computer anywhere):</p>\n<pre><code class=\"lang-sh\">❯ hypertweet 0c3ec59a8111fde379e7ef82e6610ec02daf6bd3b704f41554cd5fe76afd5cc4\n\n<span class=\"hljs-comment\"># pretty tweets here</span>\n</code></pre>\n<h3 id=\"or-pipe\"><a href=\"#or-pipe\" class=\"anchor\"></a>Or pipe</h3><p>Pipe anywhere to anything.</p>\n<pre><code class=\"lang-sh\">npm install -g hyperpipe\nhyperpipe /db 0c3ec59a8111fde379e7ef82e6610ec02daf6bd3b704f41554cd5fe76afd5cc4 &gt; data.json\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"hypertweetdirorstorage-opts-callbackerr-feed\"><a href=\"#hypertweetdirorstorage-opts-callbackerr-feed\" class=\"anchor\"></a><code>hypertweet(dir|storage, [opts], callback(err, feed))</code></h3><p>Create a stream from the twitter API and share via hypercore <code>feed</code>. Automatically joins network via <code>discovery-swarm</code>.</p>\n<ul>\n<li><code>dir|storage</code>: directory or random access module, e.g <code>random-access-memory</code>.</li>\n<li><code>opts.streamUrl</code>: the <a href=\"https://dev.twitter.com/streaming/overview\">twitter streaming api</a> endpoint you want. defaults to user.</li>\n<li><code>opts.streamOpts</code>: stream opts</li>\n</ul>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p><a href=\"LICENSE.md\">MIT</a></p>\n","dat-photos-app":"<p>This is a decentralized, peer-to-peer photos applicaton for the <a href=\"https://beakerbrowser.com\">Beaker\nbrowser</a>.</p>\n<p><em>Create and share photo albums completely independently. No third party required.</em></p>\n<h2 id=\"instructions\"><a href=\"#instructions\" class=\"anchor\"></a>Instructions</h2><p>With <a href=\"https://beakerbrowser.com\">Beaker</a>, open the app&#39;s URL:</p>\n<p>On Hashbase: <code>dat://p2p-photos-taravancil.hashbase.io</code></p>\n<p>Raw URL: <code>dat://f0abcd6b1c4fc524e2d48da043b3d8399b96d9374d6606fca51182ee230b6b59/</code></p>\n<p>All photos are stored locally on your device, and are only ever visible to \npeople with whom you share the album&#39;s secret URL.</p>\n","dat-node":"<h1 id=\"dat-node\"><a href=\"#dat-node\" class=\"anchor\"></a>dat-node</h1><blockquote>\n<p><strong>dat-node</strong> is a high-level module for building Dat applications on the file system.</p>\n</blockquote>\n<p><a href=\"https://npmjs.org/package/dat-node\"><img src=\"https://img.shields.io/npm/v/dat-node.svg?style=flat-square\" alt=\"npm\"></a> <a href=\"https://travis-ci.org/datproject/dat-node\"><img src=\"https://img.shields.io/travis/datproject/dat-node/master.svg?style=flat-square\" alt=\"Travis\"></a> <a href=\"https://codecov.io/github/datproject/dat-node\"><img src=\"https://img.shields.io/codecov/c/github/datproject/dat-node/master.svg?style=flat-square\" alt=\"Test coverage\"></a></p>\n<p><a href=\"http://datproject.org\">Dat</a> is a decentralized tool for distributing data and\nfiles, built for scientific and research data.\nYou can start using Dat today in these client applications:</p>\n<ul>\n<li><a href=\"https://github.com/datproject/dat\">Dat Command Line</a>: Use Dat in the command line</li>\n<li><a href=\"https://github.com/datproject/dat-desktop\">Dat Desktop</a>: A desktop application for Dat</li>\n<li><a href=\"https://beakerbrowser.com\">Beaker Browser</a>: An experimental P2P browser with Dat built in</li>\n</ul>\n<h4 id=\"dat-project-documentation-and-resources\"><a href=\"#dat-project-documentation-and-resources\" class=\"anchor\"></a>Dat Project Documentation &amp; Resources</h4><ul>\n<li><a href=\"http://docs.datproject.org/\">Dat Project Docs</a></li>\n<li><a href=\"https://www.datprotocol.com/\">Dat Protocol</a></li>\n<li><a href=\"https://gitter.im/datproject/discussions\">Gitter Chat</a> or <a href=\"http://webchat.freenode.net/?channels=dat\">#dat on IRC</a></li>\n</ul>\n<h3 id=\"features\"><a href=\"#features\" class=\"anchor\"></a>Features</h3><ul>\n<li>High-level glue for common Dat and <a href=\"https://github.com/mafintosh/hyperdrive\">hyperdrive</a> modules.</li>\n<li>Sane defaults and consistent management of storage &amp; secret keys across applications, using <a href=\"https://github.com/datproject/dat-storage\">dat-storage</a>.</li>\n<li>Easily connect to the Dat network, using <a href=\"https://github.com/mafintosh/discovery-swarm\">discovery-swarm</a></li>\n<li>Import files from the file system, using <a href=\"https://github.com/mafintosh/mirror-folder/\">mirror-folder</a></li>\n<li>Serve dats over http with <a href=\"https://github.com/joehand/hyperdrive-http\">hyperdrive-http</a></li>\n<li>Access APIs to lower level modules with a single <code>require</code>!</li>\n</ul>\n<h4 id=\"browser-support\"><a href=\"#browser-support\" class=\"anchor\"></a>Browser Support</h4><p>Many of our dependencies work in the browser, but <code>dat-node</code> is tailored for file system applications. See <a href=\"https://github.com/datproject/dat-js\">dat-js</a> if you want to build browser-friendly Dat applications.</p>\n<h2 id=\"example\"><a href=\"#example\" class=\"anchor\"></a>Example</h2><p>To send files via Dat:</p>\n<ol>\n<li>Tell dat-node where the files are.</li>\n<li>Import the files.</li>\n<li>Share the files on the Dat network! (And share the link)</li>\n</ol>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> Dat = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-node'</span>)\n\n<span class=\"hljs-comment\">// 1. My files are in /joe/cat-pic-analysis</span>\nDat(<span class=\"hljs-string\">'/joe/cat-pic-analysis'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, dat</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n\n  <span class=\"hljs-comment\">// 2. Import the files</span>\n  dat.importFiles()\n\n  <span class=\"hljs-comment\">// 3. Share the files on the network!</span>\n  dat.joinNetwork()\n  <span class=\"hljs-comment\">// (And share the link)</span>\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'My Dat link is: dat://'</span>, dat.key.toString(<span class=\"hljs-string\">'hex'</span>))\n})\n</code></pre>\n<p>These files are now available to share over the dat network via the key printed in the console.</p>\n<p>To download the files, you can make another dat-node instance in a different folder. This time we also have three steps:</p>\n<ol>\n<li>Tell dat where I want to download the files.</li>\n<li>Tell dat what the link is.</li>\n<li>Join the network and download!</li>\n</ol>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> Dat = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-node'</span>)\n\n<span class=\"hljs-comment\">// 1. Tell Dat where to download the files</span>\nDat(<span class=\"hljs-string\">'/download/cat-analysis'</span>, {\n  <span class=\"hljs-comment\">// 2. Tell Dat what link I want</span>\n  key: <span class=\"hljs-string\">'&lt;dat-key&gt;'</span> <span class=\"hljs-comment\">// (a 64 character hash from above)</span>\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, dat</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n\n  <span class=\"hljs-comment\">// 3. Join the network &amp; download (files are automatically downloaded)</span>\n  dat.joinNetwork()\n})\n</code></pre>\n<p>Thats it! By default, all files are automatically downloaded when you connect to the other users.</p>\n<p>Dig into more use cases below and please let us know if you have questions! You can <a href=\"https://github.com/datproject/dat-node/issues\">open a new issue</a> or talk to nice humans in <a href=\"https://gitter.im/datproject/discussions\">our chat room</a>.</p>\n<h3 id=\"example-applications\"><a href=\"#example-applications\" class=\"anchor\"></a>Example Applications</h3><ul>\n<li><a href=\"https://github.com/datproject/dat\">Dat CLI</a>: We use dat-node in the dat CLI.</li>\n<li><a href=\"https://github.com/datproject/dat-desktop\">Dat Desktop</a>: The Dat Desktop application manages multiple dat-node instances via <a href=\"https://github.com/juliangruber/dat-worker\">dat-worker</a>.</li>\n<li>See the <a href=\"examples\">examples folder</a> for a minimal share + download usage.</li>\n<li>And more! Let us know if you have a neat dat-node application to add here.</li>\n</ul>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>All dat-node applications have a similar structure around three main elements:</p>\n<ol>\n<li><strong>Storage</strong> - where the files and metadata are stored.</li>\n<li><strong>Network</strong> - connecting to other users to upload or download data.</li>\n<li><strong>Adding Files</strong> - adding files from the file system to the hyperdrive archive.</li>\n</ol>\n<p>We&#39;ll go through what these are for and a few of the common usages of each element.</p>\n<h3 id=\"storage\"><a href=\"#storage\" class=\"anchor\"></a>Storage</h3><p>Every dat archive has <strong>storage</strong>, this is the required first argument for dat-node. By default, we use <a href=\"http://github.com/datproject/dat-storage\">dat-storage</a> which stores the secret key in <code>~/.dat/</code> and the rest of the ddata in <code>dir/.dat</code>. Other common options are:</p>\n<ul>\n<li><strong>Persistent storage</strong>: Stored files in <code>/my-dir</code> and metadata in <code>my-dir/.dat</code> by passing <code>/my-dir</code> as the first argument.</li>\n<li><strong>Temporary Storage</strong>: Use the <code>temp: true</code> option to keep metadata stored in memory.</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Permanent Storage</span>\nDat(<span class=\"hljs-string\">'/my-dir'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, dat</span>) </span>{\n  <span class=\"hljs-comment\">// Do Dat Stuff</span>\n})\n\n<span class=\"hljs-comment\">// Temporary Storage</span>\nDat(<span class=\"hljs-string\">'/my-dir'</span>, {<span class=\"hljs-attr\">temp</span>: <span class=\"hljs-literal\">true</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, dat</span>) </span>{\n  <span class=\"hljs-comment\">// Do Dat Stuff</span>\n})\n</code></pre>\n<p>Both of these will import files from <code>/my-dir</code> when doing <code>dat.importFiles()</code> but only the first will make a <code>.dat</code> folder and keep the metadata on disk.</p>\n<p>The storage argument can also be passed through to hyperdrive for more advanced storage use cases.</p>\n<h3 id=\"network\"><a href=\"#network\" class=\"anchor\"></a>Network</h3><p>Dat is all about the network! You&#39;ll almost always want to join the network right after you create your Dat:</p>\n<pre><code class=\"lang-js\">Dat(<span class=\"hljs-string\">'/my-dir'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, dat</span>) </span>{\n  dat.joinNetwork()\n  dat.network.on(<span class=\"hljs-string\">'connection'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'I connected to someone!'</span>)\n  })\n})\n</code></pre>\n<h4 id=\"downloading-files\"><a href=\"#downloading-files\" class=\"anchor\"></a>Downloading Files</h4><p>Remember, if you are downloading - metadata and file downloads will happen automatically once you join the network!</p>\n<p>Dat runs on a peer to peer network, sometimes there may not be anyone online for a particular key. You can make your application more user friendly by using the callback in <code>joinNetwork</code>:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Downloading &lt;key&gt; with joinNetwork callback</span>\nDat(<span class=\"hljs-string\">'/my-dir'</span>, {<span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'&lt;key&gt;'</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, dat</span>) </span>{\n  dat.joinNetwork(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n\n    <span class=\"hljs-comment\">// After the first round of network checks, the callback is called</span>\n    <span class=\"hljs-comment\">// If no one is online, you can exit and let the user know.</span>\n    <span class=\"hljs-keyword\">if</span> (!dat.network.connected || !dat.network.connecting) {\n      <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">'No users currently online for that key.'</span>)\n      process.exit(<span class=\"hljs-number\">1</span>)\n    }\n  })\n})\n</code></pre>\n<h5 id=\"download-on-demand\"><a href=\"#download-on-demand\" class=\"anchor\"></a>Download on Demand</h5><p>If you want to control what files and metadata are downloaded, you can use the sparse option:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Downloading &lt;key&gt; with sparse option</span>\nDat(<span class=\"hljs-string\">'/my-dir'</span>, {<span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'&lt;key&gt;'</span>, <span class=\"hljs-attr\">sparse</span>: <span class=\"hljs-literal\">true</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, dat</span>) </span>{\n  dat.joinNetwork()\n\n  <span class=\"hljs-comment\">// Manually download files via the hyperdrive API:</span>\n  dat.archive.readFile(<span class=\"hljs-string\">'/cat-locations.txt'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, content</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(content) <span class=\"hljs-comment\">// prints cat-locations.txt file!</span>\n  })\n})\n</code></pre>\n<p>Dat will only download metadata and content for the parts you request with <code>sparse</code> mode!</p>\n<h3 id=\"importing-files\"><a href=\"#importing-files\" class=\"anchor\"></a>Importing Files</h3><p>There are many ways to get files imported into an archive! Dat node provides a few basic methods. If you need more advanced imports, you can use the <code>archive.createWriteStream()</code> methods directly.</p>\n<p>By default, just call <code>dat.importFiles()</code> to import from the directory you initialized with. You can watch that folder for changes by setting the watch option:</p>\n<pre><code class=\"lang-js\">Dat(<span class=\"hljs-string\">'/my-data'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, dat</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n\n  <span class=\"hljs-keyword\">var</span> progress = dat.importFiles({<span class=\"hljs-attr\">watch</span>: <span class=\"hljs-literal\">true</span>}) <span class=\"hljs-comment\">// with watch: true, there is no callback</span>\n  progress.on(<span class=\"hljs-string\">'put'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">src, dest</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Importing '</span>, src.name, <span class=\"hljs-string\">' into archive'</span>)\n  })\n})\n</code></pre>\n<p>You can also import from another directory:</p>\n<pre><code class=\"lang-js\">Dat(<span class=\"hljs-string\">'/my-data'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, dat</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n\n  dat.importFiles(<span class=\"hljs-string\">'/another-dir'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'done importing another-dir'</span>)\n  })\n})\n</code></pre>\n<p>That covers some of the common use cases, let us know if there are more to add! Keep reading for the full API docs.</p>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><p><strong>Warning:</strong> This is an early <code>2.0</code> release of dat-node. Please let us know if you missing or incorrect API docs here. We still have more to document. PRs more than welcome!</p>\n<h3 id=\"datdirorstorage-opts-callbackerr-dat\"><a href=\"#datdirorstorage-opts-callbackerr-dat\" class=\"anchor\"></a><code>Dat(dir|storage, [opts], callback(err, dat))</code></h3><p>Initialize a Dat Archive in <code>dir</code>. If there is an existing Dat Archive, the archive will be resumed.</p>\n<h4 id=\"storage\"><a href=\"#storage\" class=\"anchor\"></a>Storage</h4><ul>\n<li><code>dir</code> (Default) - Use <a href=\"https://github.com/datproject/dat-storage\">dat-storage</a> inside <code>dir</code>. This stores files as files, sleep files inside <code>.dat</code>, and the secret key in the user&#39;s home directory.</li>\n<li><code>dir</code> with <code>opts.latest: false</code> - Store as SLEEP files, including storing the content as a <code>content.data</code> file. This is useful for storing all history in a single flat file.</li>\n<li><code>dir</code> with <code>opts.temp: true</code> - Store everything in memory (including files).</li>\n<li><code>storage</code> function - pass a custom storage function along to hyperdrive, see dat-storage for an example.</li>\n</ul>\n<p>Most options are passed directly to the module you&#39;re using (e.g. <code>dat.importFiles(opts)</code>. However, there are also some initial <code>opts</code> can include:</p>\n<pre><code class=\"lang-js\">opts = {\n  <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'&lt;dat-key&gt;'</span>, <span class=\"hljs-comment\">// existing key to create archive with or resume</span>\n  temp: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// Use random-access-memory as the storage.</span>\n\n  <span class=\"hljs-comment\">// Hyperdrive options</span>\n  sparse: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// download only files you request</span>\n}\n</code></pre>\n<p>The callback, <code>cb(err, dat)</code>, includes a <code>dat</code> object that has the following properties:</p>\n<ul>\n<li><code>dat.key</code>: key of the dat (this will be set later for non-live archives)</li>\n<li><code>dat.archive</code>: Hyperdrive archive instance.</li>\n<li><code>dat.path</code>: Path of the Dat Archive</li>\n<li><code>dat.live</code>: <code>archive.live</code></li>\n<li><code>dat.writable</code>: Is the <code>archive</code> writable?</li>\n<li><code>dat.resumed</code>: <code>true</code> if the archive was resumed from an existing database</li>\n<li><code>dat.options</code>: All options passed to Dat and the other submodules</li>\n</ul>\n<h3 id=\"module-interfaces\"><a href=\"#module-interfaces\" class=\"anchor\"></a>Module Interfaces</h3><p><strong><code>dat-node</code> provides an easy interface to common Dat modules for the created Dat Archive on the <code>dat</code> object provided in the callback:</strong></p>\n<h4 id=\"var-network-datjoinnetworkopts-cb\"><a href=\"#var-network-datjoinnetworkopts-cb\" class=\"anchor\"></a><code>var network = dat.joinNetwork([opts], [cb])</code></h4><p>Join the network to start transferring data for <code>dat.key</code>, using <a href=\"https://github.com/mafintosh/discovery-swarm\">discovery-swarm</a>. You can also can use <code>dat.join([opts], [cb])</code>.</p>\n<p>If you specify <code>cb</code>, it will be called <em>when the first round</em> of discovery has completed. This is helpful to check immediately if peers are available and if not fail gracefully, more similar to http requests.</p>\n<p>Returns a <code>network</code> object with properties:</p>\n<ul>\n<li><code>network.connected</code> - number of peers connected</li>\n<li><code>network.on(&#39;listening&#39;)</code> - emitted with network is listening</li>\n<li><code>network.on(&#39;connection&#39;, connection, info)</code> - Emitted when you connect to another peer. Info is an object that contains info about the connection</li>\n</ul>\n<h5 id=\"network-options\"><a href=\"#network-options\" class=\"anchor\"></a>Network Options</h5><p><code>opts</code> are passed to discovery-swarm, which can include:</p>\n<pre><code class=\"lang-js\">opts = {\n  <span class=\"hljs-attr\">upload</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// announce and upload data to other peers</span>\n  download: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// download data from other peers</span>\n  port: <span class=\"hljs-number\">3282</span>, <span class=\"hljs-comment\">// port for discovery swarm</span>\n  utp: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// use utp in discovery swarm</span>\n  tcp: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// use tcp in discovery swarm</span>\n}\n\n<span class=\"hljs-comment\">//Defaults from datland-swarm-defaults can also be overwritten:</span>\n\nopts = {\n  <span class=\"hljs-attr\">dns</span>: {\n    <span class=\"hljs-attr\">server</span>: <span class=\"hljs-comment\">// DNS server</span>\n    domain: <span class=\"hljs-comment\">// DNS domain</span>\n  }\n  dht: {\n    <span class=\"hljs-attr\">bootstrap</span>: <span class=\"hljs-comment\">// distributed hash table bootstrapping nodes</span>\n  }\n}\n</code></pre>\n<p>Returns a <a href=\"https://github.com/mafintosh/discovery-swarm\">discovery-swarm</a> instance.</p>\n<h4 id=\"datleavenetwork-or-datleave\"><a href=\"#datleavenetwork-or-datleave\" class=\"anchor\"></a><code>dat.leaveNetwork()</code> or <code>dat.leave()</code></h4><p>Leaves the network for the archive.</p>\n<h4 id=\"var-importer-datimportfilessrc-opts-cb\"><a href=\"#var-importer-datimportfilessrc-opts-cb\" class=\"anchor\"></a><code>var importer = dat.importFiles([src], [opts], [cb])</code></h4><p><strong>Archive must be writable to import.</strong></p>\n<p>Import files to your Dat Archive from the directory using <a href=\"https://github.com/mafintosh/mirror-folder/\">mirror-folder</a>.</p>\n<ul>\n<li><code>src</code> - By default, files will be imported from the folder where the archive was initiated. Import files from another directory by specifying <code>src</code>.</li>\n<li><code>opts</code> - options passed to mirror-folder (see below).</li>\n<li><code>cb</code> - called when import is finished.</li>\n</ul>\n<p>Returns a <code>importer</code> object with properties:</p>\n<ul>\n<li><code>importer.on(&#39;error&#39;, err)</code></li>\n<li><code>importer.on(&#39;put&#39;, src, dest)</code> - file put started. <code>src.live</code> is true is file was added by file watch event.</li>\n<li><code>importer.on(&#39;put-data&#39;, chunk)</code> - chunk of file added</li>\n<li><code>importer.on(&#39;put-end&#39;, src, dest)</code> - end of file write stream</li>\n<li><code>importer.on(&#39;del&#39;, dest)</code> - file deleted from dest</li>\n<li><code>importer.on(&#39;end&#39;)</code> - Emits when mirror is done (not emitted in watch mode)</li>\n<li>If <code>opts.count</code> is true:<ul>\n<li><code>importer.on(&#39;count&#39;, {files, bytes})</code> - Emitted after initial scan of src directory. See import progress section for details.</li>\n<li><code>importer.count</code> will be <code>{files, bytes}</code> to import after initial scan.</li>\n<li><code>importer.putDone</code> will track <code>{files, bytes}</code> for imported files.</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"importer-options\"><a href=\"#importer-options\" class=\"anchor\"></a>Importer Options</h5><p>Options include:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> opts = {\n  <span class=\"hljs-attr\">count</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// do an initial dry run import for rendering progress</span>\n  ignoreHidden: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// ignore hidden files  (if false, .dat will still be ignored)</span>\n  ignoreDirs: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// do not import directories (hyperdrive does not need them and it pollutes metadata)</span>\n  useDatIgnore: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// ignore entries in the `.datignore` file from import dir target.</span>\n  ignore: <span class=\"hljs-comment\">// (see below for default info) anymatch expression to ignore files</span>\n  watch: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// watch files for changes &amp; import on change (archive must be live)</span>\n}\n</code></pre>\n<h5 id=\"ignoring-files\"><a href=\"#ignoring-files\" class=\"anchor\"></a>Ignoring Files</h5><p>You can use a <code>.datignore</code> file in the imported directory, <code>src</code>, to ignore any the user specifies. This is done by default.</p>\n<p><code>dat-node</code> uses <a href=\"https://github.com/joehand/dat-ignore\">dat-ignore</a> to provide a default ignore option, ignoring the <code>.dat</code> folder and all hidden files or directories. Use <code>opts.ignoreHidden = false</code> to import hidden files or folders, except the <code>.dat</code> directory.</p>\n<p><em>It&#39;s important that the <code>.dat</code> folder is not imported because it contains a private key that allows the owner to write to the archive.</em></p>\n<h4 id=\"var-stats-dattrackstats\"><a href=\"#var-stats-dattrackstats\" class=\"anchor\"></a><code>var stats = dat.trackStats()</code></h4><h5 id=\"statsonupdate\"><a href=\"#statsonupdate\" class=\"anchor\"></a><code>stats.on(&#39;update&#39;)</code></h5><p>Emitted when archive stats are updated. Get new stats with <code>stats.get()</code>.</p>\n<h5 id=\"var-st-statsget\"><a href=\"#var-st-statsget\" class=\"anchor\"></a><code>var st = stats.get()</code></h5><p>Get general archive stats for the latest version:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">files</span>: <span class=\"hljs-number\">12</span>,\n  <span class=\"hljs-attr\">byteLength</span>: <span class=\"hljs-number\">1234</span>,\n  <span class=\"hljs-attr\">length</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-comment\">// number of blocks for latest files</span>\n  version: <span class=\"hljs-number\">6</span>, <span class=\"hljs-comment\">// archive.version for these stats</span>\n  downloaded: <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">// number of downloaded blocks for latest</span>\n}\n</code></pre>\n<h5 id=\"statsnetwork\"><a href=\"#statsnetwork\" class=\"anchor\"></a><code>stats.network</code></h5><p>Get upload and download speeds: <code>stats.network.uploadSpeed</code> or <code>stats.network.downloadSpeed</code>. Transfer speeds are tracked using <a href=\"https://github.com/joehand/hyperdrive-network-speed/\">hyperdrive-network-speed</a>.</p>\n<h5 id=\"var-peers-statspeers\"><a href=\"#var-peers-statspeers\" class=\"anchor\"></a><code>var peers = stats.peers</code></h5><ul>\n<li><code>peers.total</code> - total number of connected peers</li>\n<li><code>peers.complete</code> - connected peers with all the content data</li>\n</ul>\n<h4 id=\"var-server-datservehttpopts\"><a href=\"#var-server-datservehttpopts\" class=\"anchor\"></a><code>var server = dat.serveHttp(opts)</code></h4><p>Serve files over http via <a href=\"https://github.com/joehand/hyperdrive-http\">hyperdrive-http</a>. Returns a node http server instance.</p>\n<pre><code class=\"lang-js\">opts = {\n  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">8080</span>, <span class=\"hljs-comment\">// http port</span>\n  live: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// live update directory index listing</span>\n  footer: <span class=\"hljs-string\">'Served via Dat.'</span>, <span class=\"hljs-comment\">// Set a footer for the index listing</span>\n  exposeHeaders: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// expose dat key in headers</span>\n}\n</code></pre>\n<h4 id=\"datpause\"><a href=\"#datpause\" class=\"anchor\"></a><code>dat.pause()</code></h4><p>Pause all upload &amp; downloads. Currently, this is the same as <code>dat.leaveNetwork()</code>, which leaves the network and destroys the swarm. Discovery will happen again on <code>resume()</code>.</p>\n<h4 id=\"datresume\"><a href=\"#datresume\" class=\"anchor\"></a><code>dat.resume()</code></h4><p>Resume network activity. Current, this is the same as <code>dat.joinNetwork()</code>.</p>\n<h4 id=\"datclosecb\"><a href=\"#datclosecb\" class=\"anchor\"></a><code>dat.close(cb)</code></h4><p>Stops replication and closes all the things opened for dat-node, including:</p>\n<ul>\n<li><code>dat.archive.close(cb)</code></li>\n<li><code>dat.network.close(cb)</code></li>\n<li><code>dat.importer.destroy()</code> (file watcher)</li>\n</ul>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","dat-js":"<h1 id=\"dat-js-travishttpsapitravis-ciorgdatprojectdat-jssvghttpstravis-ciorgdatprojectdat-js-npm-versionhttpsimgshieldsionpmvdat-jssvgstyleflat-squarehttpsnpmjsorgpackagedat\"><a href=\"#dat-js-travishttpsapitravis-ciorgdatprojectdat-jssvghttpstravis-ciorgdatprojectdat-js-npm-versionhttpsimgshieldsionpmvdat-jssvgstyleflat-squarehttpsnpmjsorgpackagedat\" class=\"anchor\"></a>dat-js <a href=\"https://travis-ci.org/datproject/dat-js\"><img src=\"https://api.travis-ci.org/datproject/dat-js.svg\" alt=\"Travis\"></a>  <a href=\"https://npmjs.org/package/dat\"><img src=\"https://img.shields.io/npm/v/dat-js.svg?style=flat-square\" alt=\"NPM version\"></a></h1><p>A pure JavaScript browser-friendly api for using dat.</p>\n<p><a href=\"http://datproject.org\">Dat</a> is a powerful decentralized data sharing tool. For a Node.js api for working with dats on the filesystem, see <a href=\"http://github.com/datproject/dat-node\">dat-node</a>.</p>\n<p>Want to use Dat in the command line or an app (not build applications)? Check out:</p>\n<ul>\n<li><a href=\"https://github.com/datproject/dat\">Dat CLI</a>: Use Dat in the command line</li>\n<li><a href=\"https://github.com/datproject/dat-desktop\">Dat-Desktop</a>: A desktop application for Dat</li>\n</ul>\n<h4 id=\"learn-more-docsdatprojectorghttpdocsdatprojectorg-or-chat-with-ushttpsgitterimdatprojectdiscussions-dat-on-irchttpwebchatfreenodenetchannelsdat\"><a href=\"#learn-more-docsdatprojectorghttpdocsdatprojectorg-or-chat-with-ushttpsgitterimdatprojectdiscussions-dat-on-irchttpwebchatfreenodenetchannelsdat\" class=\"anchor\"></a>Learn more! <a href=\"http://docs.datproject.org/\">docs.datproject.org</a> or <a href=\"https://gitter.im/datproject/discussions\">chat with us</a> (<a href=\"http://webchat.freenode.net/?channels=dat\">#dat on IRC</a>)</h4><h2 id=\"example\"><a href=\"#example\" class=\"anchor\"></a>Example</h2><h4 id=\"getting-data-from-a-remote-dat\"><a href=\"#getting-data-from-a-remote-dat\" class=\"anchor\"></a>Getting data from a remote dat</h4><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> Dat = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-js'</span>)\n<span class=\"hljs-keyword\">var</span> concat = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'concat-stream'</span>)\n\n<span class=\"hljs-keyword\">var</span> dat = Dat()\ndat.add(<span class=\"hljs-string\">'ARCHIVE_KEY'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">repo</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> readStream = repo.archive.createFileReadStream(<span class=\"hljs-string\">'hello.txt'</span>)\n  concat(readStream, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(data)\n  })\n})\n</code></pre>\n<h4 id=\"replicating-a-dat-in-memory\"><a href=\"#replicating-a-dat-in-memory\" class=\"anchor\"></a>Replicating a dat in memory</h4><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> Dat = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-js'</span>)\n\n<span class=\"hljs-keyword\">var</span> dat = Dat()\ndat.add(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">repo</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'dat key is:'</span>, repo.key)\n  <span class=\"hljs-keyword\">var</span> writer = repo.archive.createFileWriteStream(<span class=\"hljs-string\">'hello.txt'</span>)\n  writer.write(<span class=\"hljs-string\">'world'</span>)\n  writer.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{ replicate(repo.key) })\n})\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">replicate</span> (<span class=\"hljs-params\">key</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> clone = Dat()\n  clone.add(key, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">repo</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> readStream = repo.archive.createFileReadStream(<span class=\"hljs-string\">'hello.txt'</span>)\n    readStream.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(data.toString()) <span class=\"hljs-comment\">// prints 'world'</span>\n    })\n  })\n}\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h4 id=\"var-dat-new-datoptions\"><a href=\"#var-dat-new-datoptions\" class=\"anchor\"></a><code>var dat = new Dat([options])</code></h4><p>Creates a new dat object. The options passed here will be default for any dats created using the <code>add</code> method.</p>\n<ul>\n<li><code>options</code>: any options you can pass to <a href=\"https://github.com/mafintosh/hyperdrive\">mafintosh/hyperdrive</a>. These options will become default for all dats.</li>\n</ul>\n<h4 id=\"dataddkey-options-onrepo\"><a href=\"#dataddkey-options-onrepo\" class=\"anchor\"></a><code>dat.add(key, [options], [onrepo])</code></h4><p>Adds a new dat with the given key. Joins the appropriate swarm for that key and begins to upload and download data. The <code>onrepo</code> function will be called when the dat is finished being created.</p>\n<ul>\n<li><code>options</code>: These options will override any options given in the Dat constructor.</li>\n</ul>\n<h3 id=\"properties\"><a href=\"#properties\" class=\"anchor\"></a>Properties</h3><h4 id=\"datrepos\"><a href=\"#datrepos\" class=\"anchor\"></a><code>dat.repos</code></h4><p>Array of repo instances</p>\n<h3 id=\"repo\"><a href=\"#repo\" class=\"anchor\"></a>Repo</h3><p>The repo object managed by dat.</p>\n<h4 id=\"repokey\"><a href=\"#repokey\" class=\"anchor\"></a><code>repo.key</code></h4><p>The key of the repo</p>\n<h4 id=\"repodestroy\"><a href=\"#repodestroy\" class=\"anchor\"></a><code>repo.destroy()</code></h4><p>Destroys the swarm and underlying database.</p>\n<h4 id=\"reposwarm\"><a href=\"#reposwarm\" class=\"anchor\"></a><code>repo.swarm</code></h4><p>Get to the original <code>webrtc-swarm</code> instance, where the swarm can be managed.</p>\n<h4 id=\"repoarchive\"><a href=\"#repoarchive\" class=\"anchor\"></a><code>repo.archive</code></h4><p>Get to the original <code>hyperdrive</code> archive instance, where files can be managed using that api.</p>\n<h3 id=\"events\"><a href=\"#events\" class=\"anchor\"></a>Events</h3><h4 id=\"repo\"><a href=\"#repo\" class=\"anchor\"></a><code>repo</code></h4><p>Fired every time a new repo is ready.</p>\n<h4 id=\"close\"><a href=\"#close\" class=\"anchor\"></a><code>close</code></h4><p>Fired when dat is finished closing, including swarm and database.</p>\n","pauls-dat-api":"<h1 id=\"pauls-dat-api\"><a href=\"#pauls-dat-api\" class=\"anchor\"></a>pauls-dat-api</h1><p>A library of functions that make working with <a href=\"https://github.com/datproject/dat-node\">dat</a> / <a href=\"https://github.com/mafintosh/hyperdrive\">hyperdrive</a> easier.\nIncludes common operations, and some sugars.\nThese functions were factored out of <a href=\"https://github.com/beakerbrowser/beaker\">beaker browser</a>&#39;s internal APIs.</p>\n<p>All async methods work with callbacks and promises. If no callback is provided, a promise will be returned.</p>\n<p>Any time a hyperdrive <code>archive</code> is expected, a <a href=\"https://github.com/pfrazee/hyperdrive-staging-area\">hyperdrive-staging-area</a> instance can be provided, unless otherwise stated.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> hyperdrive = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive'</span>)\n<span class=\"hljs-keyword\">var</span> hyperstaging = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive-staging-area'</span>)\n\n<span class=\"hljs-keyword\">var</span> archive = hyperdrive(<span class=\"hljs-string\">'./my-first-hyperdrive-meta'</span>) <span class=\"hljs-comment\">// metadata will be stored in this folder</span>\n<span class=\"hljs-keyword\">var</span> staging = hyperstaging(archive, <span class=\"hljs-string\">'./my-first-hyperdrive'</span>) <span class=\"hljs-comment\">// content will be stored in this folder</span>\n\n<span class=\"hljs-keyword\">await</span> pda.readFile(archive, <span class=\"hljs-string\">'/hello.txt'</span>) <span class=\"hljs-comment\">// read the committed hello.txt</span>\n<span class=\"hljs-keyword\">await</span> pda.readFile(staging, <span class=\"hljs-string\">'/hello.txt'</span>) <span class=\"hljs-comment\">// read the local hello.txt</span>\n</code></pre>\n<p><strong> NOTE: this library is written natively for node 7 and above. </strong></p>\n<p>To use with node versions lesser than 7 use:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> pda = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'pauls-dat-api/es5'</span>);\n</code></pre>\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<ul>\n<li><a href=\"#staging\">Staging</a><ul>\n<li><a href=\"#diffstaging-opts-cb\">diff(staging[, opts, cb])</a></li>\n<li><a href=\"#commitstaging-opts-cb\">commit(staging[, opts, cb])</a></li>\n<li><a href=\"#revertstaging-opts-cb\">revert(staging[, opts, cb])</a></li>\n</ul>\n</li>\n<li><a href=\"#lookup\">Lookup</a><ul>\n<li><a href=\"#statarchive-name-cb\">stat(archive, name[, cb])</a></li>\n</ul>\n</li>\n<li><a href=\"#read\">Read</a><ul>\n<li><a href=\"#readfilearchive-name-opts-cb\">readFile(archive, name[, opts, cb])</a></li>\n<li><a href=\"#readdirarchive-path-opts-cb\">readdir(archive, path[, opts, cb])</a></li>\n</ul>\n</li>\n<li><a href=\"#write\">Write</a><ul>\n<li><a href=\"#writefilearchive-name-data-opts-cb\">writeFile(archive, name, data[, opts, cb])</a></li>\n<li><a href=\"#mkdirarchive-name-cb\">mkdir(archive, name[, cb])</a></li>\n<li><a href=\"#copyarchive-sourcename-targetname-cb\">copy(archive, sourceName, targetName[, cb])</a></li>\n<li><a href=\"#renamearchive-sourcename-targetname-cb\">rename(archive, sourceName, targetName[, cb])</a></li>\n</ul>\n</li>\n<li><a href=\"#delete\">Delete</a><ul>\n<li><a href=\"#unlinkarchive-name-cb\">unlink(archive, name[, cb])</a></li>\n<li><a href=\"#rmdirarchive-name-opts-cb\">rmdir(archive, name[, opts, cb])</a></li>\n</ul>\n</li>\n<li><a href=\"#network\">Network</a><ul>\n<li><a href=\"#downloadarchive-name-cb\">download(archive, name[, cb])</a></li>\n</ul>\n</li>\n<li><a href=\"#activity-streams\">Activity Streams</a><ul>\n<li><a href=\"#createfileactivitystreamarchive-staging-path\">createFileActivityStream(archive[, staging, path])</a></li>\n<li><a href=\"#createnetworkactivitystreamarchive\">createNetworkActivityStream(archive)</a></li>\n</ul>\n</li>\n<li><a href=\"#exporters\">Exporters</a><ul>\n<li><a href=\"#exportfilesystemtoarchiveopts-cb\">exportFilesystemToArchive(opts[, cb])</a></li>\n<li><a href=\"#exportarchivetofilesystemopts-cb\">exportArchiveToFilesystem(opts[, cb])</a></li>\n<li><a href=\"#exportarchivetoarchiveopts-cb\">exportArchiveToArchive(opts[, cb])</a></li>\n</ul>\n</li>\n<li><a href=\"#manifest\">Manifest</a><ul>\n<li><a href=\"#readmanifestarchive-cb\">readManifest(archive[, cb])</a></li>\n<li><a href=\"#writemanifestarchive-manifest-cb\">writeManifest(archive, manifest[, cb])</a></li>\n<li><a href=\"#updatemanifestarchive-manifest-cb\">updateManifest(archive, manifest[, cb])</a></li>\n<li><a href=\"#generatemanifestopts\">generateManifest(opts)</a></li>\n</ul>\n</li>\n<li><a href=\"#helpers\">Helpers</a><ul>\n<li><a href=\"#findentrybycontentblockarchive-block\">findEntryByContentBlock(archive, block)</a></li>\n</ul>\n</li>\n</ul>\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> pda = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'pauls-dat-api'</span>)\n</code></pre>\n<h2 id=\"staging\"><a href=\"#staging\" class=\"anchor\"></a>Staging</h2><h3 id=\"diffstaging-opts-cb\"><a href=\"#diffstaging-opts-cb\" class=\"anchor\"></a>diff(staging[, opts, cb])</h3><p>List the differences between <code>staging</code> and its <code>archive</code>.</p>\n<ul>\n<li><code>archive</code> Hyperdrive archive (object).</li>\n<li><code>staging</code> HyperdriveStagingArea instance (object).</li>\n<li><code>opts.skipIgnore</code> Don&#39;t use staging&#39;s .datignore (bool).</li>\n<li>Returns an array of changes.</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">await</span> pda.diff(staging)\n</code></pre>\n<p>Output looks like:</p>\n<pre><code class=\"lang-js\">[\n  {\n    <span class=\"hljs-attr\">change</span>: <span class=\"hljs-string\">'add'</span> | <span class=\"hljs-string\">'mod'</span> | <span class=\"hljs-string\">'del'</span>\n    type: <span class=\"hljs-string\">'dir'</span> | <span class=\"hljs-string\">'file'</span>\n    path: <span class=\"hljs-built_in\">String</span> (path <span class=\"hljs-keyword\">of</span> the file)\n  },\n  ...\n]\n</code></pre>\n<h3 id=\"commitstaging-opts-cb\"><a href=\"#commitstaging-opts-cb\" class=\"anchor\"></a>commit(staging[, opts, cb])</h3><p>Apply the changes in <code>staging</code> to its <code>archive</code>.</p>\n<ul>\n<li><code>staging</code> HyperdriveStagingArea instance (object).</li>\n<li><code>opts.skipIgnore</code> Don&#39;t use staging&#39;s .datignore (bool).</li>\n<li>Returns an array of the changes applied.</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">await</span> pda.commit(staging)\n</code></pre>\n<p>Output looks like:</p>\n<pre><code class=\"lang-js\">[\n  {\n    <span class=\"hljs-attr\">change</span>: <span class=\"hljs-string\">'add'</span> | <span class=\"hljs-string\">'mod'</span> | <span class=\"hljs-string\">'del'</span>\n    type: <span class=\"hljs-string\">'dir'</span> | <span class=\"hljs-string\">'file'</span>\n    path: <span class=\"hljs-built_in\">String</span> (path <span class=\"hljs-keyword\">of</span> the file)\n  },\n  ...\n]\n</code></pre>\n<h3 id=\"revertstaging-opts-cb\"><a href=\"#revertstaging-opts-cb\" class=\"anchor\"></a>revert(staging[, opts, cb])</h3><p>Revert the changes in <code>staging</code> to reflect the state of its <code>archive</code>.</p>\n<ul>\n<li><code>staging</code> HyperdriveStagingArea instance (object).</li>\n<li><code>opts.skipIgnore</code> Don&#39;t use staging&#39;s .datignore (bool).</li>\n<li>Returns an array of the changes that were reverted.</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">await</span> pda.revert(staging)\n</code></pre>\n<p>Output looks like:</p>\n<pre><code class=\"lang-js\">[\n  {\n    <span class=\"hljs-attr\">change</span>: <span class=\"hljs-string\">'add'</span> | <span class=\"hljs-string\">'mod'</span> | <span class=\"hljs-string\">'del'</span>\n    type: <span class=\"hljs-string\">'dir'</span> | <span class=\"hljs-string\">'file'</span>\n    path: <span class=\"hljs-built_in\">String</span> (path <span class=\"hljs-keyword\">of</span> the file)\n  },\n  ...\n]\n</code></pre>\n<h2 id=\"lookup\"><a href=\"#lookup\" class=\"anchor\"></a>Lookup</h2><h3 id=\"statarchive-name-cb\"><a href=\"#statarchive-name-cb\" class=\"anchor\"></a>stat(archive, name[, cb])</h3><ul>\n<li><code>archive</code> Hyperdrive archive (object).</li>\n<li><code>name</code> Entry name (string).</li>\n<li>Returns a Hyperdrive Stat entry (object).</li>\n<li>Throws NotFoundError</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// by name:</span>\n<span class=\"hljs-keyword\">var</span> st = <span class=\"hljs-keyword\">await</span> pda.stat(archive, <span class=\"hljs-string\">'/dat.json'</span>)\nst.isDirectory()\nst.isFile()\n<span class=\"hljs-built_in\">console</span>.log(st) <span class=\"hljs-comment\">/* =&gt;\nStat {\n  dev: 0,\n  nlink: 1,\n  rdev: 0,\n  blksize: 0,\n  ino: 0,\n  mode: 16877,\n  uid: 0,\n  gid: 0,\n  size: 0,\n  offset: 0,\n  blocks: 0,\n  atime: 2017-04-10T18:59:00.147Z,\n  mtime: 2017-04-10T18:59:00.147Z,\n  ctime: 2017-04-10T18:59:00.147Z,\n  linkname: undefined } */</span>\n</code></pre>\n<h2 id=\"read\"><a href=\"#read\" class=\"anchor\"></a>Read</h2><h3 id=\"readfilearchive-name-opts-cb\"><a href=\"#readfilearchive-name-opts-cb\" class=\"anchor\"></a>readFile(archive, name[, opts, cb])</h3><ul>\n<li><code>archive</code> Hyperdrive archive (object).</li>\n<li><code>name</code> Entry path (string).</li>\n<li><code>opts</code>. Options (object|string). If a string, will act as <code>opts.encoding</code>.</li>\n<li><code>opts.encoding</code> Desired output encoding (string). May be &#39;binary&#39;, &#39;utf8&#39;, &#39;hex&#39;, or &#39;base64&#39;. Default &#39;utf8&#39;.</li>\n<li>Returns the content of the file in the requested encoding.</li>\n<li>Throws NotFoundError, NotAFileError.</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> manifestStr = <span class=\"hljs-keyword\">await</span> pda.readFile(archive, <span class=\"hljs-string\">'/dat.json'</span>)\n<span class=\"hljs-keyword\">var</span> imageBase64 = <span class=\"hljs-keyword\">await</span> pda.readFile(archive, <span class=\"hljs-string\">'/favicon.png'</span>, <span class=\"hljs-string\">'base64'</span>)\n</code></pre>\n<h3 id=\"readdirarchive-path-opts-cb\"><a href=\"#readdirarchive-path-opts-cb\" class=\"anchor\"></a>readdir(archive, path[, opts, cb])</h3><ul>\n<li><code>archive</code> Hyperdrive archive (object).</li>\n<li><code>path</code> Target directory path (string).</li>\n<li><code>opts.recursive</code> Read all subfolders and their files as well?</li>\n<li>Returns an array of file and folder names.</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> listing = <span class=\"hljs-keyword\">await</span> pda.readdir(archive, <span class=\"hljs-string\">'/assets'</span>)\n<span class=\"hljs-built_in\">console</span>.log(listing) <span class=\"hljs-comment\">// =&gt; ['profile.png', 'styles.css']</span>\n\n<span class=\"hljs-keyword\">var</span> listing = <span class=\"hljs-keyword\">await</span> pda.readdir(archive, <span class=\"hljs-string\">'/'</span>, { <span class=\"hljs-attr\">recursive</span>: <span class=\"hljs-literal\">true</span> })\n<span class=\"hljs-built_in\">console</span>.log(listing) <span class=\"hljs-comment\">/* =&gt; [\n  'index.html',\n  'assets',\n  'assets/profile.png',\n  'assets/styles.css'\n]*/</span>\n</code></pre>\n<h2 id=\"write\"><a href=\"#write\" class=\"anchor\"></a>Write</h2><h3 id=\"writefilearchive-name-data-opts-cb\"><a href=\"#writefilearchive-name-data-opts-cb\" class=\"anchor\"></a>writeFile(archive, name, data[, opts, cb])</h3><ul>\n<li><code>archive</code> Hyperdrive archive (object).</li>\n<li><code>name</code> Entry path (string).</li>\n<li><code>data</code> Data to write (string|Buffer).</li>\n<li><code>opts</code>. Options (object|string). If a string, will act as <code>opts.encoding</code>.</li>\n<li><code>opts.encoding</code> Desired file encoding (string). May be &#39;binary&#39;, &#39;utf8&#39;, &#39;hex&#39;, or &#39;base64&#39;. Default &#39;utf8&#39; if <code>data</code> is a string, &#39;binary&#39; if <code>data</code> is a Buffer.</li>\n<li>Throws ArchiveNotWritableError, InvalidPathError, EntryAlreadyExistsError, ParentFolderDoesntExistError, InvalidEncodingError.</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">await</span> pda.writeFile(archive, <span class=\"hljs-string\">'/hello.txt'</span>, <span class=\"hljs-string\">'world'</span>, <span class=\"hljs-string\">'utf8'</span>)\n<span class=\"hljs-keyword\">await</span> pda.writeFile(archive, <span class=\"hljs-string\">'/profile.png'</span>, fs.readFileSync(<span class=\"hljs-string\">'/tmp/dog.png'</span>))\n</code></pre>\n<h3 id=\"mkdirarchive-name-cb\"><a href=\"#mkdirarchive-name-cb\" class=\"anchor\"></a>mkdir(archive, name[, cb])</h3><ul>\n<li><code>archive</code> Hyperdrive archive (object).</li>\n<li><code>name</code> Directory path (string).</li>\n<li>Throws ArchiveNotWritableError, InvalidPathError, EntryAlreadyExistsError, ParentFolderDoesntExistError, InvalidEncodingError.</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">await</span> pda.mkdir(archive, <span class=\"hljs-string\">'/stuff'</span>)\n</code></pre>\n<h3 id=\"copyarchive-sourcename-targetname-cb\"><a href=\"#copyarchive-sourcename-targetname-cb\" class=\"anchor\"></a>copy(archive, sourceName, targetName[, cb])</h3><ul>\n<li><code>archive</code> Hyperdrive archive (object).</li>\n<li><code>sourceName</code> Path to file or directory to copy (string).</li>\n<li><code>targetName</code> Where to copy the file or folder to (string).</li>\n<li>Throws ArchiveNotWritableError, InvalidPathError, EntryAlreadyExistsError, ParentFolderDoesntExistError, InvalidEncodingError.</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// copy file:</span>\n<span class=\"hljs-keyword\">await</span> pda.copy(archive, <span class=\"hljs-string\">'/foo.txt'</span>, <span class=\"hljs-string\">'/foo.txt.back'</span>)\n<span class=\"hljs-comment\">// copy folder:</span>\n<span class=\"hljs-keyword\">await</span> pda.copy(archive, <span class=\"hljs-string\">'/stuff'</span>, <span class=\"hljs-string\">'/stuff-copy'</span>)\n</code></pre>\n<h3 id=\"renamearchive-sourcename-targetname-cb\"><a href=\"#renamearchive-sourcename-targetname-cb\" class=\"anchor\"></a>rename(archive, sourceName, targetName[, cb])</h3><ul>\n<li><code>archive</code> Hyperdrive archive (object).</li>\n<li><code>sourceName</code> Path to file or directory to rename (string).</li>\n<li><code>targetName</code> What the file or folder should be named (string).</li>\n<li>Throws ArchiveNotWritableError, InvalidPathError, EntryAlreadyExistsError, ParentFolderDoesntExistError, InvalidEncodingError.</li>\n</ul>\n<p>This is equivalent to moving a file/folder.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// move file:</span>\n<span class=\"hljs-keyword\">await</span> pda.copy(archive, <span class=\"hljs-string\">'/foo.txt'</span>, <span class=\"hljs-string\">'/foo.md'</span>)\n<span class=\"hljs-comment\">// move folder:</span>\n<span class=\"hljs-keyword\">await</span> pda.rename(archive, <span class=\"hljs-string\">'/stuff'</span>, <span class=\"hljs-string\">'/things'</span>)\n</code></pre>\n<h2 id=\"delete\"><a href=\"#delete\" class=\"anchor\"></a>Delete</h2><h3 id=\"unlinkarchive-name-cb\"><a href=\"#unlinkarchive-name-cb\" class=\"anchor\"></a>unlink(archive, name[, cb])</h3><ul>\n<li><code>archive</code> Hyperdrive archive (object).</li>\n<li><code>name</code> Entry path (string).</li>\n<li>Throws ArchiveNotWritableError, NotFoundError, NotAFileError</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">await</span> pda.unlink(archive, <span class=\"hljs-string\">'/hello.txt'</span>)\n</code></pre>\n<h3 id=\"rmdirarchive-name-opts-cb\"><a href=\"#rmdirarchive-name-opts-cb\" class=\"anchor\"></a>rmdir(archive, name[, opts, cb])</h3><ul>\n<li><code>archive</code> Hyperdrive archive (object).</li>\n<li><code>name</code> Entry path (string).</li>\n<li><code>opts.recursive</code> Delete all subfolders and files if the directory is not empty.</li>\n<li>Throws ArchiveNotWritableError, NotFoundError, NotAFolderError, DestDirectoryNotEmpty</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">await</span> pda.rmdir(archive, <span class=\"hljs-string\">'/stuff'</span>, {<span class=\"hljs-attr\">recursive</span>: <span class=\"hljs-literal\">true</span>})\n</code></pre>\n<h2 id=\"network\"><a href=\"#network\" class=\"anchor\"></a>Network</h2><h3 id=\"downloadarchive-name-cb\"><a href=\"#downloadarchive-name-cb\" class=\"anchor\"></a>download(archive, name[, cb])</h3><ul>\n<li><code>archive</code> Hyperdrive archive (object). Can not be a staging object.</li>\n<li><code>name</code> Entry path (string). Can point to a file or folder.</li>\n</ul>\n<p>Download an archive file or folder-tree.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// download a specific file:</span>\n<span class=\"hljs-keyword\">await</span> pda.download(archive, <span class=\"hljs-string\">'/foo.txt'</span>)\n<span class=\"hljs-comment\">// download a specific folder and all children:</span>\n<span class=\"hljs-keyword\">await</span> pda.download(archive, <span class=\"hljs-string\">'/bar/'</span>)\n<span class=\"hljs-comment\">// download the entire archive:</span>\n<span class=\"hljs-keyword\">await</span> pda.download(archive, <span class=\"hljs-string\">'/'</span>)\n</code></pre>\n<h2 id=\"activity-streams\"><a href=\"#activity-streams\" class=\"anchor\"></a>Activity Streams</h2><h3 id=\"createfileactivitystreamarchive-staging-path\"><a href=\"#createfileactivitystreamarchive-staging-path\" class=\"anchor\"></a>createFileActivityStream(archive[, staging, path])</h3><ul>\n<li><code>archive</code> Hyperdrive archive (object).</li>\n<li><code>staging</code> HyperdriveStagingArea instance (object).</li>\n<li><code>path</code> Entry path (string) or <a href=\"npm.im/anymatch\">anymatch</a> pattern (array of strings). If falsy, will watch all files.</li>\n<li>Returns a Readable stream.</li>\n</ul>\n<p>Watches the given path or path-pattern for file events, which it emits as an <a href=\"https://github.com/substack/emit-stream\">emit-stream</a>. Supported events:</p>\n<ul>\n<li><code>[&#39;changed&#39;,{path}]</code> - The contents of the file has changed, either by a local write or a remote write. The new content will be ready when this event is emitted. <code>path</code> is the path-string of the file.</li>\n<li><code>[&#39;invalidated&#39;,{path}]</code> - The contents of the file has changed remotely, but hasn&#39;t been downloaded yet. <code>path</code> is the path-string of the file.</li>\n</ul>\n<p>An archive will emit &quot;invalidated&quot; first, when it receives the new metadata for the file. It will then emit &quot;changed&quot; when the content arrives. (A local archive will not emit &quot;invalidated.&quot;)</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> es = pda.createFileActivityStream(archive)\n<span class=\"hljs-keyword\">var</span> es = pda.createFileActivityStream(archive, <span class=\"hljs-string\">'foo.txt'</span>)\n<span class=\"hljs-keyword\">var</span> es = pda.createFileActivityStream(archive, [<span class=\"hljs-string\">'**/*.txt'</span>, <span class=\"hljs-string\">'**/*.md'</span>])\n\nes.on(<span class=\"hljs-string\">'data'</span>, ([event, args]) =&gt; {\n  <span class=\"hljs-keyword\">if</span> (event === <span class=\"hljs-string\">'invalidated'</span>) {\n    <span class=\"hljs-built_in\">console</span>.log(args.path, <span class=\"hljs-string\">'has been invalidated'</span>)\n    pda.download(archive, args.path)\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (event === <span class=\"hljs-string\">'changed'</span>) {\n    <span class=\"hljs-built_in\">console</span>.log(args.path, <span class=\"hljs-string\">'has changed'</span>)\n  }\n})\n\n<span class=\"hljs-comment\">// alternatively, via emit-stream:</span>\n\n<span class=\"hljs-keyword\">var</span> emitStream = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'emit-stream'</span>)\n<span class=\"hljs-keyword\">var</span> events = emitStream(es)\nevents.on(<span class=\"hljs-string\">'invalidated'</span>, args =&gt; {\n  <span class=\"hljs-built_in\">console</span>.log(args.path, <span class=\"hljs-string\">'has been invalidated'</span>)\n  pda.download(archive, args.path)\n})\nevents.on(<span class=\"hljs-string\">'changed'</span>, args =&gt; {\n  <span class=\"hljs-built_in\">console</span>.log(args.path, <span class=\"hljs-string\">'has changed'</span>)\n})\n</code></pre>\n<h3 id=\"createnetworkactivitystreamarchive\"><a href=\"#createnetworkactivitystreamarchive\" class=\"anchor\"></a>createNetworkActivityStream(archive)</h3><ul>\n<li><code>archive</code> Hyperdrive archive (object). Can not be a staging object.</li>\n<li>Returns a Readable stream.</li>\n</ul>\n<p>Watches the archive for network events, which it emits as an <a href=\"https://github.com/substack/emit-stream\">emit-stream</a>. Supported events:</p>\n<ul>\n<li><code>[&#39;network-changed&#39;,{connections}]</code> - The number of connections has changed. <code>connections</code> is a number.</li>\n<li><code>[&#39;download&#39;,{feed,block,bytes}]</code> - A block has been downloaded. <code>feed</code> will either be &quot;metadata&quot; or &quot;content&quot;. <code>block</code> is the index of data downloaded. <code>bytes</code> is the number of bytes in the block.</li>\n<li><code>[&#39;upload&#39;,{feed,block,bytes}]</code> - A block has been uploaded. <code>feed</code> will either be &quot;metadata&quot; or &quot;content&quot;. <code>block</code> is the index of data downloaded. <code>bytes</code> is the number of bytes in the block.</li>\n<li><code>[&#39;sync&#39;,{feed}]</code> - All known blocks have been downloaded. <code>feed</code> will either be &quot;metadata&quot; or &quot;content&quot;.</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> es = pda.createNetworkActivityStream(archive)\n\nes.on(<span class=\"hljs-string\">'data'</span>, ([event, args]) =&gt; {\n  <span class=\"hljs-keyword\">if</span> (event === <span class=\"hljs-string\">'network-changed'</span>) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Connected to %d peers'</span>, args.connections)\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (event === <span class=\"hljs-string\">'download'</span>) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Just downloaded %d bytes (block %d) of the %s feed'</span>, args.bytes, args.block, args.feed)\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (event === <span class=\"hljs-string\">'upload'</span>) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Just uploaded %d bytes (block %d) of the %s feed'</span>, args.bytes, args.block, args.feed)\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (event === <span class=\"hljs-string\">'sync'</span>) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Finished downloading'</span>, args.feed)\n  }\n})\n\n<span class=\"hljs-comment\">// alternatively, via emit-stream:</span>\n\n<span class=\"hljs-keyword\">var</span> emitStream = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'emit-stream'</span>)\n<span class=\"hljs-keyword\">var</span> events = emitStream(es)\nevents.on(<span class=\"hljs-string\">'network-changed'</span>, args =&gt; {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Connected to %d peers'</span>, args.connections)\n})\nevents.on(<span class=\"hljs-string\">'download'</span>, args =&gt; {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Just downloaded %d bytes (block %d) of the %s feed'</span>, args.bytes, args.block, args.feed)\n})\nevents.on(<span class=\"hljs-string\">'upload'</span>, args =&gt; {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Just uploaded %d bytes (block %d) of the %s feed'</span>, args.bytes, args.block, args.feed)\n})\nevents.on(<span class=\"hljs-string\">'sync'</span>, args =&gt; {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Finished downloading'</span>, args.feed)\n})\n</code></pre>\n<h2 id=\"exporters\"><a href=\"#exporters\" class=\"anchor\"></a>Exporters</h2><h3 id=\"exportfilesystemtoarchiveopts-cb\"><a href=\"#exportfilesystemtoarchiveopts-cb\" class=\"anchor\"></a>exportFilesystemToArchive(opts[, cb])</h3><ul>\n<li><code>opts.srcPath</code> Source path in the filesystem (string). Required.</li>\n<li><code>opts.dstArchive</code> Destination archive (object). Required.</li>\n<li><code>opts.dstPath</code> Destination path within the archive. Optional, defaults to &#39;/&#39;.</li>\n<li><code>opts.ignore</code> Files not to copy (array of strings). Optional. Uses <a href=\"npm.im/anymatch\">anymatch</a>.</li>\n<li><code>opts.inplaceImport</code> Should import source directory in-place? (boolean). If true and importing a directory, this will cause the directory&#39;s content to be copied directy into the <code>dstPath</code>. If false, will cause the source-directory to become a child of the <code>dstPath</code>.</li>\n<li><code>opts.dryRun</code> Don&#39;t actually copy (boolean). If true, will run all export logic without actually modifying the target archive.</li>\n<li>Returns stats on the export.</li>\n</ul>\n<p>Copies a file-tree into an archive.</p>\n<p>The <code>dryRun</code> opt is useful because this method compares the source files to the destination before copying. Therefore the stats returned by a dry run gives you a file-level diff.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> stats = <span class=\"hljs-keyword\">await</span> pda.exportFilesystemToArchive({\n  <span class=\"hljs-attr\">srcPath</span>: <span class=\"hljs-string\">'/tmp/mystuff'</span>,\n  <span class=\"hljs-attr\">dstArchive</span>: archive,\n  <span class=\"hljs-attr\">inplaceImport</span>: <span class=\"hljs-literal\">true</span>\n})\n<span class=\"hljs-built_in\">console</span>.log(stats) <span class=\"hljs-comment\">/* =&gt; {\n  addedFiles: ['fuzz.txt', 'foo/bar.txt'],\n  updatedFiles: ['something.txt'],\n  skipCount: 3, // files skipped due to the target already existing\n  fileCount: 3,\n  totalSize: 400 // bytes\n}*/</span>\n</code></pre>\n<h3 id=\"exportarchivetofilesystemopts-cb\"><a href=\"#exportarchivetofilesystemopts-cb\" class=\"anchor\"></a>exportArchiveToFilesystem(opts[, cb])</h3><ul>\n<li><code>opts.srcArchive</code> Source archive (object). Required.</li>\n<li><code>opts.dstPath</code> Destination path in the filesystem (string). Required.</li>\n<li><code>opts.srcPath</code> Source path within the archive. Optional, defaults to &#39;/&#39;.</li>\n<li><code>opts.ignore</code> Files not to copy (array of strings). Optional. Uses <a href=\"npm.im/anymatch\">anymatch</a>.</li>\n<li><code>opts.overwriteExisting</code> Proceed if the destination isn&#39;t empty (boolean). Default false.</li>\n<li><code>opts.skipUndownloadedFiles</code> Ignore files that haven&#39;t been downloaded yet (boolean). Default false. If false, will wait for source files to download.</li>\n<li>Returns stats on the export.</li>\n</ul>\n<p>Copies an archive into the filesystem.</p>\n<p>NOTE</p>\n<ul>\n<li>Unlike exportFilesystemToArchive, this will not compare the target for equality before copying. If <code>overwriteExisting</code> is true, it will simply copy all files again.</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> stats = <span class=\"hljs-keyword\">await</span> pda.exportArchiveToFilesystem({\n  <span class=\"hljs-attr\">srcArchive</span>: archive,\n  <span class=\"hljs-attr\">dstPath</span>: <span class=\"hljs-string\">'/tmp/mystuff'</span>,\n  <span class=\"hljs-attr\">skipUndownloadedFiles</span>: <span class=\"hljs-literal\">true</span>\n})\n<span class=\"hljs-built_in\">console</span>.log(stats) <span class=\"hljs-comment\">/* =&gt; {\n  addedFiles: ['fuzz.txt', 'foo/bar.txt'],\n  updatedFiles: ['something.txt'],\n  fileCount: 3,\n  totalSize: 400 // bytes\n}*/</span>\n</code></pre>\n<h3 id=\"exportarchivetoarchiveopts-cb\"><a href=\"#exportarchivetoarchiveopts-cb\" class=\"anchor\"></a>exportArchiveToArchive(opts[, cb])</h3><ul>\n<li><code>opts.srcArchive</code> Source archive (object). Required.</li>\n<li><code>opts.dstArchive</code> Destination archive (object). Required.</li>\n<li><code>opts.srcPath</code> Source path within the source archive (string). Optional, defaults to &#39;/&#39;.</li>\n<li><code>opts.dstPath</code> Destination path within the destination archive (string). Optional, defaults to &#39;/&#39;.</li>\n<li><code>opts.ignore</code> Files not to copy (array of strings). Optional. Uses <a href=\"npm.im/anymatch\">anymatch</a>.</li>\n<li><code>opts.skipUndownloadedFiles</code> Ignore files that haven&#39;t been downloaded yet (boolean). Default false. If false, will wait for source files to download.</li>\n</ul>\n<p>Copies an archive into another archive.</p>\n<p>NOTE</p>\n<ul>\n<li>Unlike exportFilesystemToArchive, this will not compare the target for equality before copying. It copies files indescriminately.</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> stats = <span class=\"hljs-keyword\">await</span> pda.exportArchiveToArchive({\n  <span class=\"hljs-attr\">srcArchive</span>: archiveA,\n  <span class=\"hljs-attr\">dstArchive</span>: archiveB,\n  <span class=\"hljs-attr\">skipUndownloadedFiles</span>: <span class=\"hljs-literal\">true</span>\n})\n<span class=\"hljs-built_in\">console</span>.log(stats) <span class=\"hljs-comment\">/* =&gt; {\n  addedFiles: ['fuzz.txt', 'foo/bar.txt'],\n  updatedFiles: ['something.txt'],\n  fileCount: 3,\n  totalSize: 400 // bytes\n}*/</span>\n</code></pre>\n<h2 id=\"manifest\"><a href=\"#manifest\" class=\"anchor\"></a>Manifest</h2><h3 id=\"readmanifestarchive-cb\"><a href=\"#readmanifestarchive-cb\" class=\"anchor\"></a>readManifest(archive[, cb])</h3><ul>\n<li><code>archive</code> Hyperdrive archive (object).</li>\n</ul>\n<p>A sugar to get the manifest object.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> manifestObj = <span class=\"hljs-keyword\">await</span> pda.readManifest(archive)\n</code></pre>\n<h3 id=\"writemanifestarchive-manifest-cb\"><a href=\"#writemanifestarchive-manifest-cb\" class=\"anchor\"></a>writeManifest(archive, manifest[, cb])</h3><ul>\n<li><code>archive</code> Hyperdrive archive (object).</li>\n<li><code>manifest</code> Manifest values (object).</li>\n</ul>\n<p>A sugar to write the manifest object.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">await</span> pda.writeManifest(archive, { <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'My dat!'</span> })\n</code></pre>\n<h3 id=\"updatemanifestarchive-manifest-cb\"><a href=\"#updatemanifestarchive-manifest-cb\" class=\"anchor\"></a>updateManifest(archive, manifest[, cb])</h3><ul>\n<li><code>archive</code> Hyperdrive archive (object).</li>\n<li><code>manifest</code> Manifest values (object).</li>\n</ul>\n<p>A sugar to modify the manifest object.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">await</span> pda.writeManifest(archive, { <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'My dat!'</span>, <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">'the desc'</span> })\n<span class=\"hljs-keyword\">await</span> pda.writeManifest(archive, { <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'My new title!'</span> }) <span class=\"hljs-comment\">// preserves description</span>\n</code></pre>\n<h3 id=\"generatemanifestopts\"><a href=\"#generatemanifestopts\" class=\"anchor\"></a>generateManifest(opts)</h3><ul>\n<li><code>opts</code> Manifest options (object).</li>\n</ul>\n<p>Helper to generate a manifest object. Opts in detail:</p>\n<pre><code>{\n  url: <span class=\"hljs-built_in\">String</span>, the dat<span class=\"hljs-symbol\">'s</span> url\n  title: <span class=\"hljs-built_in\">String</span>\n  description: <span class=\"hljs-built_in\">String</span>\n  author: <span class=\"hljs-built_in\">String</span>\n  version: <span class=\"hljs-built_in\">String</span>\n  forkOf: <span class=\"hljs-built_in\">String</span>, the forked-from dat<span class=\"hljs-symbol\">'s</span> url\n  createdBy: <span class=\"hljs-built_in\">String</span>, the url of the app that created the dat\n}\n</code></pre><p>See: <a href=\"https://github.com/datprotocol/dat.json\">https://github.com/datprotocol/dat.json</a></p>\n<h2 id=\"helpers\"><a href=\"#helpers\" class=\"anchor\"></a>Helpers</h2><h3 id=\"findentrybycontentblockarchive-block\"><a href=\"#findentrybycontentblockarchive-block\" class=\"anchor\"></a>findEntryByContentBlock(archive, block)</h3><ul>\n<li><code>archive</code> Hyperdrive archive (object).</li>\n<li><code>block</code> Content-block index</li>\n<li>Returns a Promise for <code>{name:, start:, end:}</code></li>\n</ul>\n<p>Runs a binary search to find the file-entry that the given content-block index belongs to.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">await</span> pda.findEntryByContentBlock(archive, <span class=\"hljs-number\">5</span>)\n<span class=\"hljs-comment\">/* =&gt; {\n  name: '/foo.txt',\n  start: 4,\n  end: 6\n}*/</span>\n</code></pre>\n","node-dat-archive":"<h2 id=\"node-datarchive\"><a href=\"#node-datarchive\" class=\"anchor\"></a>Node DatArchive</h2><p>A nodejs API for Dat which is compatible with Beaker&#39;s DatArchive API. Useful for testing and for writing apps that work in the browser and in nodejs.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> DatArchive = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'node-dat-archive'</span>)\n\n<span class=\"hljs-keyword\">var</span> archive = <span class=\"hljs-keyword\">await</span> DatArchive.create({\n  <span class=\"hljs-attr\">localPath</span>: <span class=\"hljs-string\">'./my-archive-data'</span>,\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'My Archive'</span>,\n  <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">'A test of the node DatArchive API'</span>\n})\n\n<span class=\"hljs-keyword\">var</span> names = <span class=\"hljs-keyword\">await</span> archive.readdir(<span class=\"hljs-string\">'/'</span>)\n<span class=\"hljs-built_in\">console</span>.log(names) <span class=\"hljs-comment\">// =&gt; ['index.html', 'images']</span>\n\n<span class=\"hljs-keyword\">await</span> archive.writeFile(<span class=\"hljs-string\">'hello.txt'</span>, <span class=\"hljs-string\">'world'</span>)\n</code></pre>\n<h3 id=\"differences-from-browser-api\"><a href=\"#differences-from-browser-api\" class=\"anchor\"></a>Differences from Browser API</h3><ul>\n<li>This module adds the <code>localPath</code> parameter to <code>new DatArchive</code> and <code>DatArchive.create</code>. Use the <code>localPath</code> to specify where the data for the archive should be stored. If not provided, the archive will be stored in memory.</li>\n<li>This module does not include <code>DatArchive.fork</code>.</li>\n<li>This module does not include <code>DatArchive.selectArchive</code>.</li>\n<li><code>archive.getInfo()</code> does not give a valid <code>mtime</code>, <code>metaSize</code>, or <code>stagingSize</code></li>\n<li>Unlike in the browser, this API does not have a staging area. All modifications are published immediately. The <code>diff()</code>, <code>commit()</code>, and <code>revert()</code> commands are noops.</li>\n</ul>\n<h3 id=\"quick-api-reference\"><a href=\"#quick-api-reference\" class=\"anchor\"></a>Quick API reference</h3><p>Refer to the <a href=\"https://beakerbrowser.com/docs/apis/dat.html\">Beaker <code>DatArchive</code> docs</a>.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> archive = <span class=\"hljs-keyword\">new</span> DatArchive(url, {<span class=\"hljs-attr\">localPath</span>:})\n<span class=\"hljs-keyword\">var</span> archive = <span class=\"hljs-keyword\">await</span> DatArchive.create({<span class=\"hljs-attr\">localPath</span>:, <span class=\"hljs-attr\">title</span>:, <span class=\"hljs-attr\">description</span>:})\n<span class=\"hljs-keyword\">var</span> key = <span class=\"hljs-keyword\">await</span> DatArchive.resolveName(url)\narchive.url\n<span class=\"hljs-keyword\">var</span> info = <span class=\"hljs-keyword\">await</span> archive.getInfo({<span class=\"hljs-attr\">timeout</span>:})\n<span class=\"hljs-keyword\">var</span> stat = <span class=\"hljs-keyword\">await</span> archive.stat(path, {<span class=\"hljs-attr\">timeout</span>:})\n<span class=\"hljs-keyword\">var</span> content = <span class=\"hljs-keyword\">await</span> archive.readFile(path, {<span class=\"hljs-attr\">encoding</span>:, <span class=\"hljs-attr\">timeout</span>:})\n<span class=\"hljs-keyword\">var</span> names = archive.readdir(path, {<span class=\"hljs-attr\">recursive</span>:, <span class=\"hljs-attr\">stat</span>:, <span class=\"hljs-attr\">timeout</span>:})\n<span class=\"hljs-keyword\">await</span> archive.writeFile(path, data, encoding)\n<span class=\"hljs-keyword\">await</span> archive.mkdir(path)\n<span class=\"hljs-keyword\">await</span> archive.unlink(path)\n<span class=\"hljs-keyword\">await</span> archive.rmdir(path, {<span class=\"hljs-attr\">recursive</span>:})\n<span class=\"hljs-keyword\">var</span> changes = <span class=\"hljs-keyword\">await</span> archive.diff({<span class=\"hljs-attr\">shallow</span>:, <span class=\"hljs-attr\">timeout</span>:})\n<span class=\"hljs-keyword\">var</span> changes = <span class=\"hljs-keyword\">await</span> archive.commit()\n<span class=\"hljs-keyword\">var</span> changes = <span class=\"hljs-keyword\">await</span> archive.revert()\n<span class=\"hljs-keyword\">var</span> history = <span class=\"hljs-keyword\">await</span> archive.history({<span class=\"hljs-attr\">start</span>:, <span class=\"hljs-attr\">end</span>:, <span class=\"hljs-attr\">reverse</span>:, <span class=\"hljs-attr\">timeout</span>:})\n<span class=\"hljs-keyword\">await</span> archive.download(path, {<span class=\"hljs-attr\">timeout</span>:})\n<span class=\"hljs-keyword\">var</span> emitter = archive.createFileActivityStream(pattern)\n<span class=\"hljs-keyword\">var</span> emitter = archive.createNetworkActivityStream()\n\n<span class=\"hljs-comment\">// node-only:</span>\narchive._loadPromise <span class=\"hljs-comment\">// promise for when the archive is ready to use</span>\narchive._close() <span class=\"hljs-comment\">// exit swarm, close all files</span>\n</code></pre>\n","hypercore-archiver":"<h1 id=\"hypercore-archiver\"><a href=\"#hypercore-archiver\" class=\"anchor\"></a>hypercore-archiver</h1><p>Easily archive multiple hypercores or hyperdrives</p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> archiver = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hypercore-archiver'</span>)\n<span class=\"hljs-keyword\">var</span> hypercore = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hypercore'</span>)\n\n<span class=\"hljs-keyword\">var</span> ar = archiver(<span class=\"hljs-string\">'./my-archiver'</span>) <span class=\"hljs-comment\">// also supports passing in a storage provider</span>\n<span class=\"hljs-keyword\">var</span> feed = hypercore(<span class=\"hljs-string\">'./my-feed'</span>)\n\nfeed.on(<span class=\"hljs-string\">'ready'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  ar.add(feed.key, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'will now archive the feed'</span>)\n  })\n})\n\nar.on(<span class=\"hljs-string\">'sync'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">feed</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'feed is synced'</span>, feed.key)\n})\n\n<span class=\"hljs-comment\">// setup replication</span>\n<span class=\"hljs-keyword\">var</span> stream = ar.replicate()\nstream.pipe(feed.replicate({<span class=\"hljs-attr\">live</span>: <span class=\"hljs-literal\">true</span>})).pipe(stream)\n\nfeed.append([<span class=\"hljs-string\">'hello'</span>, <span class=\"hljs-string\">'world'</span>])\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h4 id=\"var-ar-archiverstorage-key-options\"><a href=\"#var-ar-archiverstorage-key-options\" class=\"anchor\"></a><code>var ar = archiver(storage, [key], [options])</code></h4><p>Create a new archvier. <code>storage</code> can be a file system path or a storage provider like <a href=\"https://github.com/mafintosh/random-access-memory\">random-access-memory</a>.</p>\n<p>If this archiver is a clone of another archiver pass the changes feed key as the 2nd argument.</p>\n<p>Options include</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">sparse</span>: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// set to true to only archive blocks you request</span>\n}\n</code></pre>\n<h5 id=\"sparse-file-storage\"><a href=\"#sparse-file-storage\" class=\"anchor\"></a>Sparse File Storage</h5><p>The sparse option uses sparse file mode, only availalbe on some file systems. It will appear as a full size file but only take up the space actually used on disk.</p>\n<ul>\n<li>Use <code>ls -alsh</code> to view the actual size (first column)</li>\n<li>sparse file mode (APFS) is not available on Mac OSX.</li>\n</ul>\n<h4 id=\"araddkey-callback\"><a href=\"#araddkey-callback\" class=\"anchor\"></a><code>ar.add(key, [callback])</code></h4><p>Add a new hypercore or hyperdrive key to be archived.</p>\n<h4 id=\"arremovekey-callback\"><a href=\"#arremovekey-callback\" class=\"anchor\"></a><code>ar.remove(key, [callback])</code></h4><p>Remove a key.</p>\n<h4 id=\"arlistcallback\"><a href=\"#arlistcallback\" class=\"anchor\"></a><code>ar.list(callback)</code></h4><p>List all hypercores and hyperdrives being archived.</p>\n<h4 id=\"argetkey-callback\"><a href=\"#argetkey-callback\" class=\"anchor\"></a><code>ar.get(key, callback)</code></h4><p>Retrieve the feed being archived. If the key points to a hyperdrive the callback is called with <code>(err, metadataFeed, contentFeed)</code></p>\n<h4 id=\"archanges\"><a href=\"#archanges\" class=\"anchor\"></a><code>ar.changes</code></h4><p>A changes feed containing the archiver state. Pass the changes feed key to another hypercore archiver to replicate the archiver and all feeds</p>\n<h4 id=\"var-stream-arreplicateoptions\"><a href=\"#var-stream-arreplicateoptions\" class=\"anchor\"></a><code>var stream = ar.replicate([options])</code></h4><p>Create a replication stream. Per defaults the archiver will replicate any feed the remote asks for.\nTo have the archiver ask to replicate one pass in <code>{key: feedKey}</code> as an option.</p>\n<h4 id=\"aronadd-feed\"><a href=\"#aronadd-feed\" class=\"anchor\"></a><code>ar.on(&#39;add&#39;, feed)</code></h4><p>Emitted when a feed is being added</p>\n<h4 id=\"aronremove-feed\"><a href=\"#aronremove-feed\" class=\"anchor\"></a><code>ar.on(&#39;remove&#39;, feed)</code></h4><p>Emitted when a feed is being removed</p>\n<h4 id=\"aronsync-feed\"><a href=\"#aronsync-feed\" class=\"anchor\"></a><code>ar.on(&#39;sync&#39;, feed)</code></h4><p>Emitted when a feed has been fully synced</p>\n<h4 id=\"arondownload-feed-index-data-peer\"><a href=\"#arondownload-feed-index-data-peer\" class=\"anchor\"></a><code>ar.on(&#39;download&#39;, feed, index, data, peer)</code></h4><p>Emitted when the archiver downloads a block of data</p>\n<h4 id=\"aronupload-feed-index-data-peer\"><a href=\"#aronupload-feed-index-data-peer\" class=\"anchor\"></a><code>ar.on(&#39;upload&#39;, feed, index, data, peer)</code></h4><p>Emitted when the archiver uploads a block of data</p>\n<h4 id=\"aronready\"><a href=\"#aronready\" class=\"anchor\"></a><code>ar.on(&#39;ready&#39;)</code></h4><p>Emitted when all internal state has been loaded (the changes feed will be set). You do not have to wait for this event before calling any async function.</p>\n<h2 id=\"network-swarm\"><a href=\"#network-swarm\" class=\"anchor\"></a>Network Swarm</h2><p>The archiver comes with a network swarm as well. This will make the archiver replicate over the internet and local network.\nTo use it do:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> swarm = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hypercore-archiver/swarm'</span>)\nswarm(archiver)\n</code></pre>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","hypercloud":"<h1 id=\"hypercloud-cloud\"><a href=\"#hypercloud-cloud\" class=\"anchor\"></a>Hypercloud ☁</h1><p>Hypercloud is a public peer service for <a href=\"https://datproject.org\">Dat</a> archives. It provides a HTTP-accessible interface for creating an account and uploading Dats.</p>\n<p>Features:</p>\n<ul>\n<li>Simple Dat uploading and hosting</li>\n<li>Easy to replicate Dats, Users, or entire datasets between Hypercloud deployments</li>\n<li>Configurable user management</li>\n<li>Easy to self-deploy</li>\n</ul>\n<p>Links:</p>\n<ul>\n<li><strong><a href=\"https://github.com/joehand/hypercloud/wiki\">Get Involved</a></strong></li>\n<li><strong><a href=\"./docs\">Documentation</a></strong></li>\n</ul>\n<h2 id=\"setup\"><a href=\"#setup\" class=\"anchor\"></a>Setup</h2><p>Clone this repository, then run</p>\n<pre><code>npm install\ncp config<span class=\"hljs-selector-class\">.defaults</span><span class=\"hljs-selector-class\">.yml</span> config<span class=\"hljs-selector-class\">.development</span><span class=\"hljs-selector-class\">.yml</span>\n</code></pre><p>Modify <code>config.development.yml</code> to fit your needs, then start the server with <code>npm start</code>.</p>\n<h2 id=\"configuration\"><a href=\"#configuration\" class=\"anchor\"></a>Configuration</h2><p>Before deploying the service, you absolutely <em>must</em> modify the following config.</p>\n<h4 id=\"basics\"><a href=\"#basics\" class=\"anchor\"></a>Basics</h4><pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">dir:</span> <span class=\"hljs-string\">./.hypercloud</span>            <span class=\"hljs-comment\"># where to store the data</span>\n<span class=\"hljs-attr\">brandname:</span> <span class=\"hljs-string\">Hypercloud</span>         <span class=\"hljs-comment\"># the title of your service</span>\n<span class=\"hljs-attr\">hostname:</span> <span class=\"hljs-string\">hypercloud.local</span>    <span class=\"hljs-comment\"># the hostname of your service</span>\n<span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8080</span>                    <span class=\"hljs-comment\"># the port to run the service on</span>\n<span class=\"hljs-attr\">rateLimiting:</span> <span class=\"hljs-literal\">true</span>            <span class=\"hljs-comment\"># rate limit the HTTP requests?</span>\n<span class=\"hljs-attr\">defaultDiskUsageLimit:</span> <span class=\"hljs-number\">100</span><span class=\"hljs-string\">mb</span>  <span class=\"hljs-comment\"># default maximum disk usage for each user</span>\n<span class=\"hljs-attr\">pm2:</span> <span class=\"hljs-literal\">false</span>                    <span class=\"hljs-comment\"># set to true if you're using https://keymetrics.io/</span>\n</code></pre>\n<h4 id=\"lets-encrypt\"><a href=\"#lets-encrypt\" class=\"anchor\"></a>Lets Encrypt</h4><p>You can enable lets-encrypt to automatically provision TLS certs using this config:</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">letsencrypt:</span>\n<span class=\"hljs-attr\">  debug:</span> <span class=\"hljs-literal\">false</span>          <span class=\"hljs-comment\"># debug mode? must be set to 'false' to use live config</span>\n<span class=\"hljs-attr\">  email:</span> <span class=\"hljs-string\">'foo@bar.com'</span>  <span class=\"hljs-comment\"># email to register domains under</span>\n</code></pre>\n<p>If enabled, <code>port</code> will be ignored and the server will register at ports 80 and 443.</p>\n<h4 id=\"admin-account\"><a href=\"#admin-account\" class=\"anchor\"></a>Admin Account</h4><p>The admin user has its credentials set by the config yaml at load. If you change the password while the server is running, then restart the server, the password will be reset to whatever is in the config.</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">admin:</span>\n<span class=\"hljs-attr\">  email:</span> <span class=\"hljs-string\">'foo@bar.com'</span>\n<span class=\"hljs-attr\">  password:</span> <span class=\"hljs-string\">myverysecretpassword</span>\n</code></pre>\n<h4 id=\"ui-module\"><a href=\"#ui-module\" class=\"anchor\"></a>UI Module</h4><p>The frontend can be replaced with a custom npm module. The default is <a href=\"https://npm.im/hypercloud-ui-vanilla\">hypercloud-ui-vanilla</a>.</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">ui:</span> <span class=\"hljs-string\">hypercloud-ui-vanilla</span>\n</code></pre>\n<h4 id=\"http-sites\"><a href=\"#http-sites\" class=\"anchor\"></a>HTTP Sites</h4><p>Hypercloud can host the archives as HTTP sites. This has the added benefit of enabling <a href=\"npm.im/dat-dns\">dat-dns shortnames</a> for the archives. There are two possible schemes:</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">sites:</span> <span class=\"hljs-string\">per-user</span>\n</code></pre>\n<p>Per-user will host archives at <code>username.hostname/archivename</code>, in a scheme similar to GitHub Pages. If the archive-name is == to the username, it will be hosted at <code>username.hostname</code>.</p>\n<p>Note that, in this scheme, a DNS shortname is only provided for the user archive (<code>username.hostname</code>).</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">sites:</span> <span class=\"hljs-string\">per-archive</span>\n</code></pre>\n<p>Per-archive will host archives at <code>archivename-username.hostname</code>. If the archive-name is == to the username, it will be hosted at <code>username.hostname</code>.</p>\n<p>By default, HTTP Sites are disabled.</p>\n<h4 id=\"closed-registration\"><a href=\"#closed-registration\" class=\"anchor\"></a>Closed Registration</h4><p>For a private instance, use closed registration with a whitelist of allowed emails:</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">registration:</span>\n<span class=\"hljs-attr\">  open:</span> <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">  allowed:</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">alice@mail.com</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">bob@mail.com</span>\n</code></pre>\n<h4 id=\"reserved-usernames\"><a href=\"#reserved-usernames\" class=\"anchor\"></a>Reserved Usernames</h4><p>Use reserved usernames to blacklist usernames which collide with frontend routes, or which might be used maliciously.</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">registration:</span>\n<span class=\"hljs-attr\">  reservedNames:</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">admin</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">root</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">support</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">noreply</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">users</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">archives</span>\n</code></pre>\n<h4 id=\"session-tokens\"><a href=\"#session-tokens\" class=\"anchor\"></a>Session Tokens</h4><p>Hypercloud uses Json Web Tokens to manage sessions. You absolutely <em>must</em> replace the <code>secret</code> with a random string before deployment.</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">sessions:</span>\n<span class=\"hljs-attr\">  algorithm:</span> <span class=\"hljs-string\">HS256</span>                <span class=\"hljs-comment\"># probably dont update this</span>\n<span class=\"hljs-attr\">  secret:</span> <span class=\"hljs-string\">THIS</span> <span class=\"hljs-string\">MUST</span> <span class=\"hljs-string\">BE</span> <span class=\"hljs-string\">REPLACED!</span>  <span class=\"hljs-comment\"># put something random here</span>\n<span class=\"hljs-attr\">  expiresIn:</span> <span class=\"hljs-number\">1</span><span class=\"hljs-string\">h</span>                   <span class=\"hljs-comment\"># how long do sessions live?</span>\n</code></pre>\n<h4 id=\"jobs\"><a href=\"#jobs\" class=\"anchor\"></a>Jobs</h4><p>Hypercloud runs some jobs periodically. You can configure how frequently they run.</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-comment\"># processing jobs</span>\n<span class=\"hljs-attr\">jobs:</span>\n<span class=\"hljs-attr\">  popularArchivesIndex:</span> <span class=\"hljs-number\">30</span><span class=\"hljs-string\">s</span>  <span class=\"hljs-comment\"># compute the index of archives sorted by num peers</span>\n<span class=\"hljs-attr\">  userDiskUsage:</span> <span class=\"hljs-number\">5</span><span class=\"hljs-string\">m</span>          <span class=\"hljs-comment\"># compute how much disk space each user is using</span>\n<span class=\"hljs-attr\">  deleteDeadArchives:</span> <span class=\"hljs-number\">5</span><span class=\"hljs-string\">m</span>     <span class=\"hljs-comment\"># delete removed archives from disk</span>\n</code></pre>\n<h4 id=\"emailer\"><a href=\"#emailer\" class=\"anchor\"></a>Emailer</h4><p><em>Todo, sorry</em></p>\n<h2 id=\"tests\"><a href=\"#tests\" class=\"anchor\"></a>Tests</h2><p>Run the tests with</p>\n<pre><code>npm <span class=\"hljs-built_in\">test</span>\n</code></pre><p>To run the tests against a running server, specify the env var:</p>\n<pre><code><span class=\"hljs-comment\">REMOTE_URL=http://{hostname}/ npm test</span>\n</code></pre><h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","hashbase":"<h1 id=\"hashbase\"><a href=\"#hashbase\" class=\"anchor\"></a>Hashbase</h1><p>Hashbase is a public peer service for <a href=\"https://datproject.org\">Dat</a> archives. It provides a HTTP-accessible interface for creating an account and uploading Dats. It was created to power a content-community for the <a href=\"https://beakerbrowser.com\">Beaker Browser</a></p>\n<p>Links:</p>\n<ul>\n<li><strong><a href=\"https://hashbase.io\">Hashbase.io</a></strong></li>\n<li><strong><a href=\"./docs\">Documentation</a></strong></li>\n</ul>\n<h2 id=\"setup\"><a href=\"#setup\" class=\"anchor\"></a>Setup</h2><p>Clone this repository, then run</p>\n<pre><code>npm install\ncp config<span class=\"hljs-selector-class\">.defaults</span><span class=\"hljs-selector-class\">.yml</span> config<span class=\"hljs-selector-class\">.development</span><span class=\"hljs-selector-class\">.yml</span>\n</code></pre><p>Modify <code>config.development.yml</code> to fit your needs, then start the server with <code>npm start</code>.</p>\n<h2 id=\"configuration\"><a href=\"#configuration\" class=\"anchor\"></a>Configuration</h2><p>Before deploying the service, you absolutely <em>must</em> modify the following config.</p>\n<h4 id=\"basics\"><a href=\"#basics\" class=\"anchor\"></a>Basics</h4><pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">dir:</span> <span class=\"hljs-string\">./.hashbase</span>              <span class=\"hljs-comment\"># where to store the data</span>\n<span class=\"hljs-attr\">brandname:</span> <span class=\"hljs-string\">Hashbase</span>           <span class=\"hljs-comment\"># the title of your service</span>\n<span class=\"hljs-attr\">hostname:</span> <span class=\"hljs-string\">hashbase.local</span>      <span class=\"hljs-comment\"># the hostname of your service</span>\n<span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8080</span>                    <span class=\"hljs-comment\"># the port to run the service on</span>\n<span class=\"hljs-attr\">rateLimiting:</span> <span class=\"hljs-literal\">true</span>            <span class=\"hljs-comment\"># rate limit the HTTP requests?</span>\n<span class=\"hljs-attr\">csrf:</span> <span class=\"hljs-literal\">true</span>                    <span class=\"hljs-comment\"># use csrf tokens?</span>\n<span class=\"hljs-attr\">defaultDiskUsageLimit:</span> <span class=\"hljs-number\">100</span><span class=\"hljs-string\">mb</span>  <span class=\"hljs-comment\"># default maximum disk usage for each user</span>\n</code></pre>\n<h4 id=\"lets-encrypt\"><a href=\"#lets-encrypt\" class=\"anchor\"></a>Lets Encrypt</h4><p>You can enable lets-encrypt to automatically provision TLS certs using this config:</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">letsencrypt:</span>\n<span class=\"hljs-attr\">  debug:</span> <span class=\"hljs-literal\">false</span>          <span class=\"hljs-comment\"># debug mode? must be set to 'false' to use live config</span>\n<span class=\"hljs-attr\">  email:</span> <span class=\"hljs-string\">'foo@bar.com'</span>  <span class=\"hljs-comment\"># email to register domains under</span>\n</code></pre>\n<p>If enabled, <code>port</code> will be ignored and the server will register at ports 80 and 443.</p>\n<h4 id=\"admin-account\"><a href=\"#admin-account\" class=\"anchor\"></a>Admin Account</h4><p>The admin user has its credentials set by the config yaml at load. If you change the password while the server is running, then restart the server, the password will be reset to whatever is in the config.</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">admin:</span>\n<span class=\"hljs-attr\">  email:</span> <span class=\"hljs-string\">'foo@bar.com'</span>\n<span class=\"hljs-attr\">  password:</span> <span class=\"hljs-string\">myverysecretpassword</span>\n</code></pre>\n<h4 id=\"http-sites\"><a href=\"#http-sites\" class=\"anchor\"></a>HTTP Sites</h4><p>Hashbase can host the archives as HTTP sites. This has the added benefit of enabling <a href=\"https://npm.im/dat-dns\">dat-dns shortnames</a> for the archives. There are two possible schemes:</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">sites:</span> <span class=\"hljs-string\">per-user</span>\n</code></pre>\n<p>Per-user will host archives at <code>username.hostname/archivename</code>, in a scheme similar to GitHub Pages. If the archive-name is == to the username, it will be hosted at <code>username.hostname</code>.</p>\n<p>Note that, in this scheme, a DNS shortname is only provided for the user archive (<code>username.hostname</code>).</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">sites:</span> <span class=\"hljs-string\">per-archive</span>\n</code></pre>\n<p>Per-archive will host archives at <code>archivename-username.hostname</code>. If the archive-name is == to the username, it will be hosted at <code>username.hostname</code>.</p>\n<p>By default, HTTP Sites are disabled.</p>\n<h4 id=\"closed-registration\"><a href=\"#closed-registration\" class=\"anchor\"></a>Closed Registration</h4><p>For a private instance, use closed registration with a whitelist of allowed emails:</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">registration:</span>\n<span class=\"hljs-attr\">  open:</span> <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">  allowed:</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">alice@mail.com</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">bob@mail.com</span>\n</code></pre>\n<h4 id=\"reserved-usernames\"><a href=\"#reserved-usernames\" class=\"anchor\"></a>Reserved Usernames</h4><p>Use reserved usernames to blacklist usernames which collide with frontend routes, or which might be used maliciously.</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">registration:</span>\n<span class=\"hljs-attr\">  reservedNames:</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">admin</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">root</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">support</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">noreply</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">users</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">archives</span>\n</code></pre>\n<h4 id=\"monitoring\"><a href=\"#monitoring\" class=\"anchor\"></a>Monitoring</h4><pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">pm2:</span> <span class=\"hljs-literal\">false</span>         <span class=\"hljs-comment\"># set to true if you're using https://keymetrics.io/</span>\n<span class=\"hljs-attr\">alerts:</span>\n<span class=\"hljs-attr\">  diskUsage:</span> <span class=\"hljs-number\">10</span><span class=\"hljs-string\">gb</span>  <span class=\"hljs-comment\"># when to trigger an alert on disk usage</span>\n</code></pre>\n<h4 id=\"session-tokens\"><a href=\"#session-tokens\" class=\"anchor\"></a>Session Tokens</h4><p>Hashbase uses Json Web Tokens to manage sessions. You absolutely <em>must</em> replace the <code>secret</code> with a random string before deployment.</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">sessions:</span>\n<span class=\"hljs-attr\">  algorithm:</span> <span class=\"hljs-string\">HS256</span>                <span class=\"hljs-comment\"># probably dont update this</span>\n<span class=\"hljs-attr\">  secret:</span> <span class=\"hljs-string\">THIS</span> <span class=\"hljs-string\">MUST</span> <span class=\"hljs-string\">BE</span> <span class=\"hljs-string\">REPLACED!</span>  <span class=\"hljs-comment\"># put something random here</span>\n<span class=\"hljs-attr\">  expiresIn:</span> <span class=\"hljs-number\">1</span><span class=\"hljs-string\">h</span>                   <span class=\"hljs-comment\"># how long do sessions live?</span>\n</code></pre>\n<h4 id=\"jobs\"><a href=\"#jobs\" class=\"anchor\"></a>Jobs</h4><p>Hashbase runs some jobs periodically. You can configure how frequently they run.</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-comment\"># processing jobs</span>\n<span class=\"hljs-attr\">jobs:</span>\n<span class=\"hljs-attr\">  popularArchivesIndex:</span> <span class=\"hljs-number\">30</span><span class=\"hljs-string\">s</span>  <span class=\"hljs-comment\"># compute the index of archives sorted by num peers</span>\n<span class=\"hljs-attr\">  userDiskUsage:</span> <span class=\"hljs-number\">5</span><span class=\"hljs-string\">m</span>          <span class=\"hljs-comment\"># compute how much disk space each user is using</span>\n<span class=\"hljs-attr\">  deleteDeadArchives:</span> <span class=\"hljs-number\">5</span><span class=\"hljs-string\">m</span>     <span class=\"hljs-comment\"># delete removed archives from disk</span>\n</code></pre>\n<h4 id=\"emailer\"><a href=\"#emailer\" class=\"anchor\"></a>Emailer</h4><p><em>Todo, sorry</em></p>\n<h2 id=\"tests\"><a href=\"#tests\" class=\"anchor\"></a>Tests</h2><p>Run the tests with</p>\n<pre><code>npm <span class=\"hljs-built_in\">test</span>\n</code></pre><p>To run the tests against a running server, specify the env var:</p>\n<pre><code><span class=\"hljs-comment\">REMOTE_URL=http://{hostname}/ npm test</span>\n</code></pre><h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","dat-now":"<h1 id=\"dat-now\"><a href=\"#dat-now\" class=\"anchor\"></a>dat-now</h1><p>Publish live syncing and versioned websites, files, whatever to now.sh instantly and forever.</p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><ul>\n<li><code>dat share /my-website</code> - share a folder with dat</li>\n<li><code>now joehand/dat-now -e KEY=dat://28cddf6d5d21bbd9492dcdba14a68b9a35393b769b15f61e2a5258567d8bca8f</code></li>\n</ul>\n<p><strong>Set your dat key</strong> as an environment variable + deploy via now. You only need to deploy once for each dat key.</p>\n<h3 id=\"what-does-this-do\"><a href=\"#what-does-this-do\" class=\"anchor\"></a>What does this do?</h3><ul>\n<li>Shares a folder on your computer using <a href=\"github.com/datproject/dat\">Dat</a>.</li>\n<li>Deploys <em>ONCE</em> to <a href=\"https://zeit.co/now\">now.sh</a> with your <strong>dat key</strong></li>\n<li>Live syncs your files to now.sh without touching anything.</li>\n</ul>\n<h3 id=\"how-does-it-work\"><a href=\"#how-does-it-work\" class=\"anchor\"></a>How does it work?</h3><p>Whenever you share a dat, <code>dat-now</code> connects via a peer to peer network to your computer. It downloads the latest copies of all the files whenever you are connected.</p>\n<p>Once on now, Dat serves the files over http! You can even view old versions of the files: <code>https://dat-now-enqtptfoko.now.sh/?version=100</code>.</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p><a href=\"LICENSE.md\">MIT</a></p>\n","hypercore-archiver-bot":"<h1 id=\"hypercore-archiver-bot\"><a href=\"#hypercore-archiver-bot\" class=\"anchor\"></a>hypercore-archiver-bot</h1><p>IRC bot that is an interface to <a href=\"https://github.com/mafintosh/hypercore-archiver\">hypercore-archiver</a></p>\n<pre><code>npm <span class=\"hljs-keyword\">install </span>-g hypercore-archiver-<span class=\"hljs-keyword\">bot\n</span>hypercore-archiver-<span class=\"hljs-keyword\">bot </span>--channel=<span class=\"hljs-comment\">#your-irc-channel --port=8000</span>\n</code></pre><h3 id=\"commands\"><a href=\"#commands\" class=\"anchor\"></a>commands</h3><pre><code>!add &lt;<span class=\"hljs-built_in\">key</span>&gt;\n!<span class=\"hljs-built_in\">remove</span> &lt;<span class=\"hljs-built_in\">key</span>&gt;/!rm &lt;<span class=\"hljs-built_in\">key</span>&gt;\n!<span class=\"hljs-built_in\">status</span>\n!<span class=\"hljs-built_in\">status</span> &lt;<span class=\"hljs-built_in\">key</span>&gt;\n</code></pre><h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","hypercore-archiver-ws":"<h1 id=\"hypercore-archiver-ws\"><a href=\"#hypercore-archiver-ws\" class=\"anchor\"></a>hypercore-archiver-ws</h1><p>websocket server for hypercore-archiver</p>\n<h2 id=\"install\"><a href=\"#install\" class=\"anchor\"></a>Install</h2><pre><code>npm <span class=\"hljs-keyword\">install</span> hypercore-archiver-ws\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> archiver = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hypercore-archiver'</span>)\n<span class=\"hljs-keyword\">var</span> archiverWs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hypercore-archiver-ws'</span>)\n\n<span class=\"hljs-keyword\">var</span> archives = archiver(<span class=\"hljs-string\">'./my-archiver'</span>)\n<span class=\"hljs-keyword\">var</span> server = archiverWs(archives)\nserver.listen(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`listening on port <span class=\"hljs-subst\">${<span class=\"hljs-number\">8080</span>}</span>`</span>)\n})\n</code></pre>\n<h3 id=\"custom-server\"><a href=\"#custom-server\" class=\"anchor\"></a>Custom server</h3><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> archiver = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hypercore-archiver'</span>)\n<span class=\"hljs-keyword\">var</span> archiverWs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hypercore-archiver-ws'</span>)\n\n<span class=\"hljs-keyword\">var</span> archives = archiver(<span class=\"hljs-string\">'./my-archiver'</span>)\n<span class=\"hljs-keyword\">var</span> server = archiverWs(archives)\nserver.listen(<span class=\"hljs-number\">8080</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`listening on port <span class=\"hljs-subst\">${<span class=\"hljs-number\">8080</span>}</span>`</span>)\n})\n</code></pre>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p><a href=\"LICENSE.md\">MIT</a></p>\n","dat-registry-api":"<h1 id=\"dat-registry-api\"><a href=\"#dat-registry-api\" class=\"anchor\"></a>Dat Registry API</h1><p>A web registry API including database and REST endpoints. Example hosted at <a href=\"http://datproject.org\">http://datproject.org</a>.</p>\n<p><a href=\"https://travis-ci.org/datproject/dat-registry-api\"><img src=\"https://travis-ci.org/datproject/dat-registry-api.svg?branch=master\" alt=\"Build Status\"></a></p>\n<h2 id=\"features\"><a href=\"#features\" class=\"anchor\"></a>Features</h2><ul>\n<li>Create user accounts.</li>\n<li>Create short links for dats with user accounts.</li>\n<li>Search dats and users.</li>\n</ul>\n<h2 id=\"cli-usage\"><a href=\"#cli-usage\" class=\"anchor\"></a>CLI Usage</h2><p>Install <code>dat-registry-api</code> using npm and initialize the database:</p>\n<pre><code>npm install dat-registry-api <span class=\"hljs-comment\">--save</span>\ndat-registry-api &lt;<span class=\"hljs-built_in\">config</span>&gt;\n</code></pre><p>See a default configuration file in <code>config/config.default.js</code>.</p>\n<h2 id=\"js-usage\"><a href=\"#js-usage\" class=\"anchor\"></a>JS Usage</h2><h4 id=\"var-api-apiconfig\"><a href=\"#var-api-apiconfig\" class=\"anchor\"></a><code>var api = API(config)</code></h4><p>The API takes required configuration variables. Here&#39;s an example config. See below in the Configuration section for more details about what configuration variables can be changed.</p>\n<p><code>config.js</code></p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-string\">'data'</span>,\n  <span class=\"hljs-attr\">admins</span>: [\n    <span class=\"hljs-string\">'admin'</span>, <span class=\"hljs-string\">'pam'</span>, <span class=\"hljs-string\">'willywonka'</span>\n  ]\n  township: {\n    <span class=\"hljs-attr\">secret</span>: <span class=\"hljs-string\">'very very not secret'</span>,\n    <span class=\"hljs-attr\">db</span>: <span class=\"hljs-string\">'township.db'</span>\n  },\n  <span class=\"hljs-attr\">email</span>: {\n    <span class=\"hljs-attr\">fromEmail</span>: <span class=\"hljs-string\">'hi@example.com'</span>\n  },\n  <span class=\"hljs-attr\">db</span>: {\n    <span class=\"hljs-attr\">dialect</span>: <span class=\"hljs-string\">'sqlite3'</span>,\n    <span class=\"hljs-attr\">connection</span>: {\n      <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'sqlite.db'</span>\n    },\n    <span class=\"hljs-attr\">useNullAsDefault</span>: <span class=\"hljs-literal\">true</span>\n  },\n  <span class=\"hljs-attr\">whitelist</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">archiver</span>: {\n    <span class=\"hljs-attr\">dir</span>: <span class=\"hljs-string\">'archiver'</span>,\n    <span class=\"hljs-attr\">verifyConnection</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">timeout</span>: <span class=\"hljs-number\">3000</span>\n  }\n}\n</code></pre>\n<h4 id=\"apiclose\"><a href=\"#apiclose\" class=\"anchor\"></a>api.close()</h4><p>Destroys the underlying database connection.</p>\n<h2 id=\"example\"><a href=\"#example\" class=\"anchor\"></a>Example</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>)\n<span class=\"hljs-keyword\">var</span> Api = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-registry-api'</span>)\n<span class=\"hljs-keyword\">var</span> config = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./config'</span>)\n\n<span class=\"hljs-keyword\">var</span> api = Api(config)\n<span class=\"hljs-keyword\">var</span> router = express()\n\nrouter.post(<span class=\"hljs-string\">'/users'</span>, api.users.post)\nrouter.get(<span class=\"hljs-string\">'/users'</span>, api.users.get)\nrouter.put(<span class=\"hljs-string\">'/users'</span>, api.users.put)\nrouter.put(<span class=\"hljs-string\">'/users/suspend'</span>, api.users.suspend)\nrouter.delete(<span class=\"hljs-string\">'/users'</span>, api.users.delete)\n\nrouter.get(<span class=\"hljs-string\">'/dats'</span>, api.dats.get)\nrouter.post(<span class=\"hljs-string\">'/dats'</span>, api.dats.post)\nrouter.put(<span class=\"hljs-string\">'/dats'</span>, api.dats.put)\nrouter.delete(<span class=\"hljs-string\">'/dats'</span>, api.dats.delete)\n\nrouter.post(<span class=\"hljs-string\">'/register'</span>, api.auth.register)\nrouter.post(<span class=\"hljs-string\">'/login'</span>, api.auth.login)\nrouter.post(<span class=\"hljs-string\">'/password-reset'</span>, api.auth.passwordReset)\nrouter.post(<span class=\"hljs-string\">'/password-reset-confirm'</span>, api.auth.passwordResetConfirm)\n</code></pre>\n<h2 id=\"configuration\"><a href=\"#configuration\" class=\"anchor\"></a>Configuration</h2><h3 id=\"admins\"><a href=\"#admins\" class=\"anchor\"></a>Admins</h3><p>Admins can add, modify, and delete dats that they do not own. Admins can also delete and modify other users. You can specify a list of admin users by their usernames in the configuration.</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-string\">\"admins\"</span>: [<span class=\"hljs-string\">\"admin\"</span>, <span class=\"hljs-string\">\"pam\"</span>, <span class=\"hljs-string\">\"willywonka\"</span>]\n}\n</code></pre>\n<h3 id=\"secret-key\"><a href=\"#secret-key\" class=\"anchor\"></a>Secret key</h3><p>Each deployment should have a different secret key. You want to set the secret key for generating password hashes and salts.</p>\n<pre><code class=\"lang-js\">{\n   <span class=\"hljs-attr\">township</span>: <span class=\"hljs-string\">'&lt;SECRET_KEY&gt;'</span>\n}\n</code></pre>\n<h3 id=\"default-location-of-account-and-sqlite-databases\"><a href=\"#default-location-of-account-and-sqlite-databases\" class=\"anchor\"></a>Default location of account and sqlite databases</h3><p>Specify where you want data for the app (databases and also by default the archiver) to be located. By default, all the data will be stored in <code>./data</code>. If you&#39;d like the data to be stored somewhere else, add a <code>data</code> key:</p>\n<pre><code>{\n  <span class=\"hljs-attribute\">data</span>: <span class=\"hljs-string\">'/path/to/my/data'</span>\n}\n</code></pre><h3 id=\"closed-beta\"><a href=\"#closed-beta\" class=\"anchor\"></a>Closed beta</h3><p>To create a closed beta, add the <code>whitelist</code> key with the path to a newline-delimited list of emails allowed to sign up. Default value <code>false</code> allows anyone to register an account.</p>\n<pre><code>{\n  <span class=\"hljs-attribute\">whitelist</span>: <span class=\"hljs-string\">'/path/to/my/list/of/folks.txt'</span>\n}\n</code></pre><p><code>folks.txt</code> should have a list of valid emails, each separated by a new line character. For example:</p>\n<pre><code>pamlikesdata<span class=\"hljs-meta\">@gmail</span>.com\nrobert.singletown<span class=\"hljs-meta\">@sbcglobal</span>.netw\n</code></pre><h3 id=\"location-of-cached-and-archived-dat-data\"><a href=\"#location-of-cached-and-archived-dat-data\" class=\"anchor\"></a>Location of cached and archived dat data</h3><p>You can set the location where dat data is cached on the filesystem. By default it is stored in the <code>data</code> directory (above), in the <code>archiver</code> subdirectory. You can change this by using the <code>archiver</code> key:</p>\n<pre><code>{\n  <span class=\"hljs-attribute\">archiver</span>: <span class=\"hljs-string\">'/mnt1/bigdisk/archiver-data'</span>\n}\n</code></pre><h3 id=\"mixpanel-account\"><a href=\"#mixpanel-account\" class=\"anchor\"></a>Mixpanel account</h3><p>The site will report basic information to Mixpanel if you have an account. It will by default use the environment variable <code>MIXPANEL_KEY</code>.</p>\n<p>This can also be set in the configuration file by using the <code>mixpanel</code> key:</p>\n<pre><code>{\n  <span class=\"hljs-attribute\">mixpanel</span>: <span class=\"hljs-string\">'&lt;my-api-key-here&gt;'</span>\n}\n</code></pre><h3 id=\"advanced-password-security\"><a href=\"#advanced-password-security\" class=\"anchor\"></a>Advanced password security</h3><p>If you want to have advanced security for generating passwords, you can use ES512 keys, for example. Generate the keys using <a href=\"https://connect2id.com/products/nimbus-jose-jwt/openssl-key-generation\">this tutorial</a> and set their locations in the configuration file.</p>\n<pre><code>{\n  <span class=\"hljs-attribute\">township</span>: {\n    db: <span class=\"hljs-string\">'township.db'</span>,\n    publicKey: path.<span class=\"hljs-built_in\">join</span>(<span class=\"hljs-string\">'secrets'</span>, <span class=\"hljs-string\">'ecdsa-p521-public.pem'</span>),\n    privateKey: path.<span class=\"hljs-built_in\">join</span>(<span class=\"hljs-string\">'secrets'</span>, <span class=\"hljs-string\">'ecdsa-p521-private.pem'</span>),\n    algorithm: <span class=\"hljs-string\">'ES512'</span>\n  }\n}\n</code></pre>","dat-registry-client":"<h1 id=\"dat-registry\"><a href=\"#dat-registry\" class=\"anchor\"></a>dat-registry</h1><p>API Registry Client for publishing dats. By default, the client is capable of registering, login, and publishing to datproject.org.</p>\n<p><code>dat-registry</code> allows users to interact with and publish dats to your registry via the <code>dat</code> command line. Supporting this module on your registry will allow a user to login and publish:</p>\n<pre><code>dat login custom-dat-registry<span class=\"hljs-selector-class\">.com</span>\ndat publish\n</code></pre><h2 id=\"installation\"><a href=\"#installation\" class=\"anchor\"></a>Installation</h2><pre><code>npm <span class=\"hljs-keyword\">install</span> dat-registry\n</code></pre><h3 id=\"quick-example\"><a href=\"#quick-example\" class=\"anchor\"></a>Quick Example</h3><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> Registry = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-registry'</span>)\n\n<span class=\"hljs-keyword\">var</span> registry = Registry()\n\nregistry.login({<span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">'karissa'</span>, <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">'my passw0rd r0cks!'</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  registry.dats.create({\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'animal-names'</span>,\n    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">'dat://378d23adf22df'</span>,\n    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Animal Names'</span>,\n    <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">'I did a study on animals for a very important Nature study, here are the spreadsheets with raw animals in them.'</span>\n  }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, resp, json</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n    <span class=\"hljs-keyword\">if</span> (resp.statusCode === <span class=\"hljs-number\">400</span>) <span class=\"hljs-built_in\">console</span>.error(data.message)\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Published successfully!'</span>)\n    <span class=\"hljs-comment\">// Created a nickname for a dat at `https://datproject.org/karissa/animal-names`</span>\n  })\n})\n</code></pre>\n<h3 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h3><h4 id=\"var-registry-registryopts\"><a href=\"#var-registry-registryopts\" class=\"anchor\"></a><code>var registry = Registry([opts])</code></h4><ul>\n<li><code>opts.server</code>: the registry server. Default is <code>https://datproject.org</code></li>\n<li><code>opts.apiPath</code>: registery server API path, e.g. we use <code>/api/v1</code> for datproject.org. This will overwrite default township routes to use server + apiPath.</li>\n<li><code>opts.config.filename</code>: defaults to <code>~.datrc</code> instead of township defaults.</li>\n</ul>\n<p>Other options are passed to <a href=\"https://github.com/township/township-client\">township-client</a>, these include:</p>\n<pre><code class=\"lang-js\">opts = {\n  <span class=\"hljs-attr\">config</span>: {\n    <span class=\"hljs-attr\">filepath</span>: <span class=\"hljs-string\">'~/.townshiprc'</span> <span class=\"hljs-comment\">// specify a full config file path </span>\n  },\n  <span class=\"hljs-attr\">routes</span>: { <span class=\"hljs-comment\">// routes for ALL township servers used by client</span>\n    register: <span class=\"hljs-string\">'/register'</span>,\n    <span class=\"hljs-attr\">login</span>: <span class=\"hljs-string\">'/login'</span>,\n    <span class=\"hljs-attr\">updatePassword</span>: <span class=\"hljs-string\">'/updatepassword'</span>\n  }\n}\n</code></pre>\n<h4 id=\"registrylogindata-cb\"><a href=\"#registrylogindata-cb\" class=\"anchor\"></a><code>registry.login(data, cb)</code></h4><p>Requires <code>data.email</code> and <code>data.password</code>.</p>\n<h4 id=\"registryregisterdata-cb\"><a href=\"#registryregisterdata-cb\" class=\"anchor\"></a><code>registry.register(data, cb)</code></h4><p>Requires <code>data.username</code>, <code>data.email</code>, and <code>data.password</code>.</p>\n<h4 id=\"registrylogoutcb\"><a href=\"#registrylogoutcb\" class=\"anchor\"></a><code>registry.logout(cb)</code></h4><p>Will callback with logout success or failure.</p>\n<h4 id=\"var-user-registrywhoamiopts\"><a href=\"#var-user-registrywhoamiopts\" class=\"anchor\"></a><code>var user = registry.whoami([opts])</code></h4><p>Returns user object with currently logged in user. See <code>township-client</code> for options.</p>\n<h3 id=\"crud-api\"><a href=\"#crud-api\" class=\"anchor\"></a>CRUD API</h3><h4 id=\"registrydatscreatedata-cb\"><a href=\"#registrydatscreatedata-cb\" class=\"anchor\"></a><code>registry.dats.create(data, cb)</code></h4><p>Must be logged in. Requires a unique <code>data.name</code> and unique <code>data.url</code>. Dat will be immediately available on the <code>/:username/:name</code>.</p>\n<p>Accepts also any fields in a <code>dat.json</code> file.</p>\n<h4 id=\"registrydatsgetdata-cb\"><a href=\"#registrydatsgetdata-cb\" class=\"anchor\"></a><code>registry.dats.get([data], cb)</code></h4><p>Returns all dats that match the given (optional) querystrings.</p>\n<h4 id=\"registrydatsupdatedata-cb\"><a href=\"#registrydatsupdatedata-cb\" class=\"anchor\"></a><code>registry.dats.update(data, cb)</code></h4><h4 id=\"registrydatsdeletedata-cb\"><a href=\"#registrydatsdeletedata-cb\" class=\"anchor\"></a><code>registry.dats.delete(data, cb)</code></h4><h4 id=\"registryusersgetdata-cb\"><a href=\"#registryusersgetdata-cb\" class=\"anchor\"></a><code>registry.users.get([data], cb)</code></h4><h4 id=\"registryusersupdatedata-cb\"><a href=\"#registryusersupdatedata-cb\" class=\"anchor\"></a><code>registry.users.update(data, cb)</code></h4><h4 id=\"registryusersdeletedata-cb\"><a href=\"#registryusersdeletedata-cb\" class=\"anchor\"></a><code>registry.users.delete(data, cb)</code></h4>","multidat":"<h1 id=\"multidat-stability01\"><a href=\"#multidat-stability01\" class=\"anchor\"></a>multidat <a href=\"https://nodejs.org/api/documentation.html#documentation_stability_index\"><img src=\"https://img.shields.io/badge/stability-experimental-orange.svg?style=flat-square\" alt=\"stability\"></a></h1><p><a href=\"https://npmjs.org/package/multidat\"><img src=\"https://img.shields.io/npm/v/multidat.svg?style=flat-square\" alt=\"npm version\"></a> <a href=\"https://travis-ci.org/datproject/multidat\"><img src=\"https://img.shields.io/travis/datproject/multidat/master.svg?style=flat-square\" alt=\"build status\"></a> <a href=\"https://codecov.io/github/datproject/multidat\"><img src=\"https://img.shields.io/codecov/c/github/datproject/multidat/master.svg?style=flat-square\" alt=\"test coverage\"></a>\n<a href=\"https://npmjs.org/package/multidat\"><img src=\"http://img.shields.io/npm/dm/multidat.svg?style=flat-square\" alt=\"downloads\"></a> <a href=\"https://github.com/feross/standard\"><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\" alt=\"js-standard-style\"></a></p>\n<p>Manage multiple <a href=\"https://github.com/datproject/dat\">dat</a> instances in multiple locations.</p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> Multidat = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'multidat'</span>)\n<span class=\"hljs-keyword\">var</span> toilet = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'toiletdb'</span>)\n\n<span class=\"hljs-keyword\">var</span> db = toilet(<span class=\"hljs-string\">'/tmp/dat'</span>)\nMultidat(db, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, multidat</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n\n  multidat.create(opts, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, dat</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n\n    <span class=\"hljs-keyword\">var</span> dats = multidat.list()\n    <span class=\"hljs-built_in\">console</span>.log(dats)\n\n    multidat.close(dat.archive.key, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n      <span class=\"hljs-built_in\">console</span>.log()\n    })\n  })\n})\n</code></pre>\n<h2 id=\"error-handling\"><a href=\"#error-handling\" class=\"anchor\"></a>Error handling</h2><p>If there is an error initializing a dat, instead of the whole process failing, an error object with attached <code>.dir</code> property will be pushed into the list of dats instead. That means when consuming <code>multidat.list()</code>, you should check for errors:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> dats = multidat.list()\ndats.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">dat</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (dat <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Error</span>) {\n    <span class=\"hljs-keyword\">var</span> err = dat\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'failed to initialize dat in %s: %s'</span>, err.dir, err.message)\n  }\n})\n</code></pre>\n<p>This way you can decide for yourself whether an individual initialization failure should cause the whole process to fail or not.</p>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"multidatdb-opts-callbackerr-multidat\"><a href=\"#multidatdb-opts-callbackerr-multidat\" class=\"anchor\"></a>Multidat(db, opts, callback(err, multidat))</h3><p>Creat a new Multidat instance. Takes a <code>toiletdb</code> instance and a callback.</p>\n<p>Options:</p>\n<ul>\n<li><code>Dat</code>: Use provided dat factory instead of <a href=\"https://github.com/datproject/dat-node\">dat-node</a></li>\n</ul>\n<h3 id=\"multidatcreateopts-callbackerr-dat\"><a href=\"#multidatcreateopts-callbackerr-dat\" class=\"anchor\"></a>multidat.create(opts, callback(err, dat))</h3><p>Create a new <code>dat</code> archive.</p>\n<h3 id=\"dats-multidatlist\"><a href=\"#dats-multidatlist\" class=\"anchor\"></a>dats = multidat.list()</h3><p>List all available <code>dat</code> archives.</p>\n<h3 id=\"multidatclosekey-callbackerr\"><a href=\"#multidatclosekey-callbackerr\" class=\"anchor\"></a>multidat.close(key, callback(err))</h3><p>Close and remove a <code>dat</code> archive.</p>\n<h3 id=\"multidatreadmanifestdat-callbackerr-manifest\"><a href=\"#multidatreadmanifestdat-callbackerr-manifest\" class=\"anchor\"></a>multidat.readManifest(dat, callback(err, manifest))</h3><p>Read the <code>dat.json</code> file from the <code>dat</code> archive. This method is expected to be\ndeprecated once <code>dat</code> archives provide a built-in method to return archives.</p>\n<h2 id=\"why\"><a href=\"#why\" class=\"anchor\"></a>Why?</h2><p>This package exists to manage multiple <code>dat</code> archives in different directories.\nThe <a href=\"https://github.com/datproject/dat-node\">dat-node</a> package is mostly stateless; all state is persisted\ninto the archives themselves. This package acts as a layer on top to keep track\nof where archives are located and manage them between sessions.</p>\n<h2 id=\"when-not-to-use-this\"><a href=\"#when-not-to-use-this\" class=\"anchor\"></a>When not to use this</h2><p>If you&#39;re running a server, it&#39;s usually enough to run\n<a href=\"https://github.com/mafintosh/hypercore-archiver\">mafintosh/hypercore-archiver</a>\nwhich is more consistent and simpler. If you&#39;re building a tool that only needs\nto manage a single dat archive at the time it&#39;s recommended to use\n<a href=\"https://github.com/datproject/dat-node\">datproject/dat-node</a> instead.</p>\n<h2 id=\"see-also\"><a href=\"#see-also\" class=\"anchor\"></a>See Also</h2><ul>\n<li><a href=\"https://github.com/datproject/dat-node\">datproject/dat-node</a></li>\n<li><a href=\"https://github.com/mafintosh/hyperdrive\">mafintosh/hyperdrive</a></li>\n<li><a href=\"https://github.com/mafintosh/hypercore-archiver\">mafintosh/hypercore-archiver</a></li>\n<li><a href=\"https://github.com/datproject/multidrive\">datproject/multidrive</a></li>\n<li><a href=\"https://github.com/juliangruber/hyperdrive-stats\">juliangruber/hyperdrive-stats</a></li>\n<li><a href=\"https://github.com/juliangruber/dat-encoding\">juliangruber/dat-encoding</a></li>\n</ul>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p><a href=\"https://tldrlegal.com/license/mit-license\">MIT</a></p>\n","multidrive":"<h1 id=\"multidrive-stability01\"><a href=\"#multidrive-stability01\" class=\"anchor\"></a>multidrive <a href=\"https://nodejs.org/api/documentation.html#documentation_stability_index\"><img src=\"https://img.shields.io/badge/stability-experimental-orange.svg?style=flat-square\" alt=\"stability\"></a></h1><p><a href=\"https://npmjs.org/package/multidrive\"><img src=\"https://img.shields.io/npm/v/multidrive.svg?style=flat-square\" alt=\"npm version\"></a> <a href=\"https://travis-ci.org/datproject/multidrive\"><img src=\"https://img.shields.io/travis/datproject/multidrive/master.svg?style=flat-square\" alt=\"build status\"></a> <a href=\"https://codecov.io/github/datproject/multidrive\"><img src=\"https://img.shields.io/codecov/c/github/datproject/multidrive/master.svg?style=flat-square\" alt=\"Test coverage\"></a>\n<a href=\"https://npmjs.org/package/multidrive\"><img src=\"http://img.shields.io/npm/dm/multidrive.svg?style=flat-square\" alt=\"downloads\"></a> <a href=\"https://github.com/feross/standard\"><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\" alt=\"js-standard-style\"></a></p>\n<p>Manage multiple hyperdrive archives located anywhere on the filesystem.</p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> hyperdrive = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive'</span>)\n<span class=\"hljs-keyword\">var</span> multidrive = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'multidrive'</span>)\n<span class=\"hljs-keyword\">var</span> toilet = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'toiletdb'</span>)\n\n<span class=\"hljs-keyword\">var</span> store = toilet(<span class=\"hljs-string\">'./data.json'</span>)\nmultidrive(store, createArchive, closeArchive, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, drive</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n\n  <span class=\"hljs-keyword\">var</span> data = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'&lt;64-bit-hex&gt;'</span> }\n  drive.create(data, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, archive</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n\n    <span class=\"hljs-keyword\">var</span> archives = drive.list()\n    <span class=\"hljs-built_in\">console</span>.log(archives)\n\n    drive.close(archive.key, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'archive deleted'</span>)\n    })\n  })\n})\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createArchive</span> (<span class=\"hljs-params\">data, done</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> db = level(<span class=\"hljs-string\">'/tmp/'</span> + <span class=\"hljs-string\">'multidrive-'</span> + data.key)\n  <span class=\"hljs-keyword\">var</span> drive = hyperdrive(db)\n  <span class=\"hljs-keyword\">var</span> archive = drive.createArchive(data.key)\n  done(<span class=\"hljs-literal\">null</span>, archive)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">closeArchive</span> (<span class=\"hljs-params\">archive, done</span>) </span>{\n  archive.close()\n  done()\n}\n</code></pre>\n<h2 id=\"error-handling\"><a href=\"#error-handling\" class=\"anchor\"></a>Error handling</h2><p>If there is an error initializing a drive, instead of the whole process failing, an error object with attached <code>.data</code> property will be pushed into the list of archives instead. That means when consuming multidrive.list(), you should check for errors:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> archives = multidrive.list()\narchives.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">archive</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (archive <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Error</span>) {\n    <span class=\"hljs-keyword\">var</span> err = archive\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'failed to initialize archive with %j: %s'</span>, err.data, err.message)\n  }\n})\n</code></pre>\n<p>This way you can decide for yourself whether an individual initialization failure should cause the whole process to fail or not.</p>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"multidrivestore-createarchive-closearchive-callbackerr-drive\"><a href=\"#multidrivestore-createarchive-closearchive-callbackerr-drive\" class=\"anchor\"></a>multidrive(store, createArchive, closeArchive, callback(err, drive))</h3><p>Create a new multidrive instance. <code>db</code> should be a valid <code>toiletdb</code> instance.\n<code>createArchive</code> is the function used to create new Hyperdrive archives.\n<code>callback</code> is called after initialization. <code>closeArchive</code> is called when\n<code>drive.remove()</code> is called.</p>\n<p><code>createArchive</code> has an api of <code>createArchive(data, done)</code> where <code>data</code> is passed in\nby <code>drive.create()</code> and <code>done(err, archive)</code> expects a valid archive.</p>\n<h3 id=\"archives-drivelist\"><a href=\"#archives-drivelist\" class=\"anchor\"></a>archives = drive.list()</h3><p>List all <code>archives</code> in the <code>multidrive</code>.</p>\n<h3 id=\"drivecreatedata-callbackerr-drive-duplicate\"><a href=\"#drivecreatedata-callbackerr-drive-duplicate\" class=\"anchor\"></a>drive.create(data, callback(err, drive[, duplicate]))</h3><p>Create a new Hyperdrive archive. <code>data</code> is passed into <code>createArchive</code>.\nIf an archive with the same key already exists, returns that instead and sets\n<code>duplicate</code> to <code>true</code>.</p>\n<h3 id=\"driveclosekey-callbackerr\"><a href=\"#driveclosekey-callbackerr\" class=\"anchor\"></a>drive.close(key, callback(err))</h3><p>Remove an archive by its public key. Calls <code>closeArchive()</code></p>\n<h2 id=\"installation\"><a href=\"#installation\" class=\"anchor\"></a>Installation</h2><pre><code class=\"lang-sh\">$ npm install multidrive\n</code></pre>\n<h2 id=\"see-also\"><a href=\"#see-also\" class=\"anchor\"></a>See Also</h2><ul>\n<li><a href=\"https://github.com/karissa/hyperdiscovery\">https://github.com/karissa/hyperdiscovery</a></li>\n<li><a href=\"https://github.com/mafintosh/hyperdrive\">https://github.com/mafintosh/hyperdrive</a></li>\n<li><a href=\"https://github.com/Level/level\">https://github.com/Level/level</a></li>\n<li><a href=\"https://github.com/maxogden/toiletdb\">https://github.com/maxogden/toiletdb</a></li>\n</ul>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p><a href=\"https://tldrlegal.com/license/mit-license\">MIT</a></p>\n","dat-pki":"<h1 id=\"dat-public-key-infrastucture\"><a href=\"#dat-public-key-infrastucture\" class=\"anchor\"></a>dat public key infrastucture</h1><blockquote>\n<p><em>Note:</em> This project is still very much an experimental work in progress. The examples below arent reliable.</p>\n</blockquote>\n<p>Create decentralized user accounts with contacts, groups, private file sharing, encrypted messaging, and more.</p>\n<p><em>what it does</em></p>\n<ul>\n<li>create your own user and group identities which can span multiple devices</li>\n<li>privately share specific dats with specific people and groups over p2p using cryptography</li>\n<li>send messages with certain contacts over dat</li>\n<li>publicly share dats</li>\n</ul>\n<p><a href=\"https://github.com/jayrbolton/dat-pki/wiki/How-it-Works\"><em>how it works</em></a></p>\n<h1 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>api</h1><h2 id=\"setupoptions-callback\"><a href=\"#setupoptions-callback\" class=\"anchor\"></a>setup(options, callback)</h2><p>Create a new user. The <code>options</code> object can have these properties:</p>\n<ul>\n<li>path: path you want to use to save your data (eg <code>~/.dat</code>)</li>\n<li>name: name to use for this user</li>\n<li>pass: passphrase for generating keypair</li>\n</ul>\n<p><code>callback</code> receives arguments for <code>callback(err, user)</code>, where <code>user</code> is an object with these properties:</p>\n<ul>\n<li>name</li>\n<li>path</li>\n<li>pubKey</li>\n<li>privKey</li>\n<li>id: a unique id that identifies this user across devices in the network (public)</li>\n<li>publicDat: a dat object for the user&#39;s public dat</li>\n<li>link: dat link of the users public dat that others can use to add them as a contact</li>\n</ul>\n<p>The <code>publicDat</code> will be opened and joined on the network, so you&#39;ll want to manually <code>user.publicDat.close()</code> when you&#39;re done</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> {setup} = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-pki'</span>)\n\nsetup({\n  <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'~/.dat'</span>\n, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'bob ross'</span>\n, <span class=\"hljs-attr\">passphrase</span>: <span class=\"hljs-string\">'123 abc'</span>\n}, (err, user) =&gt; {\n  <span class=\"hljs-comment\">// do stuff with the user</span>\n})\n</code></pre>\n<h2 id=\"loadpath-passphrase-callback\"><a href=\"#loadpath-passphrase-callback\" class=\"anchor\"></a>load(path, passphrase, callback)</h2><p>This will load an existing user from a directory with a passphrase, and unencrypt their stuff.</p>\n<p>The callback takes <code>callback(err, user)</code>. The user object in the second argument to this callback is the exact same object as the one from <code>setup</code></p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> {load} = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-pki'</span>)\n\nload(<span class=\"hljs-string\">'~/.dat'</span>, <span class=\"hljs-string\">'123 abc'</span>, (err, user) =&gt; {\n  <span class=\"hljs-comment\">// do stuff with the user</span>\n})\n</code></pre>\n<h2 id=\"createdatuser-datname-callback\"><a href=\"#createdatuser-datname-callback\" class=\"anchor\"></a>createDat(user, datName, callback)</h2><p>Initialize a new dat for a user. The callback receives <code>callback(err, dat)</code> where <code>dat</code> is the dat object. The new dat has not joined the network or imported files, so you&#39;ll want to call <code>dat.joinNetwork()</code>, <code>dat.importFiles()</code>, and anything else you want. The <code>datName</code> needs to be unique for this user.</p>\n<p>Also see makeDatPublic and shareDat.</p>\n<h2 id=\"makedatpublicuser-datname-callback\"><a href=\"#makedatpublicuser-datname-callback\" class=\"anchor\"></a>makeDatPublic(user, datName, callback)</h2><p>Make a dat fully public, so users that follow you can download its files. The callback receives <code>callback(err, dat)</code> where <code>dat</code> is the dat object</p>\n<h2 id=\"makedatprivateuser-datname-callback\"><a href=\"#makedatprivateuser-datname-callback\" class=\"anchor\"></a>makeDatPrivate(user, datName, callback)</h2><p>Remove a dat link from your public dat, so others cannot automatically see the dat. Changes the dat key.</p>\n<h2 id=\"sharedatuser-datname-accessids-callback\"><a href=\"#sharedatuser-datname-accessids-callback\" class=\"anchor\"></a>shareDat(user, datName, accessIDs, callback)</h2><p>Share a dat with one or more contacts and/or groups by their ids. callback gets <code>callback(err, dat)</code></p>\n<h2 id=\"unsharedatuser-datname-accessids-callback\"><a href=\"#unsharedatuser-datname-accessids-callback\" class=\"anchor\"></a>unshareDat(user, datName, accessIds, callback)</h2><p>Unshare a dat from certain contacts/groups. Changes the dat link.</p>\n<h2 id=\"followusera-userblink-callback\"><a href=\"#followusera-userblink-callback\" class=\"anchor\"></a>follow(userA, userBLink, callback)</h2><p>Follow another user, which allows userA to read any public data from userB, such as their public dat links.</p>\n<p>The callback receives <code>callback(err, userB)</code>, where <code>userB</code> is an object with these properties:</p>\n<ul>\n<li>id</li>\n<li>name</li>\n<li>pubKey</li>\n<li>path</li>\n<li>link</li>\n</ul>\n<h2 id=\"handshakeusera-userblink-callback\"><a href=\"#handshakeusera-userblink-callback\" class=\"anchor\"></a>handshake(userA, userBLink, callback)</h2><p>To create a 1:1 private data channel with another user, they both perform a handshake process. If the handshake succeeds, the two users are now &quot;contacts&quot; and can send private data to each other, including links to private dats.</p>\n<p>This will create another dat, called the &quot;relationship dat&quot;. That dat&#39;s address will get encrypted using userB&#39;s pubkey and placed in userA&#39;s public handshakes directory for userB to check using <code>checkHandshake</code>.</p>\n<p>If both userA and userB successfully handshake with each other, the contact is created. Both users will have separate &quot;relationship dats&quot; for pushing data to the other user.</p>\n<p>Also see checkHandshake</p>\n<p>The callback receives <code>callback(err, userB, relDat)</code>. The third arg, <code>relDat</code>, is a dat object for the relationship dat. It is opened automatically</p>\n<h2 id=\"checkhandshakeusera-userb-cb\"><a href=\"#checkhandshakeusera-userb-cb\" class=\"anchor\"></a>checkHandshake(userA, userB, cb)</h2><p><code>userA</code> wants to check the status of a handshake that <code>userB</code> initiated. If <code>userB</code> has a handshake file in their public dat, then <code>userA</code> can decrypt it and start downloading from the relationship dat.</p>\n<p>The callback receives <code>callback(err, userB, relFromDat)</code>. If the check fails, then err will be non-null. The third arg, <code>relFromDat</code>, is the dat that userA has created to download updates from userA. It is opened automatically.</p>\n<h2 id=\"creategroupuser-groupname-callback\"><a href=\"#creategroupuser-groupname-callback\" class=\"anchor\"></a>createGroup(user, groupName, callback)</h2><p>Create a group identified by a name. The callback receives <code>callback(err, groupID)</code>. </p>\n<h2 id=\"adduserstogroupuser-groupid-userids-callback\"><a href=\"#adduserstogroupuser-groupid-userids-callback\" class=\"anchor\"></a>addUsersToGroup(user, groupID, [userIDs], callback)</h2><p>Add one or more users in your contacts to a group. The users must all be contacts with relationships established using handshake and checkHandshake.</p>\n<h2 id=\"removeusersfromgroupuser-groupid-userids-callback\"><a href=\"#removeusersfromgroupuser-groupid-userids-callback\" class=\"anchor\"></a>removeUsersFromGroup(user, groupID, [userIDs], callback)</h2><p>Remove one or more users from a group</p>\n","injestdb":"<h1 id=\"injestdb\"><a href=\"#injestdb\" class=\"anchor\"></a>InjestDB</h1><p>A peer-to-peer database for dat:// applications. <a href=\"#how-it-works\">How it works</a></p>\n<h4 id=\"example\"><a href=\"#example\" class=\"anchor\"></a>Example</h4><p>Setup a database for social profiles, which can publish status updates and like other users&#39; posts.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> Injest = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'injestdb'</span>)\n<span class=\"hljs-keyword\">var</span> db = <span class=\"hljs-keyword\">new</span> Injest(<span class=\"hljs-string\">'social-profiles'</span>)\ndb.schema({\n  <span class=\"hljs-attr\">version</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">broadcasts</span>: {\n    <span class=\"hljs-attr\">primaryKey</span>: <span class=\"hljs-string\">'createdAt'</span>,\n    <span class=\"hljs-attr\">index</span>: [\n      <span class=\"hljs-string\">'createdAt'</span>,\n      <span class=\"hljs-string\">'_origin+createdAt'</span> <span class=\"hljs-comment\">// compound index. '_origin' is an autogenerated attribute which represets the URL of the authoring archive</span>\n    ],\n    <span class=\"hljs-attr\">validator</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">record</span> =&gt;</span> {\n      assert(<span class=\"hljs-keyword\">typeof</span> record.text === <span class=\"hljs-string\">'string'</span>)\n      assert(<span class=\"hljs-keyword\">typeof</span> record.createdAt === <span class=\"hljs-string\">'number'</span>)\n      <span class=\"hljs-keyword\">return</span> record\n    }\n  },\n  <span class=\"hljs-attr\">likes</span>: {\n    <span class=\"hljs-attr\">primaryKey</span>: <span class=\"hljs-string\">'createdAt'</span>,\n    <span class=\"hljs-attr\">index</span>: <span class=\"hljs-string\">'targetUrl'</span>,\n    <span class=\"hljs-attr\">validator</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">record</span> =&gt;</span> {\n      assert(<span class=\"hljs-keyword\">typeof</span> record.targetUrl === <span class=\"hljs-string\">'string'</span>)\n      <span class=\"hljs-keyword\">return</span> record\n    }\n  },\n  <span class=\"hljs-attr\">profile</span>: {\n    <span class=\"hljs-attr\">singular</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">index</span>: <span class=\"hljs-string\">'name'</span>,\n    <span class=\"hljs-attr\">validator</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">record</span> =&gt;</span> {\n      assert(<span class=\"hljs-keyword\">typeof</span> record.name === <span class=\"hljs-string\">'string'</span>)\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">name</span>: record.name,\n        <span class=\"hljs-attr\">description</span>: isString(record.description) ? record.description : <span class=\"hljs-string\">''</span>,\n        <span class=\"hljs-attr\">avatarUrl</span>: isString(record.avatarUrl) ? record.avatarUrl : <span class=\"hljs-string\">''</span>\n      }\n    }\n  }\n})\n</code></pre>\n<p>Next we add source archives to be ingested (added ot the dataset). The source archives are persisted in IndexedDB, so this doesn&#39;t have to be done every run.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">await</span> db.addArchives([alicesUrl, bobsUrl, carlasDatArchive], {<span class=\"hljs-attr\">prepare</span>: <span class=\"hljs-literal\">true</span>})\n</code></pre>\n<p>Now we can begin querying the database for records.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// get the first profile record where name === 'bob'</span>\n<span class=\"hljs-keyword\">var</span> bobProfile = <span class=\"hljs-keyword\">await</span> db.profiles.get(<span class=\"hljs-string\">'name'</span>, <span class=\"hljs-string\">'bob'</span>)\n\n<span class=\"hljs-comment\">// get all profile records which match this query</span>\n<span class=\"hljs-keyword\">var</span> bobProfiles = <span class=\"hljs-keyword\">await</span> db.profiles\n  .where(<span class=\"hljs-string\">'name'</span>)\n  .equalsIgnoreCase(<span class=\"hljs-string\">'bob'</span>)\n  .toArray()\n\n<span class=\"hljs-comment\">// get the 30 latest broadcasts from all source archives</span>\n<span class=\"hljs-keyword\">var</span> recentBroadcasts = <span class=\"hljs-keyword\">await</span> db.broadcasts\n  .orderBy(<span class=\"hljs-string\">'createdAt'</span>)\n  .reverse() <span class=\"hljs-comment\">// most recent first</span>\n  .limit(<span class=\"hljs-number\">30</span>)\n  .toArray()\n\n<span class=\"hljs-comment\">// get the 30 latest broadcasts by a specific archive (bob)</span>\n<span class=\"hljs-comment\">// - this uses a compound index to filter by origin, and then sort by createdAt</span>\n<span class=\"hljs-keyword\">var</span> bobsRecentBroadcasts = <span class=\"hljs-keyword\">await</span> db.broadcasts\n  .where(<span class=\"hljs-string\">'_origin+createdAt'</span>)\n  .between([bobsUrl, <span class=\"hljs-string\">''</span>], [bobsUrl, <span class=\"hljs-string\">'\\uffff'</span>])\n  .reverse() <span class=\"hljs-comment\">// most recent first</span>\n  .limit(<span class=\"hljs-number\">30</span>)\n  .toArray()\n\n<span class=\"hljs-comment\">// get the # of likes for a broadcast</span>\n<span class=\"hljs-keyword\">var</span> numLikes = <span class=\"hljs-keyword\">await</span> db.likes\n  .where(<span class=\"hljs-string\">'targetUrl'</span>).equals(bobsRecentBroadcasts[<span class=\"hljs-number\">0</span>]._url) <span class=\"hljs-comment\">// _url is an autogenerated attribute which represents the URL of the record</span>\n  .count()\n</code></pre>\n<p>We can also use Injest to create, modify, and delete records (and their matching files).</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// update bob's name</span>\n<span class=\"hljs-keyword\">await</span> db.profiles.update(bobsUrl, {<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'robert'</span>})\n\n<span class=\"hljs-comment\">// publish a new broadcast for bob</span>\n<span class=\"hljs-keyword\">var</span> broadcastUrl = <span class=\"hljs-keyword\">await</span> db.broadcasts.add(bobsUrl, {\n  <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'Hello!'</span>,\n  <span class=\"hljs-attr\">createdAt</span>: <span class=\"hljs-built_in\">Date</span>.now()\n})\n\n<span class=\"hljs-comment\">// modify the broadcast</span>\n<span class=\"hljs-keyword\">await</span> db.broadcasts.update(broadcastUrl, {<span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'Hello world!'</span>})\n\n<span class=\"hljs-comment\">// like the broadcast</span>\n<span class=\"hljs-keyword\">await</span> db.likes.add(bobsUrl, {\n  <span class=\"hljs-attr\">targetUrl</span>: broadcastUrl,\n  <span class=\"hljs-attr\">createdAt</span>: <span class=\"hljs-built_in\">Date</span>.now()\n})\n\n<span class=\"hljs-comment\">// delete the broadcast</span>\n<span class=\"hljs-keyword\">await</span> db.broadcasts.delete(broadcastUrl)\n\n<span class=\"hljs-comment\">// delete all likes on the broadcast (that we control)</span>\n<span class=\"hljs-keyword\">await</span> db.likes\n  .where({<span class=\"hljs-attr\">targetUrl</span>: broadcastUrl})\n  .delete()\n</code></pre>\n<h2 id=\"todos\"><a href=\"#todos\" class=\"anchor\"></a>TODOs</h2><p>Injest is still in development.</p>\n<ul>\n<li>[x] Indexer</li>\n<li>[x] Core query engine</li>\n<li>[x] Persisted tables and table reindex on schema change</li>\n<li>[x] Mutation methods (add/update/delete)</li>\n<li>[ ] Events</li>\n<li>[x] Multikey indexes</li>\n<li>[ ] Validation: filename must match primaryKey on non-singular tables</li>\n<li>[ ] Support for .or() queries</li>\n<li>[ ] Complete documentation</li>\n</ul>\n<h2 id=\"api-quick-reference\"><a href=\"#api-quick-reference\" class=\"anchor\"></a>API quick reference</h2><pre><code class=\"lang-js\">var db = new InjestDB(name)\nInjestDB.list() =&gt; Promise&lt;Void&gt;\nInjestDB.delete(name) =&gt; Promise&lt;Void&gt;\ndb.open() =&gt; Promise&lt;Void&gt;\ndb.close() =&gt; Promise&lt;Void&gt;\ndb.schema(Object) =&gt; Promise&lt;Void&gt;\ndb.addArchive(url|DatArchive, {prepare: Boolean}) =&gt; Promise&lt;Void&gt;\ndb.addArchives(Array&lt;url|DatArchive&gt;, {prepare: Boolean}) =&gt; Promise&lt;Void&gt;\ndb.removeArchive(url|DatArchive) =&gt; Promise&lt;Void&gt;\ndb.prepareArchive(url|DatArchive)\ndb.listArchives() =&gt; Promise&lt;url&gt;\ndb 'open' ()\ndb 'open-failed' (error)\ndb 'versionchange' ()\ndb 'indexes-updated' (archive, archiveVersion)\n\ndb.{table} =&gt; InjestTable\nInjestTable#add(archive, record) =&gt; Promise&lt;url&gt;\nInjestTable#count() =&gt; Promise&lt;Number&gt;\nInjestTable#delete(url) =&gt; Promise&lt;url&gt;\nInjestTable#each(Function) =&gt; Promise&lt;Void&gt;\nInjestTable#filter(Function) =&gt; InjestRecordset\nInjestTable#get(url) =&gt; Promise&lt;Object&gt;\nInjestTable#get(archive) =&gt; Promise&lt;Object&gt;\nInjestTable#get(archive, key) =&gt; Promise&lt;Object&gt;\nInjestTable#get(index, value) =&gt; Promise&lt;Object&gt;\nInjestTable#isRecordFile(String) =&gt; Boolean\nInjestTable#limit(Number) =&gt; InjestRecordset\nInjestTable#listRecordFiles(Archive) =&gt; Promise&lt;Object&gt;\nInjestTable#name =&gt; String\nInjestTable#offset(Number) =&gt; InjestRecordset\nInjestTable#orderBy(index) =&gt; InjestRecordset\nInjestTable#put(url, record) =&gt; Promise&lt;url&gt;\nInjestTable#reverse() =&gt; InjestRecordset\nInjestTable#schema =&gt; Object\nInjestTable#toArray() =&gt; Promise&lt;Array&gt;\nInjestTable#toCollection() =&gt; InjestRecordset\nInjestTable#update(record) =&gt; Promise&lt;Number&gt;\nInjestTable#update(url, updates) =&gt; Promise&lt;Number&gt;\nInjestTable#update(archive, updates) =&gt; Promise&lt;Number&gt;\nInjestTable#update(archive, key, updates) =&gt; Promise&lt;Number&gt;\nInjestTable#upsert(url, record) =&gt; Promise&lt;Void | url&gt;\nInjestTable#upsert(archive, record) =&gt; Promise&lt;Void | url&gt;\nInjestTable#where(index) =&gt; InjestWhereClause\nInjestTable 'index-updated' (archive, archiveVersion)\n\nInjestWhereClause#above(lowerBound) =&gt; InjestRecordset\nInjestWhereClause#aboveOrEqual(lowerBound) =&gt; InjestRecordset\nInjestWhereClause#anyOf(Array|...args) =&gt; InjestRecordset\nInjestWhereClause#anyOfIgnoreCase(Array|...args) =&gt; InjestRecordset\nInjestWhereClause#below(upperBound) =&gt; InjestRecordset\nInjestWhereClause#belowOrEqual(upperBound) =&gt; InjestRecordset\nInjestWhereClause#between(lowerBound, upperBound, {includeUpper, includeLower}) =&gt; InjestRecordset\nInjestWhereClause#equals(value) =&gt; InjestRecordset\nInjestWhereClause#equalsIgnoreCase(value) =&gt; InjestRecordset\nInjestWhereClause#noneOf(Array|...args) =&gt; InjestRecordset\nInjestWhereClause#notEqual(value) =&gt; InjestRecordset\nInjestWhereClause#startsWith(value) =&gt; InjestRecordset\nInjestWhereClause#startsWithAnyOf(Array|...args) =&gt; InjestRecordset\nInjestWhereClause#startsWithAnyOfIgnoreCase(Array|...args) =&gt; InjestRecordset\nInjestWhereClause#startsWithIgnoreCase(value) =&gt; InjestRecordset\n\nInjestRecordset#clone() =&gt; InjestRecordset\nInjestRecordset#count() =&gt; Promise&lt;Number&gt;\nInjestRecordset#delete() =&gt; Promise&lt;Number&gt;\nInjestRecordset#distinct() =&gt; InjestRecordset\nInjestRecordset#each(Function) =&gt; Promise&lt;Void&gt;\nInjestRecordset#eachKey(Function) =&gt; Promise&lt;Void&gt;\nInjestRecordset#eachUrl(Function) =&gt; Promise&lt;Void&gt;\nInjestRecordset#filter(Function) =&gt; InjestRecordset\nInjestRecordset#first() =&gt; Promise&lt;Object&gt;\nInjestRecordset#keys() =&gt; Promise&lt;Array&lt;String&gt;&gt;\nInjestRecordset#last() =&gt; Promise&lt;Object&gt;\nInjestRecordset#limit(Number) =&gt; InjestRecordset\nInjestRecordset#offset(Number) =&gt; InjestRecordset\nInjestRecordset#or(index) =&gt; InjestWhereClause\nInjestRecordset#put(Object) =&gt; Promise&lt;Number&gt;\nInjestRecordset#urls() =&gt; Promise&lt;Array&lt;String&gt;&gt;\nInjestRecordset#reverse() =&gt; InjestRecordset\nInjestRecordset#toArray() =&gt; Promise&lt;Array&lt;Object&gt;&gt;\nInjestRecordset#uniqueKeys() =&gt; Promise&lt;Array&lt;String&gt;&gt;\nInjestRecordset#until(Function) =&gt; InjestRecordset\nInjestRecordset#update(Object|Function) =&gt; Promise&lt;Number&gt;\nInjestRecordset#where(index) =&gt; InjestWhereClause\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"dbschemadefinition\"><a href=\"#dbschemadefinition\" class=\"anchor\"></a>db.schema(definition)</h3><pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">version</span>: <span class=\"hljs-built_in\">Number</span>, <span class=\"hljs-comment\">// the version # of the schema, should increment by 1 on each change</span>\n\n  [tableName]: {\n    <span class=\"hljs-comment\">// is there only one record-file per archive?</span>\n    <span class=\"hljs-comment\">// - if true, will look for the file at `/${tableName}.json`</span>\n    <span class=\"hljs-comment\">// - if false, will look for files at `/${tableName}/*.json`</span>\n    singular: <span class=\"hljs-built_in\">Boolean</span>,\n\n    <span class=\"hljs-comment\">// attribute to build filenames for newly-created records</span>\n    <span class=\"hljs-comment\">// ie `/${tableName}/${record[primaryKey]}.json`</span>\n    <span class=\"hljs-comment\">// only required if !singular</span>\n    primaryKey: <span class=\"hljs-built_in\">String</span>, \n\n    <span class=\"hljs-comment\">// specify which fields are indexed for querying</span>\n    <span class=\"hljs-comment\">// each is a keypath, see https://www.w3.org/TR/IndexedDB/#dfn-key-path</span>\n    <span class=\"hljs-comment\">// can specify compound indexes with a + separator in the keypath</span>\n    <span class=\"hljs-comment\">// eg one index               - index: 'firstName' </span>\n    <span class=\"hljs-comment\">// eg two indexes             - index: ['firstName', 'lastName']</span>\n    <span class=\"hljs-comment\">// eg add a compound index    - index: ['firstName', 'lastName', 'firstName+lastName']</span>\n    <span class=\"hljs-comment\">// eg index an array's values - index: ['firstName', '*favoriteFruits']</span>\n    index: <span class=\"hljs-built_in\">String</span>|<span class=\"hljs-built_in\">Array</span>&lt;<span class=\"hljs-built_in\">String</span>&gt;,\n\n    <span class=\"hljs-comment\">// validator &amp; sanitizer</span>\n    <span class=\"hljs-comment\">// takes the ingested file (must be valid json)</span>\n    <span class=\"hljs-comment\">// returns the record to be stored</span>\n    <span class=\"hljs-comment\">// returns falsy or throws to not store the record</span>\n    validator: <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-built_in\">Object</span>) =&gt; <span class=\"hljs-built_in\">Object</span>\n  }\n}\n</code></pre>\n<h2 id=\"how-it-works\"><a href=\"#how-it-works\" class=\"anchor\"></a>How it works</h2><p>InjestDB abstracts over the <a href=\"https://beakerbrowser.com/docs/apis/dat.html\">DatArchive API</a> to provide a simple database-like interface. It is based heavily on <a href=\"https://github.com/dfahlander/Dexie.js\">Dexie.js</a> and built using IndexedDB.</p>\n<p>Injest works by scanning a set of source archives for files that match a path pattern. Those files are indexed (&quot;ingested&quot;) so that they can be queried easily. Injest also provides a simple interface for adding, editing, and removing records on the archives that the local user owns.</p>\n<p>Injest sits on top of Dat archives. It duplicates the data it&#39;s handling into IndexedDB, and that duplicated data acts as a throwaway cache -- it can be reconstructed at any time from the Dat archives.</p>\n<p>Injest treats individual files in the Dat archive as individual records in a table. As a result, there&#39;s a direct mapping for each table to a folder of .json files. For instance, if you had a &#39;tweets&#39; table, it would map to the <code>/tweets/*.json</code> files. Injest&#39;s mutators, such as put or add or update, simply write those json files. Injest&#39;s readers &amp; query-ers, such as get() or where(), read from the IndexedDB cache.</p>\n<p>Injest watches its source archives for changes to the json files. When they change, it reads them and updates IndexedDB, thus the query results stay up-to-date. The flow is, roughly: <code>put() -&gt; archive/tweets/12345.json -&gt; indexer -&gt; indexeddb -&gt; get()</code>.</p>\n","hyperdrive-http":"<h1 id=\"hyperdrive-http\"><a href=\"#hyperdrive-http\" class=\"anchor\"></a>Hyperdrive Http</h1><p>Serve a <a href=\"https://github.com/mafintosh/hyperdrive\">hyperdrive</a> archive over HTTP. For an example of use, see <a href=\"https://github.com/juliangruber/dat.haus\">dat.haus</a>.</p>\n<p><a href=\"https://travis-ci.org/joehand/hyperdrive-http\"><img src=\"https://api.travis-ci.org/joehand/hyperdrive-http.svg\" alt=\"Travis\"></a></p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>Hyperdrive-http returns a function to call when you receive a http request:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> server = http.createServer()\nserver.on(<span class=\"hljs-string\">'request'</span>, hyperdriveHttp(archive))\n</code></pre>\n<h3 id=\"setup\"><a href=\"#setup\" class=\"anchor\"></a>Setup</h3><p>To use hyperdrive-http you will need to:</p>\n<ul>\n<li>Create your own http server</li>\n<li>Setup your hyperdrive archive</li>\n<li>For remote archives, connect to the swarm</li>\n</ul>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><p>Hyperdrive works with many archives/feeds or a single archive.</p>\n<h4 id=\"options\"><a href=\"#options\" class=\"anchor\"></a>Options</h4><ul>\n<li><code>exposeHeaders</code> - If set to <code>true</code>, hyperdrive-http will add custom <code>Hyperdrive-</code> HTTP headers to directory listing requests (default: <code>false</code>):<pre><code class=\"lang-http\"><span class=\"hljs-attribute\">Hyperdrive-Key</span>: de2a51bbaf8a5545eff82c999f15e1fd29637b3f16db94633cb6e2e0c324f833\n<span class=\"hljs-attribute\">Hyperdrive-Version</span>: 4\n</code></pre>\n</li>\n<li><code>live</code> - If set to <code>true</code> will reload a directly listing if the archive receives updates.</li>\n<li><code>footer</code> - Add a footer to your HTML page. Automatically adds archive version number to footer.</li>\n</ul>\n<h3 id=\"url-format\"><a href=\"#url-format\" class=\"anchor\"></a>URL Format</h3><p>Hyperdrive-http responds to any URL with a specific format. If the URL does cannot be parsed, it will return a 404.</p>\n<ul>\n<li>Get archive listing: <code>http://archive-example.com/</code></li>\n<li>Get file from archive: <code>http://archive-example.com/filename.pdf</code></li>\n</ul>\n<p>If a directory in the archive contains an <code>index.html</code> page that file is returned instead of the directory listing.</p>\n<h2 id=\"cli\"><a href=\"#cli\" class=\"anchor\"></a>CLI</h2><p>There is also a CLI that can be used for demo + testing. Pass it a dat link or a path to an existing dat folder:</p>\n<pre><code><span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">cli</span>.js <span class=\"hljs-tag\">&lt;dat-key&gt;</span>\n<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">cli</span>.js /path/do/existing/dat\n</code></pre>","dathttpd":"<h1 id=\"dathttpd\"><a href=\"#dathttpd\" class=\"anchor\"></a>dathttpd</h1><p>A Web server for <a href=\"https://datprotocol.com\">Dat</a> and HTTPS.</p>\n<p>Dat sites are hosted at public keys, which are the equivalent of IP addresses in the P2P network. The pubkeys are ugly, though! Wouldn&#39;t it be nice if your dats could have nice DNS shortnames, and also rehost over HTTPS for people still on legacy browsers?</p>\n<p>dathttpd is for you!</p>\n<ul>\n<li>Serve sites over Dat at <code>dat://{subdomain}.{yourdomain.com}</code>.</li>\n<li>Rehost those sites over <code>https://{subdomain}.{yourdomain.com}</code>.</li>\n<li>Get TLS certs automatically with Let&#39;s Encrypt.</li>\n<li>(Optionally) Auto-redirect from https -&gt; dat.</li>\n<li><a href=\"#metrics-dashboard\">Metrics dashboard</a></li>\n</ul>\n<h2 id=\"getting-started\"><a href=\"#getting-started\" class=\"anchor\"></a>Getting started</h2><h3 id=\"start-hosting-your-website-with-dat\"><a href=\"#start-hosting-your-website-with-dat\" class=\"anchor\"></a>Start hosting your website with Dat</h3><p>You can use the <a href=\"https://www.npmjs.com/package/dat\">Dat CLI</a> or the <a href=\"https://github.com/beakerbrowser/beaker\">Beaker\nBrowser</a>.</p>\n<p>After uploading your site to a Dat archive, identify the archive&#39;s URL. You&#39;ll\nneed this for your dathttpd config.</p>\n<h3 id=\"update-your-dns-records\"><a href=\"#update-your-dns-records\" class=\"anchor\"></a>Update your DNS records</h3><p>Create an A record that points to your server&#39;s IP address.</p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>On your server, create a config file at <code>~/.dathttpd.yml</code>:</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">letsencrypt:</span>\n<span class=\"hljs-attr\">  email:</span> <span class=\"hljs-string\">'bob@foo.com'</span>\n<span class=\"hljs-attr\">  agreeTos:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">sites:</span>\n  <span class=\"hljs-string\">dat.local:</span>\n<span class=\"hljs-attr\">    url:</span> <span class=\"hljs-attr\">dat://1f968afe867f06b0d344c11efc23591c7f8c5fb3b4ac938d6000f330f6ee2a03/</span>\n<span class=\"hljs-attr\">    datOnly:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-string\">datprotocol.dat.local:</span>\n<span class=\"hljs-attr\">    url:</span> <span class=\"hljs-attr\">dat://ff34725120b2f3c5bd5028e4f61d14a45a22af48a7b12126d5d588becde88a93/</span>\n<span class=\"hljs-attr\">    datOnly:</span> <span class=\"hljs-literal\">true</span>\n</code></pre>\n<p>Then run</p>\n<pre><code># install build dependencies\nsudo apt-get install libtool m4 automake\n\n# install dathttpd (https:<span class=\"hljs-comment\">//docs.npmjs.com/getting-started/fixing-npm-permissions)</span>\nnpm install -g dathttpd\n\n# give node perms to use ports <span class=\"hljs-number\">80</span> and <span class=\"hljs-number\">443</span>\nsudo setcap cap_net_bind_service=+ep `readlink -f \\`which node\\``\n\n# start dathttpd\ndathttpd\n</code></pre><p>To daemonify the server in Debian-based systems, stop the dathttpd process and\nthen run:</p>\n<pre><code><span class=\"hljs-comment\"># install a helper tool</span>\nnpm install -g<span class=\"hljs-built_in\"> add-to-systemd\n</span>\n<span class=\"hljs-comment\"># create a systemd entry for dathttpd</span>\nsudo<span class=\"hljs-built_in\"> add-to-systemd </span>dathttpd --user $(whoami) $(which dathttpd)\n\n<span class=\"hljs-comment\"># start the dathttpd service</span>\nsudo<span class=\"hljs-keyword\"> system</span>ctl start dathttpd\n</code></pre><h2 id=\"config\"><a href=\"#config\" class=\"anchor\"></a>Config</h2><p>Here&#39;s an example <code>~/.dathttpd.yml</code>:</p>\n<pre><code class=\"lang-yaml\"><span class=\"hljs-attr\">ports:</span>\n<span class=\"hljs-attr\">  http:</span> <span class=\"hljs-number\">80</span>\n<span class=\"hljs-attr\">  https:</span> <span class=\"hljs-number\">443</span>\n<span class=\"hljs-attr\">  metric:</span> <span class=\"hljs-number\">8089</span>\n<span class=\"hljs-attr\">directory:</span> <span class=\"hljs-string\">~/.dathttpd</span>\n<span class=\"hljs-attr\">letsencrypt:</span>\n<span class=\"hljs-attr\">  email:</span> <span class=\"hljs-string\">'bob@foo.com'</span>\n<span class=\"hljs-attr\">  agreeTos:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">sites:</span>\n  <span class=\"hljs-string\">dat.local:</span>\n<span class=\"hljs-attr\">    url:</span> <span class=\"hljs-attr\">dat://1f968afe867f06b0d344c11efc23591c7f8c5fb3b4ac938d6000f330f6ee2a03/</span>\n<span class=\"hljs-attr\">    datOnly:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-string\">datprotocol.dat.local:</span>\n<span class=\"hljs-attr\">    url:</span> <span class=\"hljs-attr\">dat://ff34725120b2f3c5bd5028e4f61d14a45a22af48a7b12126d5d588becde88a93/</span>\n<span class=\"hljs-attr\">    datOnly:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-string\">proxy.local:</span>\n<span class=\"hljs-attr\">    proxy:</span> <span class=\"hljs-attr\">http://localhost:8080</span>\n</code></pre>\n<h3 id=\"portshttp\"><a href=\"#portshttp\" class=\"anchor\"></a>ports.http</h3><p>The port to serve the HTTP sites. Defaults to 80. (Optional)</p>\n<p>HTTP automatically redirects to HTTPS.</p>\n<h3 id=\"portshttps\"><a href=\"#portshttps\" class=\"anchor\"></a>ports.https</h3><p>The port to serve the HTTPS sites. Defaults to 443. (Optional)</p>\n<h3 id=\"portsmetric\"><a href=\"#portsmetric\" class=\"anchor\"></a>ports.metric</h3><p>The port to serve the prometheus metrics. Defaults to 8089. (Optional)</p>\n<h3 id=\"directory\"><a href=\"#directory\" class=\"anchor\"></a>directory</h3><p>The directory where dathttpd will store your Dat archive&#39;s files. Defaults to ~/.dathttpd. (Optional)</p>\n<h3 id=\"letsencrypt\"><a href=\"#letsencrypt\" class=\"anchor\"></a>letsencrypt</h3><p>Settings for LetsEncrypt. If false or unset, HTTPS will be disabled.</p>\n<h3 id=\"letsencryptemail\"><a href=\"#letsencryptemail\" class=\"anchor\"></a>letsencrypt.email</h3><p>The email to send Lets Encrypt? notices to. (Required)</p>\n<h3 id=\"letsencryptagreetos\"><a href=\"#letsencryptagreetos\" class=\"anchor\"></a>letsencrypt.agreeTos</h3><p>Do you agree to the terms of service of Lets Encrypt? (Required, must be true)</p>\n<h3 id=\"sites\"><a href=\"#sites\" class=\"anchor\"></a>sites</h3><p>A listing of the sites to host. Each site is labeled (keyed) by the hostname you want the site to serve at.</p>\n<p>Sites can either host dat archives or proxy to a URL. To make a dat-site, set the <code>url</code> attribute. To make a proxy, set the <code>proxy</code> attribute.</p>\n<p>You&#39;ll need to configure the DNS entry for the hostname to point to the server. For instance, if using <code>site.myhostname.com</code>, you&#39;ll need a DNS entry pointing <code>site.myhostname.com</code> to the server.</p>\n<h3 id=\"siteshostnameurl\"><a href=\"#siteshostnameurl\" class=\"anchor\"></a>sites.{hostname}.url</h3><p>The Dat URL of the site to host.</p>\n<h3 id=\"siteshostnameproxy\"><a href=\"#siteshostnameproxy\" class=\"anchor\"></a>sites.{hostname}.proxy</h3><p>The HTTP URL of the site to proxy.</p>\n<h3 id=\"siteshostnamedatonly\"><a href=\"#siteshostnamedatonly\" class=\"anchor\"></a>sites.{hostname}.datOnly</h3><p>If true, rather than serve the assets over HTTPS, dathttpd will serve a redirect to the dat:// location. Defaults to false. (Optional)</p>\n<h2 id=\"env-vars\"><a href=\"#env-vars\" class=\"anchor\"></a>Env Vars</h2><ul>\n<li><code>DATHTTPD_CONFIG=cfg_file_path</code> specify an alternative path to the config than <code>~/.dathttpd.yml</code></li>\n<li><code>NODE_ENV=debug|staging|production</code> set to <code>debug</code> or <code>staging</code> to use the lets-encrypt testing servers.</li>\n</ul>\n<h2 id=\"metrics-dashboard\"><a href=\"#metrics-dashboard\" class=\"anchor\"></a>Metrics Dashboard</h2><p>DatHTTPD has built-in support for <a href=\"https://prometheus.io\">Prometheus</a>, which can be visualized by <a href=\"http://grafana.org/\">Grafana</a>.</p>\n<p><img src=\"./grafana-screenshot.png\" alt=\"./grafana-screenshot.png\"></p>\n<p>DatHTTPD exposes its metrics at port 8089. Prometheus periodically scrapes the metrics, and stores them in a database. Grafana provides a nice dashboard. It&#39;s a little daunting at first, but setup should be relatively painless.</p>\n<p>Follow these steps:</p>\n<ol>\n<li><a href=\"https://prometheus.io/download/\">Install Prometheus</a> on your server.</li>\n<li><a href=\"http://grafana.org/download/\">Install Grafana</a> on your server.</li>\n<li>Update the <code>prometheus.yml</code> config.</li>\n<li>Start prometheus and grafana.</li>\n<li>Login to grafana.</li>\n<li>Add prometheus as a data source to grafana. (It should be running at localhost:9090.)</li>\n<li>Import <a href=\"./grafana-dashboard.json\">this grafana dashboard</a>.</li>\n</ol>\n<p>Your prometheus.yml config should include have the scrape_configs set like this:</p>\n<pre><code class=\"lang-yml\"><span class=\"hljs-attr\">scrape_configs:</span>\n<span class=\"hljs-attr\">  - job_name:</span> <span class=\"hljs-string\">'prometheus'</span>\n<span class=\"hljs-attr\">    static_configs:</span>\n<span class=\"hljs-attr\">      - targets:</span> <span class=\"hljs-string\">['localhost:9090']</span>\n<span class=\"hljs-attr\">  - job_name:</span> <span class=\"hljs-string\">'dathttpd'</span>\n<span class=\"hljs-attr\">    static_configs:</span>\n<span class=\"hljs-attr\">      - targets:</span> <span class=\"hljs-string\">['localhost:8089']</span>\n</code></pre>\n<p>Report any issues you have along the way!</p>\n","dat-dns":"<h1 id=\"dat-dns\"><a href=\"#dat-dns\" class=\"anchor\"></a>dat-dns</h1><p>Issue DNS lookups for Dat archives using HTTPS requests to the target host. Keeps an in-memory cache of recent lookups.</p>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> datDns = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-dns'</span>)()\n\n<span class=\"hljs-comment\">// resolve a name: pass the hostname by itself</span>\ndatDns.resolveName(<span class=\"hljs-string\">'foo.com'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, key</span>) </span>{ ... })\ndatDns.resolveName(<span class=\"hljs-string\">'foo.com'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> ...)\n\n<span class=\"hljs-comment\">// dont use cached 'misses'</span>\ndatDns.resolveName(<span class=\"hljs-string\">'foo.com'</span>, {<span class=\"hljs-attr\">ignoreCachedMiss</span>: <span class=\"hljs-literal\">true</span>})\n\n<span class=\"hljs-comment\">// dont use the cache at all</span>\ndatDns.resolveName(<span class=\"hljs-string\">'foo.com'</span>, {<span class=\"hljs-attr\">ignoreCache</span>: <span class=\"hljs-literal\">true</span>})\n\n<span class=\"hljs-comment\">// list all entries in the cache</span>\ndatDns.listCache()\n\n<span class=\"hljs-comment\">// clear the cache</span>\ndatDns.flushCache()\n</code></pre>\n<h2 id=\"spec\"><a href=\"#spec\" class=\"anchor\"></a>Spec</h2><p><a href=\"https://github.com/beakerbrowser/beaker/wiki/Authenticated-Dat-URLs-and-HTTPS-to-Dat-Discovery\">In detail.</a></p>\n<p>Place a file at <code>/.well-known/dat</code> with the following schema:</p>\n<pre><code>{dat-url}\nTTL={<span class=\"hljs-selector-tag\">time</span> <span class=\"hljs-keyword\">in</span> seconds}\n</code></pre><p>TTL is optional and will default to <code>3600</code> (one hour). If set to <code>0</code>, the entry is not cached.</p>\n<h3 id=\"dat-name-resolution\"><a href=\"#dat-name-resolution\" class=\"anchor\"></a>Dat-name Resolution</h3><p>Resolution of a site at <code>dat://hostname</code> will occur with the following process:</p>\n<ul>\n<li>Browser checks its dat names cache. If a non-expired entry is found, return with the entry.</li>\n<li>Browser issues a GET request to <code>https://hostname/.well-known/dat</code>.</li>\n<li>If the server responds with a <code>404 Not Found</code> status, store a null entry in the cache with a TTL of <code>3600</code> and return a failed lookup.</li>\n<li>If the server responds with anything other than a <code>200 OK</code> status, return a failed lookup.</li>\n<li>If the server responds with a malformed file, return a failed lookup.</li>\n<li>If the response includes no TTL, set to default <code>3600</code>.</li>\n<li>If the response includes a non-zero TTL, store the entry in the dat-name cache.</li>\n<li>Return the entry.</li>\n</ul>\n","dat-link-resolve":"<h1 id=\"dat-link-resolve\"><a href=\"#dat-link-resolve\" class=\"anchor\"></a>dat-link-resolve</h1><p>resolve urls, links to a dat key using common methods</p>\n<p><a href=\"https://www.npmjs.com/package/dat-link-resolve\"><img src=\"https://img.shields.io/npm/v/dat-link-resolve.svg?style=flat-square\" alt=\"npm\"></a>\n<a href=\"https://travis-ci.org/joehand/dat-link-resolve\"><img src=\"https://img.shields.io/travis/joehand/dat-link-resolve.svg?style=flat-square\" alt=\"travis\"></a>\n<a href=\"http://npm.im/standard\"><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\" alt=\"standard\"></a></p>\n<h3 id=\"supports\"><a href=\"#supports\" class=\"anchor\"></a>Supports</h3><ul>\n<li>Common dat key representations (<code>dat://</code>, etc.)</li>\n<li>URLs with keys in them (<code>datproject.org/6161616161616161616161616161616161616161616161616161616161616161</code>)</li>\n<li><code>hyperdrive-key</code> or <code>dat-key</code> headers</li>\n<li>Url to JSON http request that returns <code>{key: &lt;dat-key&gt;}</code></li>\n</ul>\n<h2 id=\"install\"><a href=\"#install\" class=\"anchor\"></a>Install</h2><pre><code>npm <span class=\"hljs-keyword\">install</span> dat-<span class=\"hljs-keyword\">link</span>-resolve\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> datResolve = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-link-resolve'</span>)\n\ndatResolve(link, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, key</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'found key'</span>, key)\n})\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"datresolvelink-callbackerr-key\"><a href=\"#datresolvelink-callbackerr-key\" class=\"anchor\"></a><code>datResolve(link, callback(err, key))</code></h3><p>Link can be string or buffer.</p>\n<p>Resolution order:</p>\n<ol>\n<li>Validate buffers or any strings with 64 character hashes in them via <a href=\"https://github.com/juliangruber/dat-encoding\">dat-encoding</a></li>\n<li>Check headers in http request</li>\n<li>Check JSON request response for <code>key</code></li>\n</ol>\n<h2 id=\"contributing\"><a href=\"#contributing\" class=\"anchor\"></a>Contributing</h2><p>Contributions welcome! Please read the <a href=\"CONTRIBUTING.md\">contributing guidelines</a> first.</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p><a href=\"LICENSE.md\">MIT</a></p>\n","parse-dat-url":"<h1 id=\"parse-dat-url\"><a href=\"#parse-dat-url\" class=\"anchor\"></a>parse-dat-url</h1><p>Node url.parse updated to support versioned dat URLs.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> parse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'parse-dat-url'</span>)\n\nparse(<span class=\"hljs-string\">'dat://584faa05d394190ab1a3f0240607f9bf2b7e2bd9968830a11cf77db0cea36a21+v1.0.0/path/to/file.txt'</span>)\n<span class=\"hljs-comment\">/* =&gt; {\n  protocol: 'dat:',\n  slashes: true,\n  auth: null,\n  host: '584faa05d394190ab1a3f0240607f9bf2b7e2bd9968830a11cf77db0cea36a21',\n  port: null,\n  hostname: '584faa05d394190ab1a3f0240607f9bf2b7e2bd9968830a11cf77db0cea36a21',\n  hash: null,\n  search: null,\n  query: null,\n  pathname: '/path/to/file.txt',\n  path: '/path/to/file.txt',\n  href: 'dat://584faa05d394190ab1a3f0240607f9bf2b7e2bd9968830a11cf77db0cea36a21+v1.0.0/path/to/file.txt',\n  version: 'v1.0.0'\n}*/</span>\n</code></pre>\n","dat-encoding":"<h1 id=\"dat-encoding\"><a href=\"#dat-encoding\" class=\"anchor\"></a>dat-encoding</h1><p><a href=\"http://dat-data.com/\">Dat</a>&#39;s way of encoding and decoding dat links.</p>\n<p><a href=\"https://travis-ci.org/juliangruber/dat-encoding\"><img src=\"https://travis-ci.org/juliangruber/dat-encoding.svg?branch=master\" alt=\"Build Status\"></a></p>\n<h2 id=\"example\"><a href=\"#example\" class=\"anchor\"></a>Example</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> encoding = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-encoding'</span>)\n\n<span class=\"hljs-keyword\">var</span> link = <span class=\"hljs-string\">'6161616161616161616161616161616161616161616161616161616161616161'</span>\n<span class=\"hljs-keyword\">var</span> buf = encoding.decode(link)\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'%s -&gt; %s'</span>, link, buf)\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'%s -&gt; %s'</span>, buf, encoding.encode(buf))\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"encodebuf\"><a href=\"#encodebuf\" class=\"anchor\"></a>.encode(buf)</h3><h3 id=\"tostrbuf\"><a href=\"#tostrbuf\" class=\"anchor\"></a>.toStr(buf)</h3><p>Encode <code>buf</code> into a hex string. Throws if <code>buf</code> isn&#39;t 32 bytes of length.</p>\n<p>If <code>buf</code> is already a string, checks if it&#39;s valid and returns it.</p>\n<h3 id=\"decodestr\"><a href=\"#decodestr\" class=\"anchor\"></a>.decode(str)</h3><h3 id=\"tobufstr\"><a href=\"#tobufstr\" class=\"anchor\"></a>.toBuf(str)</h3><p>Decode <code>str</code> into its binary representation. Also supports <code>dat://</code> and <code>dat.com/</code> links. Throws if the raw link isn&#39;t 64 bytes of base64.</p>\n<p>If <code>str</code> is already a buffer, checks if it&#39;s valid and returns it.</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","dat-log":"<h1 id=\"dat-log\"><a href=\"#dat-log\" class=\"anchor\"></a>dat-log</h1><p>view history of a dat in the CLI</p>\n<p><a href=\"https://www.npmjs.com/package/dat-log\"><img src=\"https://img.shields.io/npm/v/dat-log.svg?style=flat-square\" alt=\"npm\"></a>\n<a href=\"https://travis-ci.org/joehand/dat-log\"><img src=\"https://img.shields.io/travis/joehand/dat-log.svg?style=flat-square\" alt=\"travis\"></a>\n<a href=\"http://npm.im/standard\"><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\" alt=\"standard\"></a></p>\n<p><code>dat-log</code> prints all changes, the file versions, and information about the dat:</p>\n<pre><code>❯ <span class=\"hljs-selector-tag\">dat-log</span> <span class=\"hljs-selector-tag\">dat</span>:<span class=\"hljs-comment\">//64375abb733a62fa301b1f124427e825d292a6d3ba25a26c9d4303a7987bec65</span>\n<span class=\"hljs-selector-tag\">1</span> <span class=\"hljs-selector-attr\">[put]</span> / <span class=\"hljs-selector-tag\">0</span> <span class=\"hljs-selector-tag\">B</span> (<span class=\"hljs-number\">0</span> blocks)\n<span class=\"hljs-selector-tag\">2</span> <span class=\"hljs-selector-attr\">[put]</span> /<span class=\"hljs-selector-tag\">README</span> <span class=\"hljs-selector-tag\">175</span> <span class=\"hljs-selector-tag\">B</span> (<span class=\"hljs-number\">1</span> block)\n<span class=\"hljs-selector-tag\">3</span> <span class=\"hljs-selector-attr\">[put]</span> /<span class=\"hljs-selector-tag\">dat</span><span class=\"hljs-selector-class\">.json</span> <span class=\"hljs-selector-tag\">309</span> <span class=\"hljs-selector-tag\">B</span> (<span class=\"hljs-number\">1</span> block)\n<span class=\"hljs-selector-tag\">4</span> <span class=\"hljs-selector-attr\">[put]</span> /<span class=\"hljs-selector-tag\">far-manzanar</span><span class=\"hljs-selector-class\">.csv</span> <span class=\"hljs-selector-tag\">2</span><span class=\"hljs-selector-class\">.0</span> <span class=\"hljs-selector-tag\">MB</span> (<span class=\"hljs-number\">31</span> blocks)\n<span class=\"hljs-selector-tag\">5</span> <span class=\"hljs-selector-attr\">[put]</span> /<span class=\"hljs-selector-tag\">far-minidoka</span><span class=\"hljs-selector-class\">.csv</span> <span class=\"hljs-selector-tag\">2</span><span class=\"hljs-selector-class\">.1</span> <span class=\"hljs-selector-tag\">MB</span> (<span class=\"hljs-number\">33</span> blocks)\n<span class=\"hljs-selector-tag\">6</span> <span class=\"hljs-selector-attr\">[put]</span> /<span class=\"hljs-selector-tag\">far-poston</span><span class=\"hljs-selector-class\">.csv</span> <span class=\"hljs-selector-tag\">3</span><span class=\"hljs-selector-class\">.6</span> <span class=\"hljs-selector-tag\">MB</span> (<span class=\"hljs-number\">55</span> blocks)\n<span class=\"hljs-selector-tag\">7</span> <span class=\"hljs-selector-attr\">[put]</span> /<span class=\"hljs-selector-tag\">wra-master</span><span class=\"hljs-selector-class\">.csv</span> <span class=\"hljs-selector-tag\">73</span> <span class=\"hljs-selector-tag\">MB</span> (<span class=\"hljs-number\">1111</span> blocks)\n\n<span class=\"hljs-selector-tag\">Log</span> <span class=\"hljs-selector-tag\">synced</span> <span class=\"hljs-selector-tag\">with</span> <span class=\"hljs-selector-tag\">network</span>\n\n<span class=\"hljs-selector-tag\">Archive</span> <span class=\"hljs-selector-tag\">has</span> <span class=\"hljs-selector-tag\">7</span> <span class=\"hljs-selector-tag\">changes</span> (<span class=\"hljs-attribute\">puts</span>: +<span class=\"hljs-number\">7</span>, <span class=\"hljs-attribute\">dels</span>: -<span class=\"hljs-number\">0</span>)\n<span class=\"hljs-selector-tag\">Current</span> <span class=\"hljs-selector-tag\">Size</span>: <span class=\"hljs-selector-tag\">80</span> <span class=\"hljs-selector-tag\">MB</span>\n<span class=\"hljs-selector-tag\">Total</span> <span class=\"hljs-selector-tag\">Size</span>:\n<span class=\"hljs-selector-tag\">-</span> <span class=\"hljs-selector-tag\">Metadata</span> <span class=\"hljs-selector-tag\">436</span> <span class=\"hljs-selector-tag\">B</span>\n<span class=\"hljs-selector-tag\">-</span> <span class=\"hljs-selector-tag\">Content</span> <span class=\"hljs-selector-tag\">80</span> <span class=\"hljs-selector-tag\">MB</span>\n<span class=\"hljs-selector-tag\">Blocks</span>:\n<span class=\"hljs-selector-tag\">-</span> <span class=\"hljs-selector-tag\">Metadata</span> <span class=\"hljs-selector-tag\">8</span>\n<span class=\"hljs-selector-tag\">-</span> <span class=\"hljs-selector-tag\">Content</span> <span class=\"hljs-selector-tag\">1232</span>\n</code></pre><h2 id=\"install\"><a href=\"#install\" class=\"anchor\"></a>Install</h2><p>If you already have <code>dat</code> installed, run it with <code>dat log</code>!</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> -g dat-<span class=\"hljs-keyword\">log</span>\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>You can view history for a local dat (any directory with a <code>.dat</code> folder):</p>\n<pre><code class=\"lang-sh\">dat-log /my-data\n</code></pre>\n<p>Or view history for a remote dat using the dat link:</p>\n<pre><code class=\"lang-sh\">dat-log dat://64375abb733a62fa301b1f124427e825d292a6d3ba25a26c9d4303a7987bec65\n</code></pre>\n<p>Options: </p>\n<ul>\n<li><code>--live, -l</code>: Keep process running and view live history</li>\n</ul>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p><a href=\"LICENSE.md\">MIT</a></p>\n","dat-ls":"<h1 id=\"dat-ls\"><a href=\"#dat-ls\" class=\"anchor\"></a>dat-ls</h1><p>Small program that lists all the changes in a dat</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> -g dat-ls\n</code></pre><p><a href=\"http://travis-ci.org/mafintosh/dat-ls\"><img src=\"http://img.shields.io/travis/mafintosh/dat-ls.svg?style=flat\" alt=\"build status\"></a></p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code>dat-<span class=\"hljs-keyword\">ls</span> <span class=\"hljs-symbol\">&lt;dat-link&gt;</span>\n</code></pre><p>Here is an example</p>\n<pre><code>&gt; <span class=\"hljs-selector-tag\">dat-ls</span> <span class=\"hljs-selector-tag\">8a1b6864f290a1204a3fe048ced34865a24f5fdef4ce3753bab613f66636587d</span>\n\n<span class=\"hljs-selector-tag\">Dat</span> <span class=\"hljs-selector-tag\">contains</span> <span class=\"hljs-selector-tag\">6</span> <span class=\"hljs-selector-tag\">changes</span>\n\n<span class=\"hljs-selector-attr\">[put]</span>   /\n<span class=\"hljs-selector-attr\">[put]</span>  <span class=\"hljs-selector-tag\">LICENSE</span> (<span class=\"hljs-number\">1.08</span> kB, <span class=\"hljs-number\">1</span> blocks)\n<span class=\"hljs-selector-attr\">[put]</span>  <span class=\"hljs-selector-tag\">README</span><span class=\"hljs-selector-class\">.md</span> (<span class=\"hljs-number\">145</span> B, <span class=\"hljs-number\">1</span> blocks)\n<span class=\"hljs-selector-attr\">[put]</span>  <span class=\"hljs-selector-tag\">index</span><span class=\"hljs-selector-class\">.js</span> (<span class=\"hljs-number\">1.18</span> kB, <span class=\"hljs-number\">1</span> blocks)\n<span class=\"hljs-selector-attr\">[put]</span>  <span class=\"hljs-selector-tag\">package</span><span class=\"hljs-selector-class\">.json</span> (<span class=\"hljs-number\">648</span> B, <span class=\"hljs-number\">1</span> blocks)\n\n<span class=\"hljs-selector-tag\">Total</span> <span class=\"hljs-selector-tag\">content</span> <span class=\"hljs-selector-tag\">size</span>: <span class=\"hljs-selector-tag\">3</span><span class=\"hljs-selector-class\">.05</span> <span class=\"hljs-selector-tag\">kB</span>\n</code></pre><p>Per default it&#39;ll exit after reading the first snapshot of the change feed.\nTo keep listening for changes use the <code>--live</code> flag</p>\n<pre><code><span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> dat-ls 8a1b6864f290a1204a3fe048ced34865a24f5fdef4ce3753bab613f66636587d --live</span>\n</code></pre><h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","hyperhealth":"<h1 id=\"hyperhealth\"><a href=\"#hyperhealth\" class=\"anchor\"></a>hyperhealth</h1><p>Monitor the health of a hyperfeed (hypercore or hyperdrive), including peer count and peer mirror percentages. </p>\n<p>Does not actually download any data content, only downloads some of the metadata and monitors the peer feeds.</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> hyperhealth\n</code></pre><h2 id=\"example\"><a href=\"#example\" class=\"anchor\"></a>Example</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> Health = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperhealth'</span>)\n\n<span class=\"hljs-keyword\">var</span> health = Health(hypercore_feed)\n\n<span class=\"hljs-comment\">// Will fire every 1 second</span>\nsetInterval(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> data = health.get()\n  <span class=\"hljs-built_in\">console</span>.log(data.peers.length, <span class=\"hljs-string\">'total peers'</span>)\n  <span class=\"hljs-built_in\">console</span>.log(data.bytes, <span class=\"hljs-string\">'total bytes'</span>)\n  <span class=\"hljs-built_in\">console</span>.log(data.byteLength, <span class=\"hljs-string\">'total length'</span>)\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Peer 1 Downloaded '</span> + (data.peers[<span class=\"hljs-number\">0</span>].have / data.peers[<span class=\"hljs-number\">0</span>].length) * <span class=\"hljs-number\">100</span> + <span class=\"hljs-string\">'%'</span>)\n}, <span class=\"hljs-number\">1000</span>)\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"health-healthkey-or-archive-opts\"><a href=\"#health-healthkey-or-archive-opts\" class=\"anchor\"></a><code>health = Health(key-or-archive, [opts])</code></h3><p>Takes a <code>hyperdrive</code> or <code>hypercore</code> instance. Returns an object <code>health</code>.</p>\n<h3 id=\"healthget\"><a href=\"#healthget\" class=\"anchor\"></a><code>health.get()</code></h3><p>When called will return an object representing the health at a particular\nstate.</p>\n<p>Returns:</p>\n<ul>\n<li><code>bytes</code>: Number of total bytes</li>\n<li><code>blocks</code>: Number of total blocks</li>\n<li><code>peers</code>: An array of the peers containing <code>id</code>, <code>blocks</code>, and <code>have</code></li>\n</ul>\n<h3 id=\"peer-object\"><a href=\"#peer-object\" class=\"anchor\"></a>Peer object</h3><ul>\n<li><code>id</code>: The unique id of the peer, derived from <code>stream.remoteId</code></li>\n<li><code>have</code>: The number of blocks that have been downloaded</li>\n<li><code>blocks</code>: The total number of blocks</li>\n</ul>\n","hyperdrive-network-speed":"<h1 id=\"hyperdrive-network-speed\"><a href=\"#hyperdrive-network-speed\" class=\"anchor\"></a>hyperdrive-network-speed</h1><p><a href=\"https://travis-ci.org/joehand/hyperdrive-network-speed\"><img src=\"https://img.shields.io/travis/joehand/hyperdrive-network-speed.svg?style=flat-square\" alt=\"Travis\"></a> <a href=\"https://npmjs.org/package/hyperdrive-network-speed\"><img src=\"https://img.shields.io/npm/v/hyperdrive-network-speed.svg?style=flat-square\" alt=\"npm\"></a></p>\n<p>Get upload and download speeds for a hyperdrive archive.</p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> archive = hyperdrive(<span class=\"hljs-string\">'.dat'</span>)\n<span class=\"hljs-keyword\">var</span> swarm = hyperdiscovery(archive)\n<span class=\"hljs-keyword\">var</span> speed = networkSpeed(archive, {<span class=\"hljs-attr\">timeout</span>: <span class=\"hljs-number\">1000</span>})\n\nsetInterval(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'upload speed: '</span>, speed.uploadSpeed)\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'download speed: '</span>, speed.downloadSpeed)\n}, <span class=\"hljs-number\">500</span>)\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"var-speed-networkspeedarchive-opts\"><a href=\"#var-speed-networkspeedarchive-opts\" class=\"anchor\"></a><code>var speed = networkSpeed(archive, [opts])</code></h3><ul>\n<li><code>archive</code> is a hyperdrive archive.</li>\n<li><code>opts.timeout</code> is the only option. Speed will be reset to zero after the timeout.</li>\n</ul>\n<h4 id=\"speeduploadspeed\"><a href=\"#speeduploadspeed\" class=\"anchor\"></a><code>speed.uploadSpeed</code></h4><p>Archive upload speed across all peers.</p>\n<h4 id=\"speeddownloadspeed\"><a href=\"#speeddownloadspeed\" class=\"anchor\"></a><code>speed.downloadSpeed</code></h4><p>Archive download speed across all peers.</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","hyperdrive-import-files":"<h1 id=\"hyperdrive-import-files\"><a href=\"#hyperdrive-import-files\" class=\"anchor\"></a>hyperdrive-import-files</h1><p>Import the contents of a folder into a <a href=\"https://github.com/mafintosh/hyperdrive\">hyperdrive</a>, and optionally keep watching for changes.</p>\n<p><a href=\"https://travis-ci.org/juliangruber/hyperdrive-import-files\"><img src=\"https://travis-ci.org/juliangruber/hyperdrive-import-files.svg?branch=master\" alt=\"Build Status\"></a></p>\n<h2 id=\"example\"><a href=\"#example\" class=\"anchor\"></a>Example</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> hyperdrive = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive'</span>)\n<span class=\"hljs-keyword\">const</span> memdb = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'memdb'</span>)\n<span class=\"hljs-keyword\">const</span> hyperImport = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive-import-files'</span>)\n\n<span class=\"hljs-keyword\">const</span> drive = hyperdrive(memdb())\n<span class=\"hljs-keyword\">const</span> archive = drive.createArchive()\n\nhyperImport(archive, <span class=\"hljs-string\">'a/directory/'</span>, err =&gt; {\n  <span class=\"hljs-comment\">// ...</span>\n})\n</code></pre>\n<h2 id=\"installation\"><a href=\"#installation\" class=\"anchor\"></a>Installation</h2><pre><code class=\"lang-bash\">$ npm install hyperdrive-import-files\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"hyperimportarchive-target-options-cb\"><a href=\"#hyperimportarchive-target-options-cb\" class=\"anchor\"></a>hyperImport(archive, target, [, options][, cb])</h3><p>Recursively import <code>target</code>, which is the path to a directory or file,  into <code>archive</code> and call <code>cb</code> with the potential error. The import happens sequentually. Returns a <code>status</code> object.</p>\n<p>Options</p>\n<ul>\n<li><code>watch</code>: watch files for changes &amp; import on change (archive must be live)</li>\n<li><code>overwrite</code>: allow files in the archive to be overwritten (defaults to true)</li>\n<li><code>compareFileContent</code>: compare import-candidates to archive&#39;s internal copy. If false, will only compare mtime and file-size, which is faster but may reslt in false-positives. (defaults to false)</li>\n<li><code>basePath</code>: where in the archive should the files import to? (defaults to &#39;&#39;)</li>\n<li><code>ignore</code>: <a href=\"https://npmjs.org/package/anymatch\">anymatch</a> expression to ignore files</li>\n<li><code>dryRun</code>: step through the import, but don&#39;t write any files to the archive (defaults to false)</li>\n<li><code>indexing</code>: Useful if <code>target === dest</code> so hyperdrive does not rewrite the files on import.</li>\n</ul>\n<p>To enable watching, set <code>watch: true</code>, like this:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> status = hyperImport(archive, target, { <span class=\"hljs-attr\">watch</span>: <span class=\"hljs-literal\">true</span> }, err =&gt; {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'initial import done'</span>)\n})\nstatus.on(<span class=\"hljs-string\">'error'</span>, err =&gt; {\n  <span class=\"hljs-comment\">// ...</span>\n})\n<span class=\"hljs-comment\">// when you want to quit:</span>\nstatus.close()\n</code></pre>\n<p>If you want to import into a subfolder, set <code>basePath</code>:</p>\n<pre><code class=\"lang-js\">hyperImport(archive, target, { <span class=\"hljs-attr\">basePath</span>: <span class=\"hljs-string\">'/some/subdir'</span> }, err =&gt; {...})\n</code></pre>\n<h3 id=\"status\"><a href=\"#status\" class=\"anchor\"></a>status</h3><p>Events:</p>\n<ul>\n<li><code>error</code> (<code>err</code>)</li>\n<li><code>file imported</code> ({ <code>path</code>, <code>mode=updated|created</code> })</li>\n<li><code>file skipped</code> ({ <code>path</code> })</li>\n<li><code>file watch event</code> ({ <code>path</code>, <code>mode=updated|created</code> })</li>\n</ul>\n<p>Properties:</p>\n<ul>\n<li><code>fileCount</code>: The count of currently known files</li>\n<li><code>totalSize</code>: Total file size in bytes</li>\n<li><code>bytesImported</code>: Amount of bytes imported so far</li>\n</ul>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","mirror-folder":"<h1 id=\"mirror-folder\"><a href=\"#mirror-folder\" class=\"anchor\"></a>mirror-folder</h1><p><a href=\"https://www.npmjs.com/package/mirror-folder\"><img src=\"https://img.shields.io/npm/v/mirror-folder.svg?style=flat-square\" alt=\"npm\"></a>\n<a href=\"https://travis-ci.org/mafintosh/mirror-folder\"><img src=\"https://img.shields.io/travis/mafintosh/mirror-folder.svg?style=flat-square\" alt=\"travis\"></a></p>\n<p>Small module to mirror a folder to another folder.</p>\n<p>Supports watch mode as well where it will continuously watch the src folder and mirror new entries as they are created/removed.</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> mirror-folder\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> mirror = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mirror-folder'</span>)\n\nmirror(<span class=\"hljs-string\">'/Users/maf/cool-stuff'</span>, <span class=\"hljs-string\">'/Users/maf/cool-stuff-mirror'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Folder was mirrored'</span>)\n})\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h4 id=\"var-progress-mirrorsrc-dst-options-callback\"><a href=\"#var-progress-mirrorsrc-dst-options-callback\" class=\"anchor\"></a><code>var progress = mirror(src, dst, [options], [callback])</code></h4><p>Mirror <code>src</code> to <code>dst</code>. Returns a progress event emitter.</p>\n<p>Options include:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">watch</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// keep watching the src and mirror new entries,</span>\n  dereference: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// dereference any symlinks</span>\n  equals: fun, <span class=\"hljs-comment\">// optional function to determine if two entries are the same, see below</span>\n  ignore: <span class=\"hljs-literal\">null</span>, <span class=\"hljs-comment\">// optional function to ignore file paths on src or dest</span>\n  dryRun: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// emit all events but don't write/del files</span>\n}\n</code></pre>\n<p>The equals function looks like this:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">equals</span> (<span class=\"hljs-params\">src, dst, cb</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'src.name'</span>, src.name)\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'src.stat'</span>, src.stat)\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'dst.name'</span>, dst.name)\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'dst.stat'</span>, dst.stat)\n  cb(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">true</span>) <span class=\"hljs-comment\">// callback with true if they are the same or false if not</span>\n}\n</code></pre>\n<p>Per default the equals function will check if mtime is larger on the src entry or if the size is different</p>\n<p>The ignore function looks like this:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ignore</span> (<span class=\"hljs-params\">file</span>) </span>{\n  <span class=\"hljs-comment\">// ignore any files with secret in them</span>\n  <span class=\"hljs-keyword\">if</span> (file.indexOf(<span class=\"hljs-string\">'secret'</span>) &gt; <span class=\"hljs-number\">-1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n}\n</code></pre>\n<p>If you are using a custom fs module (like <a href=\"https://github.com/isaacs/node-graceful-fs\">graceful-fs</a>) you can pass that in\nwith the <code>src</code> or <code>dst</code> like this:</p>\n<pre><code class=\"lang-js\">mirror({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'/Users/maf/cool-stuff'</span>, <span class=\"hljs-attr\">fs</span>: customFs}, {<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'/Users/maf/cool-stuff-mirror'</span>, <span class=\"hljs-attr\">fs</span>: anotherFs})\n</code></pre>\n<h4 id=\"progressonpending-name-live\"><a href=\"#progressonpending-name-live\" class=\"anchor\"></a><code>progress.on(&#39;pending&#39;, {name, live})</code></h4><p>Emitted when file/dir added to pending queue.</p>\n<h4 id=\"progresspending\"><a href=\"#progresspending\" class=\"anchor\"></a><code>progress.pending</code></h4><p>Array of items pending to be processed.</p>\n<h4 id=\"progressonput-src-dst\"><a href=\"#progressonput-src-dst\" class=\"anchor\"></a><code>progress.on(&#39;put&#39;, src, dst)</code></h4><p>Emitted when a file/folder is copied from the src to the dst folder.</p>\n<h4 id=\"progressonput-data-data\"><a href=\"#progressonput-data-data\" class=\"anchor\"></a><code>progress.on(&#39;put-data&#39;, data)</code></h4><p>Emitted when a file chunk is read from the src.</p>\n<h4 id=\"progressonput-end-src-dst\"><a href=\"#progressonput-end-src-dst\" class=\"anchor\"></a><code>progress.on(&#39;put-end&#39;, src, dst)</code></h4><p>Emitted at the end of a write stream (files only).</p>\n<h4 id=\"progressondel-dst\"><a href=\"#progressondel-dst\" class=\"anchor\"></a><code>progress.on(&#39;del&#39;, dst)</code></h4><p>Emitted when a file/folder is deleted from the dst folder.</p>\n<h4 id=\"progressonignore-src-dst\"><a href=\"#progressonignore-src-dst\" class=\"anchor\"></a><code>progress.on(&#39;ignore&#39;, src, dst)</code></h4><p>Emitted when a file/folder is ignored (either src or dst).</p>\n<h4 id=\"progressonskip-src-dst\"><a href=\"#progressonskip-src-dst\" class=\"anchor\"></a><code>progress.on(&#39;skip&#39;, src, dst)</code></h4><p>Emitted when a file/folder is skipped. Either src file already is <code>equal</code> to dst file or file does not exist in either place.</p>\n<h4 id=\"progressonend\"><a href=\"#progressonend\" class=\"anchor\"></a><code>progress.on(&#39;end&#39;)</code></h4><p>Emitted when the mirror ends (not emitted in watch mode). The mirror callback is called when this event is emitted as well</p>\n<h4 id=\"progressonerror-err\"><a href=\"#progressonerror-err\" class=\"anchor\"></a><code>progress.on(&#39;error&#39;, err)</code></h4><p>Emitted when a critical error happens. If you pass a mirror callback you don&#39;t need to listen for this.</p>\n<h4 id=\"progressdestory\"><a href=\"#progressdestory\" class=\"anchor\"></a><code>progress.destory()</code></h4><p>Stop mirroring files. If using watch mode, close the file watcher.</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","hyperdrive-staging-area":"<h1 id=\"hyperdrive-staging-area\"><a href=\"#hyperdrive-staging-area\" class=\"anchor\"></a>hyperdrive-staging-area</h1><p>Staging area for local, uncommited writes that can sync to a hyperdrive. Respects <code>.datignore</code>.</p>\n<pre><code><span class=\"hljs-symbol\">npm</span> install hyperdrive-staging-<span class=\"hljs-meta\">area</span>\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>hyperdrive-staging-area provides an fs-compatible object, plus a few additional methods</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> hyperdrive = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive'</span>)\n<span class=\"hljs-keyword\">var</span> hyperstaging = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive-staging-area'</span>)\n<span class=\"hljs-keyword\">var</span> archive = hyperdrive(<span class=\"hljs-string\">'./my-first-hyperdrive-meta'</span>) <span class=\"hljs-comment\">// metadata will be stored in this folder</span>\n<span class=\"hljs-keyword\">var</span> staging = hyperstaging(archive, <span class=\"hljs-string\">'./my-first-hyperdrive'</span>) <span class=\"hljs-comment\">// content will be stored in this folder</span>\n\nstaging.writeFile(<span class=\"hljs-string\">'/hello.txt'</span>, <span class=\"hljs-string\">'world'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n\n  staging.readdir(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, list</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n    <span class=\"hljs-built_in\">console</span>.log(list) <span class=\"hljs-comment\">// prints ['hello.txt']</span>\n\n    staging.readFile(<span class=\"hljs-string\">'/hello.txt'</span>, <span class=\"hljs-string\">'utf-8'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, data</span>) </span>{\n      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n      <span class=\"hljs-built_in\">console</span>.log(data) <span class=\"hljs-comment\">// prints 'world'</span>\n    })\n  })\n})\n</code></pre>\n<p>At this point, the archive is still unchanged.</p>\n<pre><code class=\"lang-js\">archive.readFile(<span class=\"hljs-string\">'/hello.txt'</span>, <span class=\"hljs-string\">'utf-8'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(err) <span class=\"hljs-comment\">// =&gt; NotFound</span>\n})\n</code></pre>\n<p>To be applied to the archive, the changes must be committed:</p>\n<pre><code class=\"lang-js\">staging.diff(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, changes</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n  <span class=\"hljs-built_in\">console</span>.log(changes) <span class=\"hljs-comment\">// prints [{change: 'add', type: 'file', path: '/hello.txt'}]</span>\n\n  staging.commit(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n\n    staging.diff(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, changes</span>) </span>{\n      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n      <span class=\"hljs-built_in\">console</span>.log(changes) <span class=\"hljs-comment\">// prints []</span>\n\n      archive.readFile(<span class=\"hljs-string\">'/hello.txt'</span>, <span class=\"hljs-string\">'utf-8'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, data</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n        <span class=\"hljs-built_in\">console</span>.log(data) <span class=\"hljs-comment\">// prints 'world'</span>\n      })\n    })\n  })\n})\n</code></pre>\n<p>Changes can also be reverted after writing them to staging.</p>\n<pre><code class=\"lang-js\">staging.writeFile(<span class=\"hljs-string\">'/hello.txt'</span>, <span class=\"hljs-string\">'universe!'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n\n  staging.diff(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, changes</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n    <span class=\"hljs-built_in\">console</span>.log(changes) <span class=\"hljs-comment\">// prints [{change: 'mod', type: 'file', path: '/hello.txt'}]</span>\n\n    staging.revert(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n\n      staging.readFile(<span class=\"hljs-string\">'/hello.txt'</span>, <span class=\"hljs-string\">'utf-8'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, data</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n        <span class=\"hljs-built_in\">console</span>.log(data) <span class=\"hljs-comment\">// prints 'world'</span>\n      })\n    })\n  })\n})\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h4 id=\"var-staging-hyperdrivestagingareaarchive-stagingpath-baseopts\"><a href=\"#var-staging-hyperdrivestagingareaarchive-stagingpath-baseopts\" class=\"anchor\"></a><code>var staging = HyperdriveStagingArea(archive, stagingPath[, baseOpts])</code></h4><p>Create a staging area for <code>archive</code> at the given <code>stagingPath</code>.</p>\n<p>You can specify <code>baseOpts</code> to be passed as the defaults to diff, commit, and revert. Options include:</p>\n<pre><code>{\n  skipDatIgnore: <span class=\"hljs-literal\">false</span> <span class=\"hljs-string\">//</span> dont use the <span class=\"hljs-string\">.datignore</span> rules\n  ignore: ['<span class=\"hljs-string\">.dat</span>', '<span class=\"hljs-string\">.git</span>'] <span class=\"hljs-string\">//</span> base ignore rules <span class=\"hljs-params\">(used in addition to .datignore)</span>\n  filter: <span class=\"hljs-literal\">false</span> <span class=\"hljs-string\">//</span> a predicate of <span class=\"hljs-params\">(path)</span> =&gt; bool, where writes are skipped <span class=\"hljs-keyword\">if</span> == <span class=\"hljs-literal\">true</span>. Takes precedence over <span class=\"hljs-string\">.datignore</span>\n  shallow: <span class=\"hljs-literal\">false</span> <span class=\"hljs-string\">//</span> dont recurse into folders that need to be added or removed\n}\n</code></pre><h4 id=\"stagingpath\"><a href=\"#stagingpath\" class=\"anchor\"></a><code>staging.path</code></h4><p>Path to staging folder.</p>\n<h4 id=\"stagingisstaging\"><a href=\"#stagingisstaging\" class=\"anchor\"></a><code>staging.isStaging</code></h4><p>True</p>\n<h4 id=\"stagingkey\"><a href=\"#stagingkey\" class=\"anchor\"></a><code>staging.key</code></h4><p>Archive key.</p>\n<h4 id=\"stagingwritable\"><a href=\"#stagingwritable\" class=\"anchor\"></a><code>staging.writable</code></h4><p>Is the archive writable?</p>\n<h4 id=\"stagingdiffopts-cb\"><a href=\"#stagingdiffopts-cb\" class=\"anchor\"></a><code>staging.diff(opts, cb)</code></h4><p>List the changes currently in staging. Output looks like:</p>\n<pre><code class=\"lang-js\">[\n  {\n    <span class=\"hljs-attr\">change</span>: <span class=\"hljs-string\">'add'</span> | <span class=\"hljs-string\">'mod'</span> | <span class=\"hljs-string\">'del'</span>\n    type: <span class=\"hljs-string\">'dir'</span> | <span class=\"hljs-string\">'file'</span>\n    path: <span class=\"hljs-built_in\">String</span> (path <span class=\"hljs-keyword\">of</span> the file)\n  },\n  ...\n]\n</code></pre>\n<p>Options include:</p>\n<pre><code><span class=\"hljs-string\">{</span>\n<span class=\"hljs-attr\">  skipDatIgnore:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">dont</span> <span class=\"hljs-string\">use</span> <span class=\"hljs-string\">the</span> <span class=\"hljs-string\">.datignore</span> <span class=\"hljs-string\">rules</span>\n<span class=\"hljs-attr\">  ignore:</span> <span class=\"hljs-string\">['.dat',</span> <span class=\"hljs-string\">'.git'</span><span class=\"hljs-string\">]</span> <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">base</span> <span class=\"hljs-string\">ignore</span> <span class=\"hljs-string\">rules</span> <span class=\"hljs-string\">(used</span> <span class=\"hljs-string\">in</span> <span class=\"hljs-string\">addition</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">.datignore)</span>\n<span class=\"hljs-attr\">  filter:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">a</span> <span class=\"hljs-string\">predicate</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">(path)</span> <span class=\"hljs-string\">=&gt;</span> <span class=\"hljs-string\">bool,</span> <span class=\"hljs-string\">where</span> <span class=\"hljs-string\">writes</span> <span class=\"hljs-string\">are</span> <span class=\"hljs-string\">skipped</span> <span class=\"hljs-string\">if</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-literal\">true</span>. <span class=\"hljs-string\">Takes</span> <span class=\"hljs-string\">precedence</span> <span class=\"hljs-string\">over</span> <span class=\"hljs-string\">.datignore</span>\n<span class=\"hljs-attr\">  shallow:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">dont</span> <span class=\"hljs-string\">recurse</span> <span class=\"hljs-string\">into</span> <span class=\"hljs-string\">folders</span> <span class=\"hljs-string\">that</span> <span class=\"hljs-string\">need</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">be</span> <span class=\"hljs-string\">added</span> <span class=\"hljs-string\">or</span> <span class=\"hljs-string\">removed</span>\n<span class=\"hljs-attr\">  compareContent:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">diff</span> <span class=\"hljs-string\">by</span> <span class=\"hljs-string\">content?</span> <span class=\"hljs-string\">(this</span> <span class=\"hljs-string\">removes</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-string\">positives)</span>\n<span class=\"hljs-string\">}</span>\n</code></pre><h4 id=\"stagingcommitopts-cb\"><a href=\"#stagingcommitopts-cb\" class=\"anchor\"></a><code>staging.commit(opts, cb)</code></h4><p>Write all changes to the archive.</p>\n<p>Options include:</p>\n<pre><code><span class=\"hljs-string\">{</span>\n<span class=\"hljs-attr\">  skipDatIgnore:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">dont</span> <span class=\"hljs-string\">use</span> <span class=\"hljs-string\">the</span> <span class=\"hljs-string\">.datignore</span> <span class=\"hljs-string\">rules</span>\n<span class=\"hljs-attr\">  ignore:</span> <span class=\"hljs-string\">['.dat',</span> <span class=\"hljs-string\">'.git'</span><span class=\"hljs-string\">]</span> <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">base</span> <span class=\"hljs-string\">ignore</span> <span class=\"hljs-string\">rules</span> <span class=\"hljs-string\">(used</span> <span class=\"hljs-string\">in</span> <span class=\"hljs-string\">addition</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">.datignore)</span>\n<span class=\"hljs-attr\">  filter:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">a</span> <span class=\"hljs-string\">predicate</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">(path)</span> <span class=\"hljs-string\">=&gt;</span> <span class=\"hljs-string\">bool,</span> <span class=\"hljs-string\">where</span> <span class=\"hljs-string\">writes</span> <span class=\"hljs-string\">are</span> <span class=\"hljs-string\">skipped</span> <span class=\"hljs-string\">if</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-literal\">true</span>. <span class=\"hljs-string\">Takes</span> <span class=\"hljs-string\">precedence</span> <span class=\"hljs-string\">over</span> <span class=\"hljs-string\">.datignore</span>\n<span class=\"hljs-attr\">  shallow:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">dont</span> <span class=\"hljs-string\">recurse</span> <span class=\"hljs-string\">into</span> <span class=\"hljs-string\">folders</span> <span class=\"hljs-string\">that</span> <span class=\"hljs-string\">need</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">be</span> <span class=\"hljs-string\">added</span> <span class=\"hljs-string\">or</span> <span class=\"hljs-string\">removed</span>\n<span class=\"hljs-attr\">  compareContent:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">diff</span> <span class=\"hljs-string\">by</span> <span class=\"hljs-string\">content?</span> <span class=\"hljs-string\">(this</span> <span class=\"hljs-string\">removes</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-string\">positives)</span>\n<span class=\"hljs-string\">}</span>\n</code></pre><h4 id=\"stagingrevertopts-cb\"><a href=\"#stagingrevertopts-cb\" class=\"anchor\"></a><code>staging.revert(opts, cb)</code></h4><p>Undo all changes so that staging is reverted to the archive stage.</p>\n<p>Options include:</p>\n<pre><code><span class=\"hljs-string\">{</span>\n<span class=\"hljs-attr\">  skipDatIgnore:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">dont</span> <span class=\"hljs-string\">use</span> <span class=\"hljs-string\">the</span> <span class=\"hljs-string\">.datignore</span> <span class=\"hljs-string\">rules</span>\n<span class=\"hljs-attr\">  ignore:</span> <span class=\"hljs-string\">['.dat',</span> <span class=\"hljs-string\">'.git'</span><span class=\"hljs-string\">]</span> <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">base</span> <span class=\"hljs-string\">ignore</span> <span class=\"hljs-string\">rules</span> <span class=\"hljs-string\">(used</span> <span class=\"hljs-string\">in</span> <span class=\"hljs-string\">addition</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">.datignore)</span>\n<span class=\"hljs-attr\">  filter:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">a</span> <span class=\"hljs-string\">predicate</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">(path)</span> <span class=\"hljs-string\">=&gt;</span> <span class=\"hljs-string\">bool,</span> <span class=\"hljs-string\">where</span> <span class=\"hljs-string\">writes</span> <span class=\"hljs-string\">are</span> <span class=\"hljs-string\">skipped</span> <span class=\"hljs-string\">if</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-literal\">true</span>. <span class=\"hljs-string\">Takes</span> <span class=\"hljs-string\">precedence</span> <span class=\"hljs-string\">over</span> <span class=\"hljs-string\">.datignore</span>\n<span class=\"hljs-attr\">  shallow:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">dont</span> <span class=\"hljs-string\">recurse</span> <span class=\"hljs-string\">into</span> <span class=\"hljs-string\">folders</span> <span class=\"hljs-string\">that</span> <span class=\"hljs-string\">need</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">be</span> <span class=\"hljs-string\">added</span> <span class=\"hljs-string\">or</span> <span class=\"hljs-string\">removed</span>\n<span class=\"hljs-attr\">  compareContent:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">diff</span> <span class=\"hljs-string\">by</span> <span class=\"hljs-string\">content?</span> <span class=\"hljs-string\">(this</span> <span class=\"hljs-string\">removes</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-string\">positives)</span>\n<span class=\"hljs-string\">}</span>\n</code></pre><h4 id=\"stagingreadignoreopts-cb\"><a href=\"#stagingreadignoreopts-cb\" class=\"anchor\"></a><code>staging.readIgnore(opts, cb)</code></h4><p>Read the .datignore and provide a <code>filter(path)=&gt;bool</code> function. The callback does not provide an error, so its signature is <code>cb(filterFn)</code>.</p>\n<p>Options include:</p>\n<pre><code>{\n  <span class=\"hljs-attribute\">skipDatIgnore</span>: false <span class=\"hljs-comment\">// dont use the .datignore rules</span>\n  <span class=\"hljs-attribute\">ignore</span>: [<span class=\"hljs-string\">'.dat'</span>, <span class=\"hljs-string\">'.git'</span>] <span class=\"hljs-comment\">// base ignore rules (used in addition to .datignore)</span>\n}\n</code></pre><h4 id=\"stagingstartautosync\"><a href=\"#stagingstartautosync\" class=\"anchor\"></a><code>staging.startAutoSync()</code></h4><p>Listens for updates to the archive and automatically reverts the staging area when a new entry is appended. Useful for syncing the staging for downloaded archives.</p>\n<h4 id=\"stagingstopautosync\"><a href=\"#stagingstopautosync\" class=\"anchor\"></a><code>staging.stopAutoSync()</code></h4><p>Stop syncing the staging area.</p>\n<h4 id=\"hyperdrivestagingareaparseignorerulesstr\"><a href=\"#hyperdrivestagingareaparseignorerulesstr\" class=\"anchor\"></a><code>HyperdriveStagingArea.parseIgnoreRules(str)</code></h4><p>Parses the list of rules in a <code>.datignore</code> and outputs an array that can be used by anymatch.</p>\n","hyperdrive-to-zip-stream":"<h1 id=\"hyperdrive-to-zip-stream\"><a href=\"#hyperdrive-to-zip-stream\" class=\"anchor\"></a>hyperdrive-to-zip-stream</h1><p>Usage</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> toZipStream = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive-to-zip-stream'</span>)\n\ntoZipStream(archive).pipe(fs.createWriteStream(...))\n</code></pre>\n<p>The output zip will only contain files that are fully downloaded. </p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","hyperpipe":"<h1 id=\"hyperpipe\"><a href=\"#hyperpipe\" class=\"anchor\"></a>hyperpipe</h1><p>Distributed input/output pipe.</p>\n<pre><code class=\"lang-sh\">npm install -g hyperpipe\nhyperpipe --<span class=\"hljs-built_in\">help</span>\n</code></pre>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>On one computer</p>\n<pre><code class=\"lang-sh\">./program | hyperpipe /tmp/some-folder\n&lt;prints-key&gt;\n</code></pre>\n<p>On another</p>\n<pre><code class=\"lang-sh\">hyperpipe /tmp/some-other-folder &lt;key-from-above&gt;\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><pre><code class=\"lang-sh\">  Usage:\n    $ hyperpipe &lt;database&gt; &lt;key?&gt; [options]\n\n  Commands:\n    &lt;default&gt;    Pipe a file into the swarm or <span class=\"hljs-built_in\">read</span> from the swarm at a key\n\n    Options:\n      -h, --<span class=\"hljs-built_in\">help</span>      Print usage\n      -t, --tail      Only <span class=\"hljs-built_in\">print</span> get updates\n      -e, --encoding  Set encoding <span class=\"hljs-keyword\">for</span> hypercore (parse ndjson by setting to <span class=\"hljs-string\">'json'</span>)\n          --no-live   Exit after hyperpipe is <span class=\"hljs-keyword\">done</span> syncing\n\n  Examples:\n    $ hyperpipe ./pipe.db &lt; README.md         <span class=\"hljs-comment\"># cat a file &amp; print key</span>\n    $ hyperpipe ./pipe.db &lt;key&gt; &gt; README.md   <span class=\"hljs-comment\"># write a file from a key</span>\n    $ tail -F foo.log | hyperpipe ./pipe.db   <span class=\"hljs-comment\"># tail a live log file</span>\n    $ hyperpipe ./pipe.db --encoding=<span class=\"hljs-string\">'json'</span> &lt; my-data.json   <span class=\"hljs-comment\"># put ndjson into hypercore</span>\n</code></pre>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","hyperdrive":"<h1 id=\"hyperdrive\"><a href=\"#hyperdrive\" class=\"anchor\"></a>Hyperdrive</h1><p>Hyperdrive is a secure, real time distributed file system</p>\n<pre><code class=\"lang-js\">npm install hyperdrive\n</code></pre>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>Hyperdrive aims to implement the same API as Node.js&#39; core fs module.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> hyperdrive = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive'</span>)\n<span class=\"hljs-keyword\">var</span> archive = hyperdrive(<span class=\"hljs-string\">'./my-first-hyperdrive'</span>) <span class=\"hljs-comment\">// content will be stored in this folder</span>\n\narchive.writeFile(<span class=\"hljs-string\">'/hello.txt'</span>, <span class=\"hljs-string\">'world'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n  archive.readdir(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, list</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n    <span class=\"hljs-built_in\">console</span>.log(list) <span class=\"hljs-comment\">// prints ['hello.txt']</span>\n    archive.readFile(<span class=\"hljs-string\">'/hello.txt'</span>, <span class=\"hljs-string\">'utf-8'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, data</span>) </span>{\n      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n      <span class=\"hljs-built_in\">console</span>.log(data) <span class=\"hljs-comment\">// prints 'world'</span>\n    })\n  })\n})\n</code></pre>\n<p>A big difference is that you can replicate the file system to other computers! All you need is a stream.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> net = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'net'</span>)\n\n<span class=\"hljs-comment\">// ... on one machine</span>\n\n<span class=\"hljs-keyword\">var</span> server = net.createServer(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">socket</span>) </span>{\n  socket.pipe(archive.replicate()).pipe(socket)\n})\n\nserver.listen(<span class=\"hljs-number\">10000</span>)\n\n<span class=\"hljs-comment\">// ... on another</span>\n\n<span class=\"hljs-keyword\">var</span> clonedArchive = hyperdrive(<span class=\"hljs-string\">'./my-cloned-hyperdrive'</span>, origKey)\n<span class=\"hljs-keyword\">var</span> socket = net.connect(<span class=\"hljs-number\">10000</span>)\n\nsocket.pipe(clonedArchive.replicate()).pipe(socket)\n</code></pre>\n<p>It also comes with build in versioning and real time replication. See more below.</p>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h4 id=\"var-archive-hyperdrivestorage-key-options\"><a href=\"#var-archive-hyperdrivestorage-key-options\" class=\"anchor\"></a><code>var archive = hyperdrive(storage, [key], [options])</code></h4><p>Create a new hyperdrive. Storage should be a function or a string.</p>\n<p>If storage is a string content will be stored inside that folder.</p>\n<p>If storage is a function it is called with a string name for each abstract-random-access instance that is needed\nto store the archive.</p>\n<p>Options include:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">sparse</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// only download data when it is read first time</span>\n}\n</code></pre>\n<h4 id=\"var-stream-archivereplicateoptions\"><a href=\"#var-stream-archivereplicateoptions\" class=\"anchor\"></a><code>var stream = archive.replicate([options])</code></h4><p>Replicate this archive. Options include</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">live</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// keep replicating</span>\n  download: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// download data from peers?</span>\n  upload: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// upload data to peers?</span>\n}\n</code></pre>\n<h4 id=\"archiveversion\"><a href=\"#archiveversion\" class=\"anchor\"></a><code>archive.version</code></h4><p>Get the current version of the archive (incrementing number).</p>\n<h4 id=\"archivekey\"><a href=\"#archivekey\" class=\"anchor\"></a><code>archive.key</code></h4><p>The public key identifying the archive.</p>\n<h4 id=\"archivediscoverykey\"><a href=\"#archivediscoverykey\" class=\"anchor\"></a><code>archive.discoveryKey</code></h4><p>A key derived from the public key that can be used to discovery other peers sharing this archive.</p>\n<h4 id=\"archivewritable\"><a href=\"#archivewritable\" class=\"anchor\"></a><code>archive.writable</code></h4><p>A boolean indicating whether the archive is writable.</p>\n<h4 id=\"archiveonready\"><a href=\"#archiveonready\" class=\"anchor\"></a><code>archive.on(&#39;ready&#39;)</code></h4><p>Emitted when the archive is fully ready and all properties has been populated.</p>\n<h4 id=\"archiveonerror-err\"><a href=\"#archiveonerror-err\" class=\"anchor\"></a><code>archive.on(&#39;error&#39;, err)</code></h4><p>Emitted when a critical error during load happened.</p>\n<h4 id=\"var-olddrive-archivecheckoutversion\"><a href=\"#var-olddrive-archivecheckoutversion\" class=\"anchor\"></a><code>var oldDrive = archive.checkout(version)</code></h4><p>Checkout a readonly copy of the archive at an old version.</p>\n<h4 id=\"var-stream-archivehistoryoptions\"><a href=\"#var-stream-archivehistoryoptions\" class=\"anchor\"></a><code>var stream = archive.history([options])</code></h4><p>Get a stream of all changes and their versions from this archive.</p>\n<h4 id=\"var-stream-archivecreatereadstreamname-options\"><a href=\"#var-stream-archivecreatereadstreamname-options\" class=\"anchor\"></a><code>var stream = archive.createReadStream(name, [options])</code></h4><p>Read a file out as a stream. Similar to fs.createReadStream.</p>\n<p>Options include:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">start</span>: optionalByteOffset, <span class=\"hljs-comment\">// similar to fs</span>\n  end: optionalInclusiveByteEndOffset, <span class=\"hljs-comment\">// similar to fs</span>\n  length: optionalByteLength\n}\n</code></pre>\n<h4 id=\"archivereadfilename-encoding-callback\"><a href=\"#archivereadfilename-encoding-callback\" class=\"anchor\"></a><code>archive.readFile(name, [encoding], callback)</code></h4><p>Read an entire file into memory. Similar to fs.readFile.</p>\n<h4 id=\"var-stream-archivecreatewritestreamname-options\"><a href=\"#var-stream-archivecreatewritestreamname-options\" class=\"anchor\"></a><code>var stream = archive.createWriteStream(name, [options])</code></h4><p>Write a file as a stream. Similar to fs.createWriteStream.</p>\n<h4 id=\"archivewritefilename-buffer-options-callback\"><a href=\"#archivewritefilename-buffer-options-callback\" class=\"anchor\"></a><code>archive.writeFile(name, buffer, [options], [callback])</code></h4><p>Write a file from a single buffer. Similar to fs.writeFile.</p>\n<h4 id=\"archiveunlinkname-callback\"><a href=\"#archiveunlinkname-callback\" class=\"anchor\"></a><code>archive.unlink(name, [callback])</code></h4><p>Unlinks (deletes) a file. Similar to fs.unlink.</p>\n<h4 id=\"archivemkdirname-options-callback\"><a href=\"#archivemkdirname-options-callback\" class=\"anchor\"></a><code>archive.mkdir(name, [options], [callback])</code></h4><p>Explictly create an directory. Similar to fs.mkdir</p>\n<h4 id=\"archivermdirname-callback\"><a href=\"#archivermdirname-callback\" class=\"anchor\"></a><code>archive.rmdir(name, [callback])</code></h4><p>Delete an empty directory. Similar to fs.rmdir.</p>\n<h4 id=\"archivereaddirname-options-callback\"><a href=\"#archivereaddirname-options-callback\" class=\"anchor\"></a><code>archive.readdir(name, [options], [callback])</code></h4><p>Lists a directory. Similar to fs.readdir.</p>\n<p>Options include:</p>\n<pre><code class=\"lang-js\">{\n    <span class=\"hljs-attr\">cached</span>: <span class=\"hljs-literal\">true</span>|<span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// default: false</span>\n}\n</code></pre>\n<p>If <code>cached</code> is set to <code>true</code>, this function returns results from the local version of the archive’s append-tree. Default behavior is to fetch the latest remote version of the archive before returning list of directories.</p>\n<h4 id=\"archivestatname-callback\"><a href=\"#archivestatname-callback\" class=\"anchor\"></a><code>archive.stat(name, callback)</code></h4><p>Stat an entry. Similar to fs.stat. Sample output:</p>\n<pre><code><span class=\"hljs-selector-tag\">Stat</span> {\n  <span class=\"hljs-attribute\">dev</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attribute\">nlink</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attribute\">rdev</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attribute\">blksize</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attribute\">ino</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attribute\">mode</span>: <span class=\"hljs-number\">16877</span>,\n  <span class=\"hljs-attribute\">uid</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attribute\">gid</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attribute\">size</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attribute\">offset</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attribute\">blocks</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attribute\">atime</span>: <span class=\"hljs-number\">2017</span><span class=\"hljs-attribute\">-04-10T18</span>:<span class=\"hljs-number\">59</span>:<span class=\"hljs-number\">00.147</span>Z,\n  <span class=\"hljs-attribute\">mtime</span>: <span class=\"hljs-number\">2017</span><span class=\"hljs-attribute\">-04-10T18</span>:<span class=\"hljs-number\">59</span>:<span class=\"hljs-number\">00.147</span>Z,\n  <span class=\"hljs-attribute\">ctime</span>: <span class=\"hljs-number\">2017</span><span class=\"hljs-attribute\">-04-10T18</span>:<span class=\"hljs-number\">59</span>:<span class=\"hljs-number\">00.147</span>Z,\n  <span class=\"hljs-attribute\">linkname</span>: undefined }\n</code></pre><p>The output object includes methods similar to fs.stat:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> stat = archive.stat(<span class=\"hljs-string\">'/hello.txt'</span>)\nstat.isDirectory()\nstat.isFile()\n</code></pre>\n<h4 id=\"archivelstatname-callback\"><a href=\"#archivelstatname-callback\" class=\"anchor\"></a><code>archive.lstat(name, callback)</code></h4><p>Stat an entry but do not follow symlinks. Similar to fs.lstat.</p>\n<h4 id=\"archiveaccessname-callback\"><a href=\"#archiveaccessname-callback\" class=\"anchor\"></a><code>archive.access(name, callback)</code></h4><p>Similar to fs.access.</p>\n<h4 id=\"archiveclosecallback\"><a href=\"#archiveclosecallback\" class=\"anchor\"></a><code>archive.close([callback])</code></h4><p>Closes all open resources used by the archive.\nThe archive should no longer be used after calling this.</p>\n","hypercore":"<h1 id=\"hypercore\"><a href=\"#hypercore\" class=\"anchor\"></a>hypercore</h1><p>Hypercore is a secure, distributed append-only log.</p>\n<p>Built for sharing large datasets and streams of real time data as part of the <a href=\"https://datproject.org\">Dat project</a>.</p>\n<pre><code class=\"lang-sh\">npm install hypercore\n</code></pre>\n<p><a href=\"https://travis-ci.org/mafintosh/hypercore\"><img src=\"https://travis-ci.org/mafintosh/hypercore.svg?branch=master\" alt=\"Build Status\"></a></p>\n<p>To learn more about how hypercore works on a technical level read the <a href=\"https://github.com/datproject/docs/blob/master/papers/dat-paper.pdf\">Dat paper</a>.</p>\n<h2 id=\"features\"><a href=\"#features\" class=\"anchor\"></a>Features</h2><ul>\n<li>Sparse replication. Only download the data you are interested in.</li>\n<li>Realtime. Get the latest updates to the log fast and securely.</li>\n<li>Performant. Uses a simple flat file structure to maximize I/O performance.</li>\n<li>Secure. Uses signed merkle trees to verify log integrity in real time.</li>\n<li>Browser support. Simply pick a storage provider (like <a href=\"https://github.com/mafintosh/random-access-memory\">random-access-memory</a>) that works in the browser</li>\n</ul>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> hypercore = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hypercore'</span>)\n<span class=\"hljs-keyword\">var</span> feed = hypercore(<span class=\"hljs-string\">'./my-first-dataset'</span>, {<span class=\"hljs-attr\">valueEncoding</span>: <span class=\"hljs-string\">'utf-8'</span>})\n\nfeed.append(<span class=\"hljs-string\">'hello'</span>)\nfeed.append(<span class=\"hljs-string\">'world'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n  feed.get(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">console</span>.log) <span class=\"hljs-comment\">// prints hello</span>\n  feed.get(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">console</span>.log) <span class=\"hljs-comment\">// prints world</span>\n})\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h4 id=\"var-feed-hypercorestorage-key-options\"><a href=\"#var-feed-hypercorestorage-key-options\" class=\"anchor\"></a><code>var feed = hypercore(storage, [key], [options])</code></h4><p>Create a new hypercore feed.</p>\n<p><code>storage</code> should be set to a directory where you want to store the data and feed metadata.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> feed = hypercore(<span class=\"hljs-string\">'./directory'</span>) <span class=\"hljs-comment\">// store data in ./directory</span>\n</code></pre>\n<p>Alternatively you can pass a function instead that is called with every filename hypercore needs to function and return your own <a href=\"https://github.com/juliangruber/abstract-random-access\">random-access</a> instance that is used to store the data.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> ram = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'random-access-memory'</span>)\n<span class=\"hljs-keyword\">var</span> feed = hypercore(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">filename</span>) </span>{\n  <span class=\"hljs-comment\">// filename will be one of: data, bitfield, tree, signatures, key, secret_key</span>\n  <span class=\"hljs-comment\">// the data file will contain all your data concattenated.</span>\n\n  <span class=\"hljs-comment\">// just store all files in ram by returning a random-access-memory instance</span>\n  <span class=\"hljs-keyword\">return</span> ram()\n})\n</code></pre>\n<p>Per default hypercore uses <a href=\"https://github.com/mafintosh/random-access-file\">random-access-file</a>. This is also useful if you want to store specific files in other directories. For example you might want to store the secret key elsewhere.</p>\n<p><code>key</code> can be set to a hypercore feed public key. If you do not set this the public key will be loaded from storage. If no key exists a new key pair will be generated.</p>\n<p><code>options</code> include:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">createIfMissing</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// create a new hypercore key pair if none was present in storage</span>\n  overwrite: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// overwrite any old hypercore that might already exist</span>\n  valueEncoding: <span class=\"hljs-string\">'json'</span> | <span class=\"hljs-string\">'utf-8'</span> | <span class=\"hljs-string\">'binary'</span>, <span class=\"hljs-comment\">// defaults to binary</span>\n  sparse: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// do not mark the entire feed to be downloaded</span>\n  secretKey: buffer <span class=\"hljs-comment\">// optionally pass the corresponding secret key yourself</span>\n  storeSecretKey: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// if false, will not save the secret key</span>\n}\n</code></pre>\n<p>You can also set valueEncoding to any <a href=\"https://github.com/mafintosh/abstract-encoding\">abstract-encoding</a> instance.</p>\n<h4 id=\"feedwritable\"><a href=\"#feedwritable\" class=\"anchor\"></a><code>feed.writable</code></h4><p>Can we append to this feed?</p>\n<p>Populated after <code>ready</code> has been emitted. Will be <code>false</code> before the event.</p>\n<h4 id=\"feedreadable\"><a href=\"#feedreadable\" class=\"anchor\"></a><code>feed.readable</code></h4><p>Can we read from this feed? After closing a feed this will be false.</p>\n<p>Populated after <code>ready</code> has been emitted. Will be <code>false</code> before the event.</p>\n<h4 id=\"feedkey\"><a href=\"#feedkey\" class=\"anchor\"></a><code>feed.key</code></h4><p>Buffer containing the public key identifying this feed.</p>\n<p>Populated after <code>ready</code> has been emitted. Will be <code>null</code> before the event.</p>\n<h4 id=\"feeddiscoverykey\"><a href=\"#feeddiscoverykey\" class=\"anchor\"></a><code>feed.discoveryKey</code></h4><p>Buffer containing a key derived from the feed.key.\nIn contrast to <code>feed.key</code> this key does not allow you to verify the data but can be used to announce or look for peers that are sharing the same feed, without leaking the feed key.</p>\n<p>Populated after <code>ready</code> has been emitted. Will be <code>null</code> before the event.</p>\n<h4 id=\"feedlength\"><a href=\"#feedlength\" class=\"anchor\"></a><code>feed.length</code></h4><p>How many blocks of data are available on this feed?</p>\n<p>Populated after <code>ready</code> has been emitted. Will be <code>0</code> before the event.</p>\n<h4 id=\"feedbytelength\"><a href=\"#feedbytelength\" class=\"anchor\"></a><code>feed.byteLength</code></h4><p>How much data is available on this feed in bytes?</p>\n<p>Populated after <code>ready</code> has been emitted. Will be <code>0</code> before the event.</p>\n<h4 id=\"feedgetindex-options-callback\"><a href=\"#feedgetindex-options-callback\" class=\"anchor\"></a><code>feed.get(index, [options], callback)</code></h4><p>Get a block of data.\nIf the data is not available locally this method will prioritize and wait for the data to be downloaded before calling the callback.</p>\n<p>Options include</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">wait</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// wait for index to be downloaded</span>\n  timeout: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// wait at max some milliseconds (0 means no timeout)</span>\n  valueEncoding: <span class=\"hljs-string\">'json'</span> | <span class=\"hljs-string\">'utf-8'</span> | <span class=\"hljs-string\">'binary'</span> <span class=\"hljs-comment\">// defaults to the feed's valueEncoding</span>\n}\n</code></pre>\n<p>Callback is called with <code>(err, data)</code></p>\n<h4 id=\"feedheadoptions-callback\"><a href=\"#feedheadoptions-callback\" class=\"anchor\"></a><code>feed.head([options], callback)</code></h4><p>Get the block of data at the tip of the feed. This will be the most recently\nappended block.</p>\n<p>Accepts the same <code>options</code> as <code>feed.get()</code>.</p>\n<h4 id=\"feeddownloadrange-callback\"><a href=\"#feeddownloadrange-callback\" class=\"anchor\"></a><code>feed.download([range], [callback])</code></h4><p>Download a range of data. Callback is called when all data has been downloaded.\nA range can have the following properties:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">start</span>: startIndex,\n  <span class=\"hljs-attr\">end</span>: nonInclusiveEndIndex,\n  <span class=\"hljs-attr\">linear</span>: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// download range linearly and not randomly</span>\n}\n</code></pre>\n<p>If you do not mark a range the entire feed will be marked for download.</p>\n<p>If you have not enabled sparse mode (<code>sparse: true</code> in the feed constructor) then the entire\nfeed will be marked for download for you when the feed is created.</p>\n<h4 id=\"feedundownloadrange\"><a href=\"#feedundownloadrange\" class=\"anchor\"></a><code>feed.undownload(range)</code></h4><p>Cancel a previous download request.</p>\n<h4 id=\"var-number-feeddownloadedstart-end\"><a href=\"#var-number-feeddownloadedstart-end\" class=\"anchor\"></a><code>var number = feed.downloaded([start], [end])</code></h4><p>Returns total number of downloaded blocks within range.\nIf <code>end</code> is not specified it will default to the total number of blocks.\nIf <code>start</code> is not specified it will default to 0.</p>\n<h4 id=\"var-bool-feedhasindex\"><a href=\"#var-bool-feedhasindex\" class=\"anchor\"></a><code>var bool = feed.has(index)</code></h4><p>Return true if a data block is available locally.\nFalse otherwise.</p>\n<h4 id=\"var-bool-feedhasstart-end\"><a href=\"#var-bool-feedhasstart-end\" class=\"anchor\"></a><code>var bool = feed.has(start, end)</code></h4><p>Return true if all data blocks within a range are available locally.\nFalse otherwise.</p>\n<h4 id=\"feedappenddata-callback\"><a href=\"#feedappenddata-callback\" class=\"anchor\"></a><code>feed.append(data, [callback])</code></h4><p>Append a block of data to the feed.</p>\n<p>Callback is called with <code>(err)</code> when all data has been written or an error occured.</p>\n<h4 id=\"feedclearstart-end-callback\"><a href=\"#feedclearstart-end-callback\" class=\"anchor\"></a><code>feed.clear(start, [end], [callback])</code></h4><p>Clear a range of data from the local cache.\nWill clear the data from the bitfield and make a call to the underlying storage provider to delete the byte range the range occupies.</p>\n<p><code>end</code> defaults to <code>start + 1</code>.</p>\n<h4 id=\"feedseekbyteoffset-callback\"><a href=\"#feedseekbyteoffset-callback\" class=\"anchor\"></a><code>feed.seek(byteOffset, callback)</code></h4><p>Seek to a byte offset.</p>\n<p>Calls the callback with <code>(err, index, relativeOffset)</code>, where <code>index</code> is the data block the byteOffset is contained in and <code>relativeOffset</code> is\nthe relative byte offset in the data block.</p>\n<h4 id=\"feedupdateminlength-callback\"><a href=\"#feedupdateminlength-callback\" class=\"anchor\"></a><code>feed.update([minLength], [callback])</code></h4><p>Wait for the feed to contain at least <code>minLength</code> elements.\nIf you do not provide <code>minLength</code> it will be set to current length + 1.</p>\n<p>Does not download any data from peers except for a proof of the new feed length.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'length is'</span>, feed.length)\nfeed.update(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'length has increased'</span>, feed.length)\n})\n</code></pre>\n<h4 id=\"var-stream-feedcreatereadstreamoptions\"><a href=\"#var-stream-feedcreatereadstreamoptions\" class=\"anchor\"></a><code>var stream = feed.createReadStream([options])</code></h4><p>Create a readable stream of data.</p>\n<p>Options include:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">start</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// read from this index</span>\n  end: feed.length, <span class=\"hljs-comment\">// read until this index</span>\n  snapshot: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// if set to false it will update `end` to `feed.length` on every read</span>\n  tail: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// sets `start` to `feed.length`</span>\n  live: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// set to true to keep reading forever</span>\n  timeout: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// timeout for each data event (0 means no timeout)</span>\n  wait: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// wait for data to be downloaded</span>\n}\n</code></pre>\n<h4 id=\"var-stream-feedcreatewritestream\"><a href=\"#var-stream-feedcreatewritestream\" class=\"anchor\"></a><code>var stream = feed.createWriteStream()</code></h4><p>Create a writable stream.</p>\n<h4 id=\"var-stream-feedreplicateoptions\"><a href=\"#var-stream-feedreplicateoptions\" class=\"anchor\"></a><code>var stream = feed.replicate([options])</code></h4><p>Create a replication stream. You should pipe this to another hypercore instance.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// assuming we have two feeds, localFeed + remoteFeed, sharing the same key</span>\n<span class=\"hljs-comment\">// on a server</span>\n<span class=\"hljs-keyword\">var</span> net = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'net'</span>)\n<span class=\"hljs-keyword\">var</span> server = net.createServer(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">socket</span>) </span>{\n  socket.pipe(remoteFeed.replicate()).pipe(socket)\n})\n\n<span class=\"hljs-comment\">// on a client</span>\n<span class=\"hljs-keyword\">var</span> socket = net.connect(...)\nsocket.pipe(localFeed.replicate()).pipe(socket)\n</code></pre>\n<p>Options include:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">live</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// keep replicating after all remote data has been downloaded?</span>\n  download: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// download data from peers?</span>\n  encrypt: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// encrypt the data sent using the hypercore key pair</span>\n}\n</code></pre>\n<h4 id=\"feedclosecallback\"><a href=\"#feedclosecallback\" class=\"anchor\"></a><code>feed.close([callback])</code></h4><p>Fully close this feed.</p>\n<p>Calls the callback with <code>(err)</code> when all storage has been closed.</p>\n<h4 id=\"feedonready\"><a href=\"#feedonready\" class=\"anchor\"></a><code>feed.on(&#39;ready&#39;)</code></h4><p>Emitted when the feed is ready and all properties have been populated.</p>\n<h4 id=\"feedonerror-err\"><a href=\"#feedonerror-err\" class=\"anchor\"></a><code>feed.on(&#39;error&#39;, err)</code></h4><p>Emitted when the feed experiences a critical error.</p>\n<h4 id=\"feedondownload-index-data\"><a href=\"#feedondownload-index-data\" class=\"anchor\"></a><code>feed.on(&#39;download&#39;, index, data)</code></h4><p>Emitted when a data block has been downloaded.</p>\n<h4 id=\"feedonupload-index-data\"><a href=\"#feedonupload-index-data\" class=\"anchor\"></a><code>feed.on(&#39;upload&#39;, index, data)</code></h4><p>Emitted when a data block is uploaded.</p>\n<h4 id=\"feedonappend\"><a href=\"#feedonappend\" class=\"anchor\"></a><code>feed.on(&#39;append&#39;)</code></h4><p>Emitted when the feed has been appended to (i.e. has a new length / byteLength)</p>\n<h4 id=\"feedonsync\"><a href=\"#feedonsync\" class=\"anchor\"></a><code>feed.on(&#39;sync&#39;)</code></h4><p>Emitted everytime ALL data from <code>0</code> to <code>feed.length</code> has been downloaded.</p>\n<h4 id=\"feedonclose\"><a href=\"#feedonclose\" class=\"anchor\"></a><code>feed.on(&#39;close&#39;)</code></h4><p>Emitted when the feed has been fully closed</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","dat-doctor":"<h1 id=\"dat-doctor\"><a href=\"#dat-doctor\" class=\"anchor\"></a>dat-doctor</h1><p>Diagnose network problems for <a href=\"http://github.com/datproject/dat\">Dat</a></p>\n<p>The doctor comes bundled in the Dat CLI. If you already have that then you can ask the doctor for help! Run:</p>\n<pre><code><span class=\"hljs-attribute\">dat doctor</span>\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code>npm <span class=\"hljs-keyword\">install</span> -g dat-doctor\ndat-doctor\n</code></pre><p>This will print out another command to run on the computer you are trying to connect to:</p>\n<pre><code>dat-doctor <span class=\"hljs-number\">84</span>af<span class=\"hljs-number\">4</span>d<span class=\"hljs-number\">998</span>fb<span class=\"hljs-number\">94</span>ec<span class=\"hljs-number\">60</span>dcbda<span class=\"hljs-number\">1</span><span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">6</span><span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">5</span>d<span class=\"hljs-number\">7</span><span class=\"hljs-keyword\">c</span><span class=\"hljs-number\">9158</span>f<span class=\"hljs-number\">9</span>a<span class=\"hljs-number\">5</span>ef<span class=\"hljs-number\">36</span>f<span class=\"hljs-number\">63</span>b<span class=\"hljs-number\">9</span>d<span class=\"hljs-number\">29</span>d<span class=\"hljs-number\">9</span>ce<span class=\"hljs-number\">3</span>df<span class=\"hljs-number\">61</span>eef<span class=\"hljs-number\">4</span>b\n</code></pre><h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>BSD-3-Clause</p>\n","dat-ignore":"<h1 id=\"dat-ignore\"><a href=\"#dat-ignore\" class=\"anchor\"></a>dat-ignore</h1><blockquote>\n<p>default ignore for dat</p>\n</blockquote>\n<p><a href=\"https://www.npmjs.com/package/dat-ignore\"><img src=\"https://img.shields.io/npm/v/dat-ignore.svg?style=flat-square\" alt=\"npm\"></a>\n<a href=\"https://travis-ci.org/joehand/dat-ignore\"><img src=\"https://img.shields.io/travis/joehand/dat-ignore.svg?style=flat-square\" alt=\"travis\"></a>\n<a href=\"http://npm.im/standard\"><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\" alt=\"standard\"></a></p>\n<p>Check if a file should be ignored for Dat:</p>\n<ul>\n<li>Ignore <code>.dat</code> by default</li>\n<li>Use the <code>.datignore</code> file</li>\n<li>Optionally ignore all hidden files</li>\n<li>Add in other custom ignore matches</li>\n</ul>\n<h2 id=\"install\"><a href=\"#install\" class=\"anchor\"></a>Install</h2><pre><code>npm <span class=\"hljs-keyword\">install</span> dat-<span class=\"hljs-keyword\">ignore</span>\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> datIgnore = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-ignore'</span>)\n<span class=\"hljs-keyword\">var</span> ignore = datIgnore(<span class=\"hljs-string\">'/data/dir'</span>)\n\n<span class=\"hljs-built_in\">console</span>.log(ignore(<span class=\"hljs-string\">'.dat'</span>)) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(ignore(<span class=\"hljs-string\">'.git'</span>)) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(ignore(<span class=\"hljs-string\">'dat-data'</span>)) <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">console</span>.log(ignore(<span class=\"hljs-string\">'cat.jpg'</span>)) <span class=\"hljs-comment\">// false</span>\n</code></pre>\n<p>Uses <a href=\"https://github.com/es128/anymatch\">anymatch</a> to match file paths.</p>\n<h3 id=\"example-options\"><a href=\"#example-options\" class=\"anchor\"></a>Example Options</h3><p>Common configuration options.</p>\n<h4 id=\"add-custom-ignore\"><a href=\"#add-custom-ignore\" class=\"anchor\"></a>Add custom ignore</h4><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> ignore = datIgnore(<span class=\"hljs-string\">'/data/dir'</span>, {\n    <span class=\"hljs-attr\">ignore</span>: [\n      <span class=\"hljs-string\">'**/node_modules/**'</span>, \n      <span class=\"hljs-string\">'path/to/file.js'</span>,\n      <span class=\"hljs-string\">'path/anyjs/**/*.js'</span>\n    ]\n  })\n</code></pre>\n<h4 id=\"allow-hidden-files\"><a href=\"#allow-hidden-files\" class=\"anchor\"></a>Allow Hidden Files</h4><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> ignore = datIgnore(<span class=\"hljs-string\">'/data/dir'</span>, { <span class=\"hljs-attr\">ignoreHidden</span>: <span class=\"hljs-literal\">false</span> })\n</code></pre>\n<h4 id=\"change-dat-ignore-path\"><a href=\"#change-dat-ignore-path\" class=\"anchor\"></a>Change Dat Ignore Path</h4><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> ignore = datIgnore(<span class=\"hljs-string\">'/data/dir'</span>, {\n    <span class=\"hljs-attr\">datignorePath</span>: <span class=\"hljs-string\">'~/.datignore'</span>\n  })\n</code></pre>\n<h4 id=\"datignore-as-stringbuffer\"><a href=\"#datignore-as-stringbuffer\" class=\"anchor\"></a><code>.datignore</code> as string/buffer</h4><p>Pass in a string as a newline delimited list of things to ignore.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> datIgnoreFile = fs.readFileSync(<span class=\"hljs-string\">'~/.datignore'</span>)\ndatIgnoreFile += <span class=\"hljs-string\">'\\n'</span> + fs.readFileSync(path.join(dir, <span class=\"hljs-string\">'.datignore'</span>))\ndatIgnoreFile += <span class=\"hljs-string\">'\\n'</span> + fs.readFileSync(path.join(dir, <span class=\"hljs-string\">'.gitignore'</span>))\n\n<span class=\"hljs-keyword\">var</span> ignore = datIgnore(<span class=\"hljs-string\">'/data/dir'</span>, { <span class=\"hljs-attr\">datignore</span>: datIgnoreFile })\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"var-ignore-datignoredir-opts\"><a href=\"#var-ignore-datignoredir-opts\" class=\"anchor\"></a><code>var ignore = datIgnore([dir], [opts])</code></h3><p>Returns a function that checks if a path should be ignored:</p>\n<pre><code class=\"lang-js\">ignore(<span class=\"hljs-string\">'.dat'</span>) <span class=\"hljs-comment\">// true</span>\nignore(<span class=\"hljs-string\">'.git'</span>) <span class=\"hljs-comment\">// true</span>\nignore(<span class=\"hljs-string\">'data/cats.csv'</span>) <span class=\"hljs-comment\">// false</span>\n</code></pre>\n<h4 id=\"dir\"><a href=\"#dir\" class=\"anchor\"></a><code>dir</code></h4><p><code>dir</code> is used to find <code>.datignore</code> and is prepended to paths found in <code>.datignore</code>.</p>\n<h4 id=\"options\"><a href=\"#options\" class=\"anchor\"></a>Options:</h4><ul>\n<li><code>opts.ignore</code> - Extend custom ignore with any anymatch string or array.</li>\n<li><code>opts.useDatIgnore</code> - Use the <code>.datignore</code> file in <code>dir</code> (default: true)</li>\n<li><code>opts.ignoreHidden</code> - Ignore all hidden files/folders (default: true)</li>\n<li><code>opts.datignorePath</code> - Path to <code>.datignore</code> file (default: <code>dir/.datignore</code>)</li>\n<li><code>opts.datignore</code> - Pass <code>.datignore</code> as buffer or string</li>\n</ul>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p><a href=\"LICENSE.md\">MIT</a></p>\n","dat-json":"<h1 id=\"dat-json\"><a href=\"#dat-json\" class=\"anchor\"></a>dat-json</h1><p>read &amp; write dat.json files. Uses toiletdb under the hood.</p>\n<p><a href=\"https://www.npmjs.com/package/dat-json\"><img src=\"https://img.shields.io/npm/v/dat-json.svg?style=flat-square\" alt=\"npm\"></a>\n<a href=\"https://travis-ci.org/joehand/dat-json\"><img src=\"https://img.shields.io/travis/joehand/dat-json.svg?style=flat-square\" alt=\"travis\"></a>\n<a href=\"http://npm.im/standard\"><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\" alt=\"standard\"></a></p>\n<h2 id=\"install\"><a href=\"#install\" class=\"anchor\"></a>Install</h2><pre><code>npm <span class=\"hljs-keyword\">install</span> dat-<span class=\"hljs-keyword\">json</span>\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> DatJSON = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-json'</span>)\n\n<span class=\"hljs-keyword\">var</span> datjson = DatJSON(archive)\n\ndatjson.create({<span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'a dat'</span>, <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">'exciting'</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n})\n\ndatjson.read(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, data</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(data)\n})\n</code></pre>\n<p>Write to a <code>dat.json</code> on the file system also:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> DatJSON = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-json'</span>)\n\n<span class=\"hljs-keyword\">var</span> datjson = DatJSON(archive, {<span class=\"hljs-attr\">file</span>: path.join(dat.path, <span class=\"hljs-string\">'dat.json'</span>)})\n\ndatjson.create({<span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'a dat'</span>, <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">'exciting'</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n})\n</code></pre>\n<p><strong>TODO: replace file option with hyperdrive indexing</strong></p>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"var-datjson-datjsonarchive-opts\"><a href=\"#var-datjson-datjsonarchive-opts\" class=\"anchor\"></a><code>var datjson = DatJSON(archive, [opts])</code></h3><p>create a new datJson db</p>\n<p>Options:</p>\n<ul>\n<li><code>opts.file</code> - dat.json file path, updates will be written to file system and archive</li>\n</ul>\n<h4 id=\"datjsoncreatedata-cb\"><a href=\"#datjsoncreatedata-cb\" class=\"anchor\"></a><code>datjson.create([data], cb)</code></h4><p>Create a new <code>dat.json</code> file in the archive with the default keys (<code>url</code>, <code>title</code>, <code>description</code>). Pass in any additional data to add on initial create.</p>\n<h4 id=\"datjsonwritekey-val-cb-or-datjsonwritedata-cb\"><a href=\"#datjsonwritekey-val-cb-or-datjsonwritedata-cb\" class=\"anchor\"></a><code>datjson.write(key, val, cb)</code> or <code>datjson.write(data, cb)</code></h4><p>Write a single <code>key</code> and <code>value</code> or an object, <code>data</code>, to the <code>dat.json</code> file. Use <code>file</code> option above to also update the file on the file system.</p>\n<h4 id=\"datjsondeletekey-cb\"><a href=\"#datjsondeletekey-cb\" class=\"anchor\"></a><code>datjson.delete(key, cb)</code></h4><p>Delete a <code>key</code> from the <code>dat.json</code> file.</p>\n<h4 id=\"datjsonreadcb\"><a href=\"#datjsonreadcb\" class=\"anchor\"></a><code>datjson.read(cb)</code></h4><p>Read the current <code>dat.json</code>.</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p><a href=\"LICENSE.md\">MIT</a></p>\n","hyperdiscovery":"<h1 id=\"hyperdiscovery\"><a href=\"#hyperdiscovery\" class=\"anchor\"></a>hyperdiscovery</h1><p><a href=\"http://travis-ci.org/karissa/hyperdiscovery\"><img src=\"https://travis-ci.org/karissa/hyperdiscovery.svg?branch=master\" alt=\"build status\"></a></p>\n<p>Join the p2p swarm for <a href=\"https://github.com/mafintosh/hypercore\">hypercore</a> and <a href=\"https://github.com/mafintosh/hyperdrive\">hyperdrive</a> feeds. Uses\n<a href=\"https://github.com/mafintosh/discovery-swarm\">discovery-swarm</a> under the hood.</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> hyperdiscovery\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>Run the following code in two different places and they will replicate the contents of the given <code>ARCHIVE_KEY</code>.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> hyperdrive = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive'</span>)\n<span class=\"hljs-keyword\">var</span> swarm = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdiscovery'</span>)\n\n<span class=\"hljs-keyword\">var</span> archive = hyperdrive(<span class=\"hljs-string\">'./database'</span>, <span class=\"hljs-string\">'ARCHIVE_KEY'</span>)\n<span class=\"hljs-keyword\">var</span> sw = swarm(archive)\nsw.on(<span class=\"hljs-string\">'connection'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">peer, type</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'got'</span>, peer, type) \n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'connected to'</span>, sw.connections.length, <span class=\"hljs-string\">'peers'</span>)\n  peer.on(<span class=\"hljs-string\">'close'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'peer disconnected'</span>)\n  })\n})\n</code></pre>\n<p>Will use <code>discovery-swarm</code> to attempt to connect peers. Uses <code>datland-swarm-defaults</code> for peer introduction defaults on the server side, which can be overwritten (see below).</p>\n<p>The module can also create and join a swarm for a hypercore feed:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> hypercore = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hypercore'</span>)\n<span class=\"hljs-keyword\">var</span> swarm = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdiscovery'</span>)\n\n<span class=\"hljs-keyword\">var</span> feed = hypercore(<span class=\"hljs-string\">'/feed'</span>)\n<span class=\"hljs-keyword\">var</span> sw = swarm(feed)\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"var-sw-swarmarchive-opts\"><a href=\"#var-sw-swarmarchive-opts\" class=\"anchor\"></a><code>var sw = swarm(archive, opts)</code></h3><p>Join the p2p swarm for the given feed. The return object, <code>sw</code>, is an event emitter that will emit a <code>peer</code> event with the peer information when a peer is found.</p>\n<h3 id=\"swconnections\"><a href=\"#swconnections\" class=\"anchor\"></a>sw.connections</h3><p>Get the list of currently active connections.</p>\n<h3 id=\"swclose\"><a href=\"#swclose\" class=\"anchor\"></a>sw.close()</h3><p>Exit the swarm</p>\n<h5 id=\"options\"><a href=\"#options\" class=\"anchor\"></a>Options</h5><ul>\n<li><code>stream</code>: function, replication stream for connection. Default is <code>archive.replicate({live, upload, download})</code>.</li>\n<li><code>upload</code>: bool, upload data to the other peer?</li>\n<li><code>download</code>: bool, download data from the other peer?</li>\n<li><code>port</code>: port for discovery swarm</li>\n<li><code>utp</code>: use utp in discovery swarm</li>\n<li><code>tcp</code>: use tcp in discovery swarm</li>\n</ul>\n<p>Defaults from datland-swarm-defaults can also be overwritten:</p>\n<ul>\n<li><code>dns.server</code>: DNS server</li>\n<li><code>dns.domain</code>: DNS domain</li>\n<li><code>dht.bootstrap</code>: distributed hash table bootstrapping nodes</li>\n</ul>\n<h2 id=\"see-also\"><a href=\"#see-also\" class=\"anchor\"></a>See Also</h2><ul>\n<li><a href=\"https://github.com/mafintosh/hypercore\">mafintosh/hypercore</a></li>\n<li><a href=\"https://github.com/mafintosh/hyperdrive\">mafintosh/hyperdrive</a></li>\n<li><a href=\"https://github.com/mafintosh/discovery-swarm\">mafintosh/discovery-swarm</a></li>\n</ul>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>ISC</p>\n","discovery-swarm":"<h1 id=\"discovery-swarm\"><a href=\"#discovery-swarm\" class=\"anchor\"></a>discovery-swarm</h1><p>A network swarm that uses <a href=\"https://github.com/maxogden/discovery-channel\">discovery-channel</a> to find and connect to peers.</p>\n<p>This module implements peer connection state and builds on discovery-channel which implements peer discovery. This uses TCP sockets by default and has experimental support for UTP.</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> discovery-swarm\n</code></pre><p><a href=\"http://travis-ci.org/mafintosh/discovery-swarm\"><img src=\"http://img.shields.io/travis/mafintosh/discovery-swarm.svg?style=flat\" alt=\"build status\"></a></p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> swarm = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'discovery-swarm'</span>)\n\n<span class=\"hljs-keyword\">var</span> sw = swarm()\n\nsw.listen(<span class=\"hljs-number\">1000</span>)\nsw.join(<span class=\"hljs-string\">'ubuntu-14.04'</span>) <span class=\"hljs-comment\">// can be any id/name/hash</span>\n\nsw.on(<span class=\"hljs-string\">'connection'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">connection</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'found + connected to peer'</span>)\n})\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h4 id=\"var-sw-swarmopts\"><a href=\"#var-sw-swarmopts\" class=\"anchor\"></a><code>var sw = swarm(opts)</code></h4><p>Create a new swarm. Options include:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">id</span>: crypto.randomBytes(<span class=\"hljs-number\">32</span>), <span class=\"hljs-comment\">// peer-id for user</span>\n  stream: stream, <span class=\"hljs-comment\">// stream to replicate across peers</span>\n  connect: fn, <span class=\"hljs-comment\">// connect local and remote streams yourself</span>\n  utp: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// use utp for discovery</span>\n  tcp: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// use tcp for discovery</span>\n  maxConnections: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// max number of connections.</span>\n  whitelist: [] <span class=\"hljs-comment\">// array of ip addresses to restrict connections to</span>\n}\n</code></pre>\n<p>For full list of <code>opts</code> take a look at <a href=\"https://github.com/maxogden/discovery-channel\">discovery-channel</a></p>\n<h4 id=\"swjoinkey-opts-cb\"><a href=\"#swjoinkey-opts-cb\" class=\"anchor\"></a><code>sw.join(key, [opts], [cb])</code></h4><p>Join a channel specified by <code>key</code> (usually a name, hash or id, must be a <strong>Buffer</strong> or a <strong>string</strong>). After joining will immediately search for peers advertising this key, and re-announce on a timer.</p>\n<p>If you pass <code>opts.announce</code> as a falsy value you don&#39;t announce your port (e.g. you will be in discover-only mode)</p>\n<p>If you specify cb, it will be called <em>when the first round</em> of discovery has completed. But only on the first round.</p>\n<h4 id=\"swleavekey\"><a href=\"#swleavekey\" class=\"anchor\"></a><code>sw.leave(key)</code></h4><p>Leave the channel specified <code>key</code></p>\n<h4 id=\"swconnecting\"><a href=\"#swconnecting\" class=\"anchor\"></a><code>sw.connecting</code></h4><p>Number of peers we are trying to connect to</p>\n<h4 id=\"swqueued\"><a href=\"#swqueued\" class=\"anchor\"></a><code>sw.queued</code></h4><p>Number of peers discovered but not connected to yet</p>\n<h4 id=\"swconnected\"><a href=\"#swconnected\" class=\"anchor\"></a><code>sw.connected</code></h4><p>List of connections to other peers.</p>\n<h4 id=\"swonconnection-connection-info\"><a href=\"#swonconnection-connection-info\" class=\"anchor\"></a><code>sw.on(&#39;connection&#39;, connection, info)</code></h4><p>Emitted when you connect to another peer. Info is an object that contains info about the connection</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'tcp'</span>, <span class=\"hljs-comment\">// the type, tcp or utp</span>\n  initiator: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// whether we initiated the connection or someone else did</span>\n  channel: Buffer(<span class=\"hljs-string\">'...'</span>), <span class=\"hljs-comment\">// the channel this connetion was initiated on. only set if initiator === true</span>\n  host: <span class=\"hljs-string\">'127.0.0.1'</span>, <span class=\"hljs-comment\">// the remote address of the peer.</span>\n  port: <span class=\"hljs-number\">8080</span>, <span class=\"hljs-comment\">// the remote port of the peer.</span>\n  id: Buffer(<span class=\"hljs-string\">'...'</span>) <span class=\"hljs-comment\">// the remote peer's peer-id.</span>\n}\n</code></pre>\n<h4 id=\"swlistenport\"><a href=\"#swlistenport\" class=\"anchor\"></a><code>sw.listen(port)</code></h4><p>Listen on a specific port. Should be called before add</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","webrtc-swarm":"<h1 id=\"webrtc-swarm\"><a href=\"#webrtc-swarm\" class=\"anchor\"></a>webrtc-swarm</h1><blockquote>\n<p>Create a swarm of p2p connections using webrtc and a\n<a href=\"https://github.com/mafintosh/signalhub\">signalhub</a>.</p>\n</blockquote>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> webrtc-swarm\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> swarm = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webrtc-swarm'</span>)\n<span class=\"hljs-keyword\">var</span> signalhub = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'signalhub'</span>)\n\n<span class=\"hljs-keyword\">var</span> hub = signalhub(<span class=\"hljs-string\">'swarm-example'</span>, [<span class=\"hljs-string\">'http://yourdomain.com'</span>])\n\n<span class=\"hljs-keyword\">var</span> sw = swarm(hub, {\n  <span class=\"hljs-attr\">wrtc</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'wrtc'</span>) <span class=\"hljs-comment\">// don't need this if used in the browser</span>\n})\n\nsw.on(<span class=\"hljs-string\">'peer'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">peer, id</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'connected to a new peer:'</span>, id)\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'total peers:'</span>, sw.peers.length)\n})\n\nsw.on(<span class=\"hljs-string\">'disconnect'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">peer, id</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'disconnected from a peer:'</span>, id)\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'total peers:'</span>, sw.peers.length)\n})\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> swarm = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webrtc-swarm'</span>)\n</code></pre>\n<h3 id=\"var-sw-swarmhub-opts\"><a href=\"#var-sw-swarmhub-opts\" class=\"anchor\"></a>var sw = swarm(hub, opts)</h3><p>Creates a new webrtc swarm using\n<a href=\"https://github.com/mafintosh/signalhub\">signalhub</a> <code>hub</code> for discovery and\nconnection brokering.</p>\n<p>Valid keys for <code>opts</code> include:</p>\n<ul>\n<li><code>wrtc</code> - (optional) a reference to the <code>wrtc</code> library, if using Node.</li>\n<li><code>uuid</code> - (optional) a unique identifier for this peer. One is generated for\nyou if not supplied.</li>\n<li><code>maxPeers</code> - (optional) the maximum number of peers you wish to connect to.\nDefaults to unlimited.</li>\n</ul>\n<p>Additional optional keys can be passed through to the underlying\n<a href=\"https://www.npmjs.com/package/simple-peer\">simple-peer</a> instances:</p>\n<ul>\n<li><code>channelConfig</code> -  custom webrtc data channel configuration (used by\n<code>createDataChannel</code>)</li>\n<li><code>config</code> - custom webrtc configuration (used by <code>RTCPeerConnection</code>\nconstructor)</li>\n<li><code>stream</code> - if video/voice is desired, pass stream returned from\n<code>getUserMedia</code></li>\n</ul>\n<h3 id=\"swclose\"><a href=\"#swclose\" class=\"anchor\"></a>sw.close()</h3><p>Disconnect from swarm</p>\n<h3 id=\"swonpeerorconnect-peer-id\"><a href=\"#swonpeerorconnect-peer-id\" class=\"anchor\"></a>sw.on(&#39;peer|connect&#39;, peer, id)</h3><p><code>peer</code> and <code>connect</code> are interchangeable. Fires when a connection has been\nestablished to a new peer <code>peer</code>, with unique id <code>id</code>.</p>\n<h3 id=\"swondisconnect-peer-id\"><a href=\"#swondisconnect-peer-id\" class=\"anchor\"></a>sw.on(&#39;disconnect&#39;, peer, id)</h3><p>Fires when an existing peer connection is lost.</p>\n<p><code>peer</code> is a <a href=\"https://www.npmjs.com/package/simple-peer\">simple-peer</a> instance.</p>\n<h3 id=\"swonclose\"><a href=\"#swonclose\" class=\"anchor\"></a>sw.on(&#39;close&#39;)</h3><p>Fires when all peer and signalhub connections are closed</p>\n<h3 id=\"swpeers\"><a href=\"#swpeers\" class=\"anchor\"></a>sw.peers</h3><p>A list of peers that <code>sw</code> is currently connected to.</p>\n<h3 id=\"swarmwebrtc_support\"><a href=\"#swarmwebrtc_support\" class=\"anchor\"></a>swarm.WEBRTC_SUPPORT</h3><p>Detect native WebRTC support in the javascript environment.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> swarm = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webrtc-swarm'</span>)\n\n<span class=\"hljs-keyword\">if</span> (swarm.WEBRTC_SUPPORT) {\n  <span class=\"hljs-comment\">// webrtc support!</span>\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-comment\">// fallback</span>\n}\n</code></pre>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","dat-swarm-defaults":"<h1 id=\"dat-swarm-defaults\"><a href=\"#dat-swarm-defaults\" class=\"anchor\"></a>Dat Swarm Defaults</h1><p>Use Dat defaults for <code>dns</code> and <code>dht</code> servers in <a href=\"https://github.com/karissa/hyperdiscovery\">hyperdiscovery</a> or <a href=\"https://github.com/mafintosh/discovery-swarm\">discovery-swarm</a>. The <em>dns</em> and <em>dht</em> servers are used to discover other peers.</p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>Create a config object and pass it to discovery swarm. </p>\n<p>Any options you specify will overwrite the defaults. See discovery swarm for options.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> Swarm = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'discovery-swarm'</span>)\n<span class=\"hljs-keyword\">var</span> defaults = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-swarm-defaults'</span>)\n\n<span class=\"hljs-keyword\">var</span> config = defaults({\n  <span class=\"hljs-attr\">stream</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> drive.createPeerStream()\n  }\n})\n<span class=\"hljs-keyword\">var</span> swarm = Swarm(config)\n</code></pre>\n","discovery-channel":"<h1 id=\"discovery-channel\"><a href=\"#discovery-channel\" class=\"anchor\"></a>discovery-channel</h1><p>Search for a key across multiple discovery networks and find peers who answer.</p>\n<p>Currently searches across and advertises on <a href=\"https://en.wikipedia.org/wiki/Mainline_DHT\">the Bittorrent DHT</a>, centralized DNS servers and <a href=\"https://en.wikipedia.org/wiki/Multicast_DNS\">Multicast DNS</a> simultaneously.</p>\n<p>Uses the <a href=\"https://github.com/feross/bittorrent-dht\">bittorrent-dht</a> and <a href=\"https://github.com/mafintosh/dns-discovery\">dns-discovery</a> modules.</p>\n<p>Also check out <a href=\"https://github.com/mafintosh/discovery-swarm\">discovery-swarm</a> which adds connection management on top of this module.</p>\n<p><a href=\"https://travis-ci.org/maxogden/discovery-channel\"><img src=\"https://img.shields.io/travis/maxogden/discovery-channel.svg?style=flat\" alt=\"travis\"></a></p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><h3 id=\"var-dc-requirediscovery-channel\"><a href=\"#var-dc-requirediscovery-channel\" class=\"anchor\"></a><code>var DC = require(&#39;discovery-channel&#39;)</code></h3><p>Returns a constructor</p>\n<h3 id=\"var-channel-dclessoptsgreater\"><a href=\"#var-channel-dclessoptsgreater\" class=\"anchor\"></a><code>var channel = DC(&lt;opts&gt;)</code></h3><p>Returns a new instance. <code>opts</code> is optional and can have the following properties:</p>\n<ul>\n<li><code>dns</code> - default <code>undefined</code>, if <code>false</code> will disable <code>dns</code> discovery, any other value type will be passed to the <code>dns-discovery</code> constructor</li>\n<li><code>dht</code> - default <code>undefined</code>, if <code>false</code> will disable <code>dht</code> discovery, any other value type will be passed to the <code>bittorrent-dht</code> constructor</li>\n<li><code>hash</code> - default <code>sha1</code>. provide a custom hash function to hash ids before they are stored in the dht / on dns servers.</li>\n</ul>\n<p>By default hashes are re-announced around every 10 min on the dht and 1 min using dns. Set <code>dht.interval</code> or <code>dns.interval</code> to change these.</p>\n<h3 id=\"channeljoinid-port-cb\"><a href=\"#channeljoinid-port-cb\" class=\"anchor\"></a><code>channel.join(id, [port], [cb])</code></h3><p>Perform a lookup across all networks for <code>id</code>. <code>id</code> can be a buffer or a string.\nSpecify <code>port</code> if you want to announce that you share <code>id</code> as well.</p>\n<p>If you specify <code>cb</code>, it will be called <strong>when the first round</strong> of discovery has completed. But only on the first round.</p>\n<h3 id=\"channelleaveid-port\"><a href=\"#channelleaveid-port\" class=\"anchor\"></a><code>channel.leave(id, [port])</code></h3><p>Stop looking for <code>id</code>. <code>id</code> can be a buffer or a string.\nSpecify <code>port</code> to stop announcing that you share <code>id</code> as well.</p>\n<h3 id=\"channelupdate\"><a href=\"#channelupdate\" class=\"anchor\"></a><code>channel.update()</code></h3><p>Force announce / lookup all joined hashes</p>\n<h3 id=\"var-list-channellist\"><a href=\"#var-list-channellist\" class=\"anchor\"></a><code>var list = channel.list()</code></h3><p>List all the channels you have joined. The returned array items look like this</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">id</span>: &lt;Buffer&gt;,\n  port: &lt;port you are announcing&gt;\n}\n</code></pre>\n<h3 id=\"channelonpeer-id-peer-type\"><a href=\"#channelonpeer-id-peer-type\" class=\"anchor\"></a><code>channel.on(&#39;peer&#39;, id, peer, type)</code></h3><p>Emitted when a peer answers your query.</p>\n<ul>\n<li><code>id</code> is the id (as a buffer) this peer was discovered for</li>\n<li><code>peer</code> is the peer that was discovered <code>{port: port, host: host}</code></li>\n<li><code>type</code> is the network type (one of <code>[&#39;dht&#39;, &#39;dns&#39;]</code>)</li>\n</ul>\n<h3 id=\"channeldestroycb\"><a href=\"#channeldestroycb\" class=\"anchor\"></a><code>channel.destroy(cb)</code></h3><p>Stops all lookups and advertisements and call <code>cb</code> when done.</p>\n<h3 id=\"channelonclose\"><a href=\"#channelonclose\" class=\"anchor\"></a><code>channel.on(&#39;close&#39;)</code></h3><p>Emitted when the channel is destroyed</p>\n","dns-discovery":"<h1 id=\"dns-discovery\"><a href=\"#dns-discovery\" class=\"anchor\"></a>dns-discovery</h1><p>Discovery peers in a distributed system using regular dns and multicast dns.</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> dns-discovery\n</code></pre><p><a href=\"http://travis-ci.org/mafintosh/dns-discovery\"><img src=\"http://img.shields.io/travis/mafintosh/dns-discovery.svg?style=flat\" alt=\"build status\"></a></p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> discovery = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dns-discovery'</span>)\n\n<span class=\"hljs-keyword\">var</span> disc1 = discovery()\n<span class=\"hljs-keyword\">var</span> disc2 = discovery()\n\ndisc1.on(<span class=\"hljs-string\">'peer'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name, peer</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(name, peer)\n})\n\n<span class=\"hljs-comment\">// announce an app</span>\ndisc2.announce(<span class=\"hljs-string\">'test-app'</span>, <span class=\"hljs-number\">9090</span>)\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h4 id=\"var-disc-discoveryoptions\"><a href=\"#var-disc-discoveryoptions\" class=\"anchor\"></a><code>var disc = discovery([options])</code></h4><p>Create a new discovery instance. Options include:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">server</span>: <span class=\"hljs-string\">'discovery.example.com:9090'</span>, <span class=\"hljs-comment\">// put a centralized dns discovery server here</span>\n  ttl: someSeconds, <span class=\"hljs-comment\">// ttl for records in seconds. defaults to Infinity.</span>\n  limit: someLimit, <span class=\"hljs-comment\">// max number of records stored. defaults to 10000.</span>\n  multicast: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// use multicast-dns. defaults to true.</span>\n  domain: <span class=\"hljs-string\">'my-domain.com'</span>, <span class=\"hljs-comment\">// top-level domain to use for records. defaults to dns-discovery.local</span>\n  socket: someUdpSocket, <span class=\"hljs-comment\">// use this udp socket as the client socket</span>\n  loopback: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// discover yourself over multicast</span>\n}\n</code></pre>\n<p>If you have more than one discovery server you can specify an array</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">server</span>: [\n    <span class=\"hljs-string\">'discovery.example.com:9090'</span>,\n    <span class=\"hljs-string\">'another.discovery.example.com'</span>\n  ]\n}\n</code></pre>\n<h4 id=\"disclookupname-callback\"><a href=\"#disclookupname-callback\" class=\"anchor\"></a><code>disc.lookup(name, [callback])</code></h4><p>Do a lookup for a specific app name. When new peers are discovered for this name peer events will be emitted</p>\n<pre><code class=\"lang-js\">disc.on(<span class=\"hljs-string\">'peer'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name, peer</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(name) <span class=\"hljs-comment\">// app name this peer was discovered for</span>\n  <span class=\"hljs-built_in\">console</span>.log(peer) <span class=\"hljs-comment\">// {host: 'some-ip', port: somePort}</span>\n})\n</code></pre>\n<h4 id=\"discannouncename-port-options-callback\"><a href=\"#discannouncename-port-options-callback\" class=\"anchor\"></a><code>disc.announce(name, port, [options], [callback])</code></h4><p>Announce a new port for a specific app name. Announce also does a lookup so you don&#39;t need to do that afterwards.</p>\n<p>If you want to specify a public port (a port that is reachable from outside your firewall) you can set the <code>publicPort: port</code>\noption. This will announce the public port to your list of dns servers and use the other port over multicast.</p>\n<p>You can also set <code>impliedPort: true</code> to announce the public port of the dns socket to the list of dns servers.</p>\n<h4 id=\"discunannouncename-port-options-callback\"><a href=\"#discunannouncename-port-options-callback\" class=\"anchor\"></a><code>disc.unannounce(name, port, [options], [callback])</code></h4><p>Stop announcing a port for an app. Has the same options as .announce</p>\n<h4 id=\"disclistenport-callback\"><a href=\"#disclistenport-callback\" class=\"anchor\"></a><code>disc.listen([port], [callback])</code></h4><p>Listen for dns records on a specific port. You <em>only</em> need to call this if you want to turn your peer into a discovery server that other peers can use to store peer objects on.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> server = discovery()\nserver.listen(<span class=\"hljs-number\">9090</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> disc = discovery({<span class=\"hljs-attr\">server</span>: <span class=\"hljs-string\">'localhost:9090'</span>})\n  disc.announce(<span class=\"hljs-string\">'test-app'</span>, <span class=\"hljs-number\">8080</span>) <span class=\"hljs-comment\">// will announce this record to the above discovery server</span>\n})\n</code></pre>\n<p>You can setup a discovery server to announce records on the internet as multicast-dns only works on a local network.\nThe port defaults to <code>53</code> which is the standard dns port. Additionally it tries to bind to <code>5300</code> to support networks that filter dns traffic.</p>\n<h4 id=\"discdestroyonclose\"><a href=\"#discdestroyonclose\" class=\"anchor\"></a><code>disc.destroy([onclose])</code></h4><p>Destroy the discovery instance. Will destroy the underlying udp socket as well.</p>\n<h2 id=\"cli\"><a href=\"#cli\" class=\"anchor\"></a>CLI</h2><p>There is a cli tool available as well</p>\n<pre><code class=\"lang-sh\">npm install -g dns-discovery\ndns-discovery <span class=\"hljs-built_in\">help</span>\n</code></pre>\n<p>To announce a service do</p>\n<pre><code class=\"lang-sh\"><span class=\"hljs-comment\"># will announce test-app over multicast-dns</span>\ndns-discovery announce <span class=\"hljs-built_in\">test</span>-app --port=8080\n</code></pre>\n<p>To look it up</p>\n<pre><code class=\"lang-sh\"><span class=\"hljs-comment\"># will print services when they are found</span>\ndns-discovery lookup <span class=\"hljs-built_in\">test</span>-app\n</code></pre>\n<p>To run a discovery server</p>\n<pre><code class=\"lang-sh\"><span class=\"hljs-comment\"># listen for services and store them with a ttl of 30s</span>\ndns-discovery listen --port=9090 --ttl=30\n</code></pre>\n<p>And to announce to that discovery server (and over multicast-dns)</p>\n<pre><code class=\"lang-sh\"><span class=\"hljs-comment\"># replace example.com with the host of the server running the discovery server</span>\ndns-discovery announce <span class=\"hljs-built_in\">test</span>-app --server=example.com:9090 --port=9090\n</code></pre>\n<p>And finally to lookup using that discovery server (and multicast-dns)</p>\n<pre><code class=\"lang-sh\">dns-discovery lookup <span class=\"hljs-built_in\">test</span>-app --server=example.com:9090\n</code></pre>\n<p>You can use any other dns client to resolve the records as well. For example using <code>dig</code>.</p>\n<pre><code class=\"lang-sh\"><span class=\"hljs-comment\"># dig requires the discovery server to run on port 53</span>\ndig @discovery.example.com <span class=\"hljs-built_in\">test</span>-app SRV\n</code></pre>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","multicast-dns":"<h1 id=\"multicast-dns\"><a href=\"#multicast-dns\" class=\"anchor\"></a>multicast-dns</h1><p>Low level multicast-dns implementation in pure javascript</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> multicast-dns\n</code></pre><p><a href=\"http://travis-ci.org/mafintosh/multicast-dns\"><img src=\"http://img.shields.io/travis/mafintosh/multicast-dns.svg?style=flat\" alt=\"build status\"></a></p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> mdns = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'multicast-dns'</span>)()\n\nmdns.on(<span class=\"hljs-string\">'response'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'got a response packet:'</span>, response)\n})\n\nmdns.on(<span class=\"hljs-string\">'query'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">query</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'got a query packet:'</span>, query)\n})\n\n<span class=\"hljs-comment\">// lets query for an A record for 'brunhilde.local'</span>\nmdns.query({\n  <span class=\"hljs-attr\">questions</span>:[{\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'brunhilde.local'</span>,\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'A'</span>\n  }]\n})\n</code></pre>\n<p>Running the above (change <code>brunhilde.local</code> to <code>your-own-hostname.local</code>) will print an echo of the query packet first</p>\n<pre><code class=\"lang-js\">got a query packet: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'query'</span>,\n  <span class=\"hljs-attr\">questions</span>: [ { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'brunhilde.local'</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'A'</span>, <span class=\"hljs-attr\">class</span>: <span class=\"hljs-number\">1</span> } ],\n  <span class=\"hljs-attr\">answers</span>: [],\n  <span class=\"hljs-attr\">authorities</span>: [],\n  <span class=\"hljs-attr\">additionals</span>: [] }\n</code></pre>\n<p>And then a response packet</p>\n<pre><code class=\"lang-js\">got a response packet: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'response'</span>,\n  <span class=\"hljs-attr\">questions</span>: [],\n  <span class=\"hljs-attr\">answers</span>:\n   [ { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'brunhilde.local'</span>,\n       <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'A'</span>,\n       <span class=\"hljs-attr\">class</span>: <span class=\"hljs-number\">1</span>,\n       <span class=\"hljs-attr\">ttl</span>: <span class=\"hljs-number\">120</span>,\n       <span class=\"hljs-attr\">flush</span>: <span class=\"hljs-literal\">true</span>,\n       <span class=\"hljs-attr\">data</span>: <span class=\"hljs-string\">'192.168.1.5'</span> } ],\n  <span class=\"hljs-attr\">authorities</span>: [],\n  <span class=\"hljs-attr\">additionals</span>:\n   [ { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'brunhilde.local'</span>,\n       <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'A'</span>,\n       <span class=\"hljs-attr\">class</span>: <span class=\"hljs-number\">1</span>,\n       <span class=\"hljs-attr\">ttl</span>: <span class=\"hljs-number\">120</span>,\n       <span class=\"hljs-attr\">flush</span>: <span class=\"hljs-literal\">true</span>,\n       <span class=\"hljs-attr\">data</span>: <span class=\"hljs-string\">'192.168.1.5'</span> },\n     { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'brunhilde.local'</span>,\n       <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'AAAA'</span>,\n       <span class=\"hljs-attr\">class</span>: <span class=\"hljs-number\">1</span>,\n       <span class=\"hljs-attr\">ttl</span>: <span class=\"hljs-number\">120</span>,\n       <span class=\"hljs-attr\">flush</span>: <span class=\"hljs-literal\">true</span>,\n       <span class=\"hljs-attr\">data</span>: <span class=\"hljs-string\">'fe80::5ef9:38ff:fe8c:ceaa'</span> } ] }\n</code></pre>\n<h1 id=\"cli\"><a href=\"#cli\" class=\"anchor\"></a>CLI</h1><pre><code>npm <span class=\"hljs-keyword\">install</span> -g multicast-dns\n</code></pre><pre><code><span class=\"hljs-selector-tag\">multicast-dns</span> <span class=\"hljs-selector-tag\">brunhilde</span><span class=\"hljs-selector-class\">.local</span>\n&gt; 192<span class=\"hljs-selector-class\">.168</span><span class=\"hljs-selector-class\">.1</span><span class=\"hljs-selector-class\">.1</span>\n</code></pre><h1 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h1><p>A packet has the following format</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">questions</span>: [{\n    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">'brunhilde.local'</span>,\n    <span class=\"hljs-attr\">type</span>:<span class=\"hljs-string\">'A'</span>\n  }],\n  <span class=\"hljs-attr\">answers</span>: [{\n    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">'brunhilde.local'</span>,\n    <span class=\"hljs-attr\">type</span>:<span class=\"hljs-string\">'A'</span>,\n    <span class=\"hljs-attr\">ttl</span>:seconds,\n    <span class=\"hljs-attr\">data</span>:(record type specific data)\n  }],\n  <span class=\"hljs-attr\">additionals</span>: [\n    (same format <span class=\"hljs-keyword\">as</span> answers)\n  ],\n  <span class=\"hljs-attr\">authorities</span>: [\n    (same format <span class=\"hljs-keyword\">as</span> answers)\n  ]\n}\n</code></pre>\n<p>Currently data from <code>SRV</code>, <code>A</code>, <code>PTR</code>, <code>TXT</code>, <code>AAAA</code> and <code>HINFO</code> records is passed</p>\n<h4 id=\"mdns-multicastdnsoptions\"><a href=\"#mdns-multicastdnsoptions\" class=\"anchor\"></a><code>mdns = multicastdns([options])</code></h4><p>Creates a new <code>mdns</code> instance. Options can contain the following</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">multicast</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// use udp multicasting</span>\n  interface: <span class=\"hljs-string\">'192.168.0.2'</span> <span class=\"hljs-comment\">// explicitly specify a network interface. defaults to all</span>\n  port: <span class=\"hljs-number\">5353</span>, <span class=\"hljs-comment\">// set the udp port</span>\n  ip: <span class=\"hljs-string\">'224.0.0.251'</span>, <span class=\"hljs-comment\">// set the udp ip</span>\n  ttl: <span class=\"hljs-number\">255</span>, <span class=\"hljs-comment\">// set the multicast ttl</span>\n  loopback: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// receive your own packets</span>\n  reuseAddr: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// set the reuseAddr option when creating the socket (requires node &gt;=0.11.13)</span>\n}\n</code></pre>\n<h4 id=\"mdnsonquery-packet-rinfo\"><a href=\"#mdnsonquery-packet-rinfo\" class=\"anchor\"></a><code>mdns.on(&#39;query&#39;, (packet, rinfo))</code></h4><p>Emitted when a query packet is received.</p>\n<pre><code class=\"lang-js\">mdns.on(<span class=\"hljs-string\">'query'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">query</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (query.questions[<span class=\"hljs-number\">0</span>] &amp;&amp; query.questions[<span class=\"hljs-number\">0</span>].name === <span class=\"hljs-string\">'brunhilde.local'</span>) {\n    mdns.respond(someResponse) <span class=\"hljs-comment\">// see below</span>\n  }\n})\n</code></pre>\n<h4 id=\"mdnsonresponse-packet-rinfo\"><a href=\"#mdnsonresponse-packet-rinfo\" class=\"anchor\"></a><code>mdns.on(&#39;response&#39;, (packet, rinfo))</code></h4><p>Emitted when a response packet is received.</p>\n<p>The response might not be a response to a query you send as this\nis the result of someone multicasting a response.</p>\n<h4 id=\"mdnsquerypacket-cb\"><a href=\"#mdnsquerypacket-cb\" class=\"anchor\"></a><code>mdns.query(packet, [cb])</code></h4><p>Send a dns query. The callback will be called when the packet was sent.</p>\n<p>The following shorthands are equivalent</p>\n<pre><code class=\"lang-js\">mdns.query(<span class=\"hljs-string\">'brunhilde.local'</span>, <span class=\"hljs-string\">'A'</span>)\nmdns.query([{<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">'brunhilde.local'</span>, <span class=\"hljs-attr\">type</span>:<span class=\"hljs-string\">'A'</span>}])\nmdns.query({\n  <span class=\"hljs-attr\">questions</span>: [{<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">'brunhilde.local'</span>, <span class=\"hljs-attr\">type</span>:<span class=\"hljs-string\">'A'</span>}]\n})\n</code></pre>\n<h4 id=\"mdnsrespondpacket-cb\"><a href=\"#mdnsrespondpacket-cb\" class=\"anchor\"></a><code>mdns.respond(packet, [cb])</code></h4><p>Send a dns response. The callback will be called when the packet was sent.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// reply with a SRV and a A record as an answer</span>\nmdns.respond({\n  <span class=\"hljs-attr\">answers</span>: [{\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'my-service'</span>,\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'SRV'</span>,\n    <span class=\"hljs-attr\">data</span>: {\n      <span class=\"hljs-attr\">port</span>:<span class=\"hljs-number\">9999</span>,\n      <span class=\"hljs-attr\">weigth</span>: <span class=\"hljs-number\">0</span>,\n      <span class=\"hljs-attr\">priority</span>: <span class=\"hljs-number\">10</span>,\n      <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">'my-service.example.com'</span>\n    }\n  }, {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'brunhilde.local'</span>,\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'A'</span>,\n    <span class=\"hljs-attr\">ttl</span>: <span class=\"hljs-number\">300</span>,\n    <span class=\"hljs-attr\">data</span>: <span class=\"hljs-string\">'192.168.1.5'</span>\n  }]\n})\n</code></pre>\n<p>The following shorthands are equivalent</p>\n<pre><code class=\"lang-js\">mdns.respond([{<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">'brunhilde.local'</span>, <span class=\"hljs-attr\">type</span>:<span class=\"hljs-string\">'A'</span>, <span class=\"hljs-attr\">data</span>:<span class=\"hljs-string\">'192.158.1.5'</span>}])\nmdns.respond({\n  <span class=\"hljs-attr\">answers</span>: [{<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">'brunhilde.local'</span>, <span class=\"hljs-attr\">type</span>:<span class=\"hljs-string\">'A'</span>, <span class=\"hljs-attr\">data</span>:<span class=\"hljs-string\">'192.158.1.5'</span>}]\n})\n</code></pre>\n<h4 id=\"mdnsdestroy\"><a href=\"#mdnsdestroy\" class=\"anchor\"></a><code>mdns.destroy()</code></h4><p>Destroy the mdns instance. Closes the udp socket.</p>\n<h1 id=\"development\"><a href=\"#development\" class=\"anchor\"></a>Development</h1><p>To start hacking on this module you can use this example to get started</p>\n<pre><code>git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">git</span>://github.com/mafintosh/multicast-dns.git\nnpm install\n<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">example</span>.js\n<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">cli</span>.js $(hostname).local\n</code></pre><h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","bittorrent-dht":"<h1 id=\"bittorrent-dht-travistravis-imagetravis-url-npmnpm-imagenpm-url-downloadsdownloads-imagedownloads-url-javascript-style-guidestandard-imagestandard-url\"><a href=\"#bittorrent-dht-travistravis-imagetravis-url-npmnpm-imagenpm-url-downloadsdownloads-imagedownloads-url-javascript-style-guidestandard-imagestandard-url\" class=\"anchor\"></a>bittorrent-dht <a href=\"https://travis-ci.org/webtorrent/bittorrent-dht\"><img src=\"https://img.shields.io/travis/webtorrent/bittorrent-dht/master.svg\" alt=\"travis\"></a> <a href=\"https://npmjs.org/package/bittorrent-dht\"><img src=\"https://img.shields.io/npm/v/bittorrent-dht.svg\" alt=\"npm\"></a> <a href=\"https://npmjs.org/package/bittorrent-dht\"><img src=\"https://img.shields.io/npm/dm/bittorrent-dht.svg\" alt=\"downloads\"></a> <a href=\"https://standardjs.com\"><img src=\"https://img.shields.io/badge/code_style-standard-brightgreen.svg\" alt=\"javascript style guide\"></a></h1><h3 id=\"simple-robust-bittorrent-dht-implementation\"><a href=\"#simple-robust-bittorrent-dht-implementation\" class=\"anchor\"></a>Simple, robust, BitTorrent DHT implementation</h3><p>Node.js implementation of the <a href=\"http://www.bittorrent.org/beps/bep_0005.html\">BitTorrent DHT protocol</a>. BitTorrent DHT is the main peer discovery layer for BitTorrent, which allows for trackerless torrents. DHTs are awesome!</p>\n<p>This module is used by <a href=\"http://webtorrent.io\">WebTorrent</a>.</p>\n<h3 id=\"features\"><a href=\"#features\" class=\"anchor\"></a>features</h3><ul>\n<li>complete implementation of the DHT protocol in JavaScript</li>\n<li>follows <a href=\"http://www.bittorrent.org/beps/bep_0005.html\">the spec</a></li>\n<li>supports <a href=\"http://bittorrent.org/beps/bep_0044.html\">BEP44</a> for storing arbitrary data in the DHT</li>\n<li>robust and well-tested<ul>\n<li>Comprehensive, fully-offline test suite</li>\n<li>Used by <a href=\"http://webtorrent.io\">WebTorrent</a>, <a href=\"https://www.npmjs.com/package/peerflix\">peerflix</a>, and <a href=\"https://mafintosh.github.io/playback/\">Playback</a></li>\n</ul>\n</li>\n<li>efficient recursive lookup algorithm minimizes UDP traffic</li>\n<li>supports multiple, concurrent lookups using the same routing table</li>\n</ul>\n<p>Also see <a href=\"https://www.npmjs.com/package/bittorrent-tracker\">bittorrent-tracker</a>.</p>\n<h3 id=\"install\"><a href=\"#install\" class=\"anchor\"></a>install</h3><pre><code>npm <span class=\"hljs-keyword\">install</span> bittorrent-dht\n</code></pre><h3 id=\"example\"><a href=\"#example\" class=\"anchor\"></a>example</h3><pre><code>npm <span class=\"hljs-keyword\">install</span> magnet-uri\n</code></pre><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> DHT = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'bittorrent-dht'</span>)\n<span class=\"hljs-keyword\">var</span> magnet = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'magnet-uri'</span>)\n\n<span class=\"hljs-keyword\">var</span> uri = <span class=\"hljs-string\">'magnet:?xt=urn:btih:e3811b9539cacff680e418124272177c47477157'</span>\n<span class=\"hljs-keyword\">var</span> parsed = magnet(uri)\n\n<span class=\"hljs-built_in\">console</span>.log(parsed.infoHash) <span class=\"hljs-comment\">// 'e3811b9539cacff680e418124272177c47477157'</span>\n\n<span class=\"hljs-keyword\">var</span> dht = <span class=\"hljs-keyword\">new</span> DHT()\n\ndht.listen(<span class=\"hljs-number\">20000</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'now listening'</span>)\n})\n\ndht.on(<span class=\"hljs-string\">'peer'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">peer, infoHash, from</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'found potential peer '</span> + peer.host + <span class=\"hljs-string\">':'</span> + peer.port + <span class=\"hljs-string\">' through '</span> + <span class=\"hljs-keyword\">from</span>.address + <span class=\"hljs-string\">':'</span> + <span class=\"hljs-keyword\">from</span>.port)\n})\n\n<span class=\"hljs-comment\">// find peers for the given torrent info hash</span>\ndht.lookup(parsed.infoHash)\n</code></pre>\n<h3 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>api</h3><h4 id=\"dht-new-dhtopts\"><a href=\"#dht-new-dhtopts\" class=\"anchor\"></a><code>dht = new DHT([opts])</code></h4><p>Create a new <code>dht</code> instance.</p>\n<p>If <code>opts</code> is specified, then the default options (shown below) will be overridden.</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">nodeId</span>: <span class=\"hljs-string\">''</span>,     <span class=\"hljs-comment\">// 160-bit DHT node ID (Buffer or hex string, default: randomly generated)</span>\n  bootstrap: [],  <span class=\"hljs-comment\">// bootstrap servers (default: router.bittorrent.com:6881, router.utorrent.com:6881, dht.transmissionbt.com:6881)</span>\n  host: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">// host of local peer, if specified then announces get added to local table (String, disabled by default)</span>\n  concurrency: <span class=\"hljs-number\">16</span> <span class=\"hljs-comment\">// k-rpc option to specify maximum concurrent UDP requests allowed (Number, 16 by default)</span>\n  hash: <span class=\"hljs-built_in\">Function</span>  <span class=\"hljs-comment\">// custom hash function to use (Function, SHA1 by default)</span>\n}\n</code></pre>\n<p>To use <code>dht_store</code>, set <code>opts.verify</code> to an ed25519 supercop/ref10\nimplementation. <code>opts.verify(signature, value, publicKey)</code> should return a\nboolean whether the <code>signature</code> and value <code>buffers</code> were generated by the\n<code>publicKey</code>.</p>\n<p>For example, for <code>dht_store</code> you can do:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> ed = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'ed25519-supercop'</span>)\n<span class=\"hljs-keyword\">var</span> dht = <span class=\"hljs-keyword\">new</span> DHT({ <span class=\"hljs-attr\">verify</span>: ed.verify })\n</code></pre>\n<h4 id=\"dhtlookupinfohash-callback\"><a href=\"#dhtlookupinfohash-callback\" class=\"anchor\"></a><code>dht.lookup(infoHash, [callback])</code></h4><p>Find peers for the given info hash.</p>\n<p>This does a recursive lookup in the DHT. Potential peers that are discovered are emitted\nas <code>peer</code> events. See the <code>peer</code> event below for more info.</p>\n<p><code>infoHash</code> can be a string or Buffer. <code>callback</code> is called when the recursive lookup has\nterminated, and is called with two paramaters. The first is an <code>Error</code> or null. The second\nis the number of nodes found that had peers. You usually don&#39;t need to use this info and\ncan simply listen for <code>peer</code> events.</p>\n<p>Returns an <code>abort()</code> function that would allow us to abort the query.</p>\n<h4 id=\"dhtlistenport-address-onlistening\"><a href=\"#dhtlistenport-address-onlistening\" class=\"anchor\"></a><code>dht.listen([port], [address], [onlistening])</code></h4><p>Make the DHT listen on the given <code>port</code>. If <code>port</code> is undefined, an available port is\nautomatically picked.</p>\n<p>If <code>address</code> is undefined, the DHT will try to listen on all addresses.</p>\n<p>If <code>onlistening</code> is defined, it is attached to the <code>listening</code> event.</p>\n<h4 id=\"dhtaddress\"><a href=\"#dhtaddress\" class=\"anchor\"></a><code>dht.address()</code></h4><p>Returns an object containing the address information for the listening socket of the DHT.\nThis object contains <code>address</code>, <code>family</code> and <code>port</code> properties.</p>\n<h4 id=\"dhtannounceinfohash-port-callback\"><a href=\"#dhtannounceinfohash-port-callback\" class=\"anchor\"></a><code>dht.announce(infoHash, [port], [callback])</code></h4><p>Announce that the peer, controlling the querying node, is downloading a torrent on a port.</p>\n<p>If you omit <code>port</code> the implied port option will be set and other peers will use the public\ndht port as your announced port.</p>\n<p>If <code>dht.announce</code> is called soon (&lt; 5 minutes) after <code>dht.lookup</code>, then the routing table\ngenerated during the lookup can be re-used, because the &quot;tokens&quot; sent by each node will\nstill be valid.</p>\n<p>If <code>dht.announce</code> is called and there is no cached routing table, then a <code>dht.lookup</code> will\nfirst be performed to discover relevant nodes and get valid &quot;tokens&quot; from each of them.\nThis will take longer.</p>\n<p>A &quot;token&quot; is an opaque value that must be presented for a node to announce that its\ncontrolling peer is downloading a torrent. It must present the token received from the\nsame queried node in a recent query for peers. This is to prevent malicious hosts from\nsigning up other hosts for torrents. <strong>All token management is handled internally by this\nmodule.</strong></p>\n<p><code>callback</code> will be called when the announce operation has completed, and is called with\na single parameter that is an <code>Error</code> or null.</p>\n<h4 id=\"arr-dhttojson\"><a href=\"#arr-dhttojson\" class=\"anchor\"></a><code>arr = dht.toJSON()</code></h4><p>Returns the current state of the DHT, including DHT nodes and BEP44 values.</p>\n<pre><code class=\"lang-json\">{\n  <span class=\"hljs-attr\">\"nodes\"</span>: [],\n  <span class=\"hljs-attr\">\"values\"</span>: {}\n}\n</code></pre>\n<p>The DHT nodes, in particular, are useful for persisting the DHT to disk between restarts\nof a BitTorrent client (as recommended by the spec). Each node in the array is an object\nwith <code>host</code> (string) and <code>port</code> (number) properties.</p>\n<p>To restore the DHT nodes when instantiating a new <code>DHT</code> object, simply loop over the nodes in the array and add them with the <code>addNode</code> method.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> dht1 = <span class=\"hljs-keyword\">new</span> DHT()\n\n<span class=\"hljs-comment\">// some time passes ...</span>\n\n<span class=\"hljs-comment\">// destroy the dht</span>\n<span class=\"hljs-keyword\">var</span> nodes = dht1.toJSON().nodes\ndht1.destroy()\n\n<span class=\"hljs-comment\">// some time passes ...</span>\n\n<span class=\"hljs-comment\">// initialize a new dht with the same routing table as the first</span>\n<span class=\"hljs-keyword\">var</span> dht2 = <span class=\"hljs-keyword\">new</span> DHT()\n\nnodes.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node</span>) </span>{\n  dht2.addNode(node)\n})\n</code></pre>\n<h4 id=\"dhtaddnodenode\"><a href=\"#dhtaddnodenode\" class=\"anchor\"></a><code>dht.addNode(node)</code></h4><p>Manually add a node to the DHT routing table. If there is space in the routing table (or\nan unresponsive node can be evicted to make space), the node will be added. If not, the\nnode will not be added. This is useful to call when a peer wire sends a <code>PORT</code> message to\nshare their DHT port.</p>\n<p>A node should look like this:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">host</span>: nodeHost,\n  <span class=\"hljs-attr\">port</span>: nodePort\n}\n</code></pre>\n<h4 id=\"dhtdestroycallback\"><a href=\"#dhtdestroycallback\" class=\"anchor\"></a><code>dht.destroy([callback])</code></h4><p>Destroy the DHT. Closes the socket and cleans up large data structure resources.</p>\n<h4 id=\"dhtputopts-callback\"><a href=\"#dhtputopts-callback\" class=\"anchor\"></a><code>dht.put(opts, callback)</code></h4><p>Write an arbitrary payload to the DHT.\n(<a href=\"http://bittorrent.org/beps/bep_0044.html\">BEP 44</a>).</p>\n<p>For all requests, you must specify:</p>\n<ul>\n<li><code>opts.v</code> - a buffer payload to write, less than 1000 bytes</li>\n</ul>\n<p>If you only specify <code>opts.v</code>, the content is considered immutable and the hash\nwill just be the hash of the content.</p>\n<p>Here is a simple example of creating some immutable content on the dht:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> DHT = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'bittorrent-dht'</span>)\n<span class=\"hljs-keyword\">var</span> dht = <span class=\"hljs-keyword\">new</span> DHT()\n<span class=\"hljs-keyword\">var</span> value = Buffer.alloc(<span class=\"hljs-number\">200</span>).fill(<span class=\"hljs-string\">'abc'</span>)\n\ndht.put({ <span class=\"hljs-attr\">v</span>: value }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, hash</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">'error='</span>, err)\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'hash='</span>, hash)\n})\n</code></pre>\n<p>For mutable content, the hash will be the hash of the public key, <code>opts.k</code>.\nThese options are available:</p>\n<ul>\n<li><code>opts.k</code> - ed25519 public key buffer (32 bytes) (REQUIRED)</li>\n<li><code>opts.sign(buf)</code> - function to generate an ed25519 signature buffer (64 bytes) corresponding to the <code>opts.k</code> public key (REQUIRED)</li>\n<li><code>opts.seq</code> - optional sequence (integer), must monotonically increase</li>\n<li><code>opts.cas</code> - optional previous sequence for compare-and-swap</li>\n<li><code>opts.salt</code> - optional salt buffer to include (&lt; 64 bytes) when calculating\nthe hash of the content. You can use a salt to have multiple mutable addresses\nfor the same public key <code>opts.k</code>.</li>\n</ul>\n<p>Note that bittorrent bep44 uses ed25519 supercop/ref10 keys, NOT nacl/sodium\nkeys. You can use the <a href=\"https://npmjs.com/package/ed25519-supercop\">ed25519-supercop</a>\npackage to generate the appropriate signatures or\n<a href=\"https://npmjs.com/package/bittorrent-dht-store-keypair\">bittorrent-dht-store-keypair</a>\nfor a more convenient version.</p>\n<p>To make a mutable update, you will need to create an elliptic key and pack\nvalues precisely according to the specification, like so:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> ed = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'ed25519-supercop'</span>)\n<span class=\"hljs-keyword\">var</span> keypair = ed.createKeyPair(ed.createSeed())\n\n<span class=\"hljs-keyword\">var</span> value = Buffer.alloc(<span class=\"hljs-number\">200</span>).fill(<span class=\"hljs-string\">'whatever'</span>) <span class=\"hljs-comment\">// the payload you want to send</span>\n<span class=\"hljs-keyword\">var</span> opts = {\n  <span class=\"hljs-attr\">k</span>: keypair.publicKey,\n  <span class=\"hljs-attr\">seq</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attr\">v</span>: value,\n  <span class=\"hljs-attr\">sign</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">buf</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> ed.sign(buf, keypair.publicKey, keypair.secretKey)\n  }\n}\n\n<span class=\"hljs-keyword\">var</span> DHT = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'bittorrent-dht'</span>)\n<span class=\"hljs-keyword\">var</span> dht = <span class=\"hljs-keyword\">new</span> DHT\n\ndht.put(opts, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, hash</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">'error='</span>, err)\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'hash='</span>, hash)\n})\n</code></pre>\n<p>In either mutable or immutable forms, <code>callback(error, hash, n)</code> fires with an\n<code>error</code> if no nodes were able to store the <code>value</code>. <code>n</code> is set the amount of peers\nthat accepted the <code>put</code> and <code>hash</code>, the location where the mutable or immutable\ncontent can be retrieved (with <code>dht.get(hash)</code>).</p>\n<p>Note that you should call <code>.put()</code> every hour for content that you want to keep\nalive, since nodes may discard data nodes older than 2 hours.</p>\n<p>If you receive a key/value pair and you want to re-add to the dht it to keep it\nalive you can just <code>put</code> it again.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> ed = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'ed25519-supercop'</span>)\n<span class=\"hljs-keyword\">var</span> dht = <span class=\"hljs-keyword\">new</span> DHT({ <span class=\"hljs-attr\">verify</span>: ed.verify }) <span class=\"hljs-comment\">// you MUST specify the \"verify\" param if you want to get mutable content, otherwise null will be returned</span>\n\ndht.get(key, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{\n  dht.put(res, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// re-added the key/value pair</span>\n  })\n})\n</code></pre>\n<h4 id=\"dhtgethash-callback\"><a href=\"#dhtgethash-callback\" class=\"anchor\"></a><code>dht.get(hash, callback)</code></h4><p>Read a data record (created with <code>.put()</code>) from the DHT.\n(<a href=\"http://bittorrent.org/beps/bep_0044.html\">BEP 44</a>)</p>\n<p>Given <code>hash</code>, a hex string or buffer, lookup data content from the DHT, sending the\nresult in <code>callback(err, res)</code>.</p>\n<p><code>res</code> objects are similar to the options objects written to the DHT with\n<code>.put()</code>:</p>\n<ul>\n<li><code>res.v</code> - the value put in</li>\n<li><code>res.id</code> - the node that returned the content</li>\n<li><code>res.k</code> - the public key (only present for mutable data)</li>\n<li><code>res.sig</code> - the signature (only present for mutable data)</li>\n<li><code>res.seq</code> - the sequence (optional, only present for mutable data)</li>\n<li><code>res.salt</code> - the salt (optional, only present for mutable data)</li>\n</ul>\n<h3 id=\"events\"><a href=\"#events\" class=\"anchor\"></a>events</h3><h4 id=\"dhtonready-function\"><a href=\"#dhtonready-function\" class=\"anchor\"></a><code>dht.on(&#39;ready&#39;, function () { ... })</code></h4><p>Emitted when the DHT is fully bootstrapped (i.e. the routing table is sufficiently\npopulated via the bootstrap nodes). Note that it is okay to do lookups before the &#39;ready&#39;\nevent fires.</p>\n<p>Note: If you initialize the DHT with the <code>{ bootstrap: false }</code> option, then the &#39;ready&#39;\nevent will fire on the next tick even if there are not any nodes in the routing table.\nIt is assumed that you will manually populate the routing table with <code>dht.addNode</code> if you\npass this option.</p>\n<h4 id=\"dhtonlistening-function\"><a href=\"#dhtonlistening-function\" class=\"anchor\"></a><code>dht.on(&#39;listening&#39;, function () { ... })</code></h4><p>Emitted when the DHT is listening.</p>\n<h4 id=\"dhtonpeer-function-peer-infohash-from\"><a href=\"#dhtonpeer-function-peer-infohash-from\" class=\"anchor\"></a><code>dht.on(&#39;peer&#39;, function (peer, infoHash, from) { ... })</code></h4><p>Emitted when a potential peer is found. <code>peer</code> is of the form <code>{host, port}</code>.\n<code>infoHash</code> is the torrent info hash of the swarm that the peer belongs to. Emitted\nin response to a <code>lookup(infoHash)</code> call.</p>\n<h4 id=\"dhtonerror-function-err\"><a href=\"#dhtonerror-function-err\" class=\"anchor\"></a><code>dht.on(&#39;error&#39;, function (err) { ... })</code></h4><p>Emitted when the DHT has a fatal error.</p>\n<h4 id=\"internal-events\"><a href=\"#internal-events\" class=\"anchor\"></a>internal events</h4><h4 id=\"dhtonnode-function-node\"><a href=\"#dhtonnode-function-node\" class=\"anchor\"></a><code>dht.on(&#39;node&#39;, function (node) { ... })</code></h4><p>Emitted when the DHT finds a new node.</p>\n<h4 id=\"dhtonannounce-function-peer-infohash\"><a href=\"#dhtonannounce-function-peer-infohash\" class=\"anchor\"></a><code>dht.on(&#39;announce&#39;, function (peer, infoHash) { ... })</code></h4><p>Emitted when a peer announces itself in order to be stored in the DHT.</p>\n<h4 id=\"dhtonwarning-function-err\"><a href=\"#dhtonwarning-function-err\" class=\"anchor\"></a><code>dht.on(&#39;warning&#39;, function (err) { ... })</code></h4><p>Emitted when the DHT gets an unexpected message from another DHT node. This is purely\ninformational.</p>\n<h3 id=\"further-reading\"><a href=\"#further-reading\" class=\"anchor\"></a>further reading</h3><ul>\n<li><a href=\"http://www.bittorrent.org/beps/bep_0005.html\">BitTorrent DHT protocol</a></li>\n<li><a href=\"http://www.ic.unicamp.br/~bit/ensino/mo809_1s13/papers/P2P/Kademlia-%20A%20Peer-to-Peer%20Information%20System%20Based%20on%20the%20XOR%20Metric%20.pdf\">Kademlia: A Peer-to-peer Information System Based on the XOR Metric</a></li>\n</ul>\n<h3 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>license</h3><p>MIT. Copyright (c) <a href=\"https://feross.org\">Feross Aboukhadijeh</a>, Mathias Buus, and <a href=\"https://webtorrent.io\">WebTorrent, LLC</a>.</p>\n","utp-native":"<h1 id=\"utp-native\"><a href=\"#utp-native\" class=\"anchor\"></a>utp-native</h1><p>Native bindings for <a href=\"https://github.com/bittorrent/libutp\">libutp</a>. For more information about utp read <a href=\"http://www.bittorrent.org/beps/bep_0029.html\">BEP 29</a>.</p>\n<pre><code><span class=\"hljs-built_in\">npm</span> install utp-<span class=\"hljs-keyword\">native</span>\n</code></pre><p><a href=\"https://travis-ci.org/mafintosh/utp-native\"><img src=\"https://travis-ci.org/mafintosh/utp-native.svg?branch=master\" alt=\"build status\"></a>\n<a href=\"https://ci.appveyor.com/project/juliangruber/utp-native/branch/master\"><img src=\"https://ci.appveyor.com/api/projects/status/mflwybd36fnkq8vu/branch/master?svg=true\" alt=\"build status\"></a>\n<a href=\"https://github.com/feross/standard\"><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat\" alt=\"js-standard-style\"></a></p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> utp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'utp-native'</span>)\n\n<span class=\"hljs-keyword\">var</span> server = utp.createServer(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">socket</span>) </span>{\n  socket.pipe(socket) <span class=\"hljs-comment\">// echo server</span>\n})\n\nserver.listen(<span class=\"hljs-number\">10000</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> socket = utp.connect(<span class=\"hljs-number\">10000</span>)\n\n  socket.write(<span class=\"hljs-string\">'hello world'</span>)\n  socket.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'echo: '</span> + data)\n  })\n})\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><p>There two APIs available. One that mimicks the net core module in Node as much as possible and another one that allows you to reuse the same udp socket for both the client and server. The last one is useful if you plan on using this in combination with NAT hole punching.</p>\n<h2 id=\"nethttpnodejsorgapinethtml-like-api\"><a href=\"#nethttpnodejsorgapinethtml-like-api\" class=\"anchor\"></a><a href=\"http://nodejs.org/api/net.html\">net</a>-like API</h2><h4 id=\"server-utpcreateserveronconnection\"><a href=\"#server-utpcreateserveronconnection\" class=\"anchor\"></a><code>server = utp.createServer([onconnection])</code></h4><p>Create a new utp server instance.</p>\n<h4 id=\"serverlistenport-address-onlistening\"><a href=\"#serverlistenport-address-onlistening\" class=\"anchor\"></a><code>server.listen([port], [address], [onlistening])</code></h4><p>Listen for on port. If you don&#39;t provide a port or pass in <code>0</code> a free port will be used. Optionally you can provide an interface address as well, defaults to <code>0.0.0.0</code>.</p>\n<h4 id=\"var-addr-serveraddress\"><a href=\"#var-addr-serveraddress\" class=\"anchor\"></a><code>var addr = server.address()</code></h4><p>Returns an address object, <code>{port, address}</code> that tell you which port / address this server is bound to.</p>\n<h4 id=\"serveronlistening\"><a href=\"#serveronlistening\" class=\"anchor\"></a><code>server.on(&#39;listening&#39;)</code></h4><p>Emitted when the server is listening</p>\n<h4 id=\"serveronconnection-connection\"><a href=\"#serveronconnection-connection\" class=\"anchor\"></a><code>server.on(&#39;connection&#39;, connection)</code></h4><p>Emitted when a client has connected to this server</p>\n<h4 id=\"serveronerror-err\"><a href=\"#serveronerror-err\" class=\"anchor\"></a><code>server.on(&#39;error&#39;, err)</code></h4><p>Emitted when a critical error happened</p>\n<h4 id=\"serverclose\"><a href=\"#serverclose\" class=\"anchor\"></a><code>server.close()</code></h4><p>Closes the server.</p>\n<h4 id=\"serveronclose\"><a href=\"#serveronclose\" class=\"anchor\"></a><code>server.on(&#39;close&#39;)</code></h4><p>Emitted when the server is fully closed. Note that this will only happen after all connections to the server are closed.</p>\n<h4 id=\"servermaxconnections\"><a href=\"#servermaxconnections\" class=\"anchor\"></a><code>server.maxConnections</code></h4><p>Set this property is you want to limit the max amount of connections you want to receive</p>\n<h4 id=\"serverconnections\"><a href=\"#serverconnections\" class=\"anchor\"></a><code>server.connections</code></h4><p>An array of all the connections the server has.</p>\n<h4 id=\"serverref\"><a href=\"#serverref\" class=\"anchor\"></a><code>server.ref()</code></h4><p>Opposite of unref.</p>\n<h4 id=\"serverunref\"><a href=\"#serverunref\" class=\"anchor\"></a><code>server.unref()</code></h4><p>Unreferences the server from the node event loop.</p>\n<h4 id=\"connection-utpconnectport-host\"><a href=\"#connection-utpconnectport-host\" class=\"anchor\"></a><code>connection = utp.connect(port, [host])</code></h4><p>Create a new client connection. host defaults to localhost.\nThe client connection is a duplex stream that you can write / read from.</p>\n<h4 id=\"address-connectionaddress\"><a href=\"#address-connectionaddress\" class=\"anchor\"></a><code>address = connection.address()</code></h4><p>Similar to <code>server.address</code>.</p>\n<h4 id=\"connectionref\"><a href=\"#connectionref\" class=\"anchor\"></a><code>connection.ref()</code></h4><p>Similar to <code>server.ref()</code></p>\n<h4 id=\"connectionunref\"><a href=\"#connectionunref\" class=\"anchor\"></a><code>connection.unref()</code></h4><p>Similar to <code>server.unref()</code></p>\n<h4 id=\"connectiononclose\"><a href=\"#connectiononclose\" class=\"anchor\"></a><code>connection.on(&#39;close&#39;)</code></h4><p>Emitted when the connection is fully closed.</p>\n<h4 id=\"connectiononerror-err\"><a href=\"#connectiononerror-err\" class=\"anchor\"></a><code>connection.on(&#39;error&#39;, err)</code></h4><p>Emitted if an unexpected error happens.</p>\n<h4 id=\"connectiondestroy\"><a href=\"#connectiondestroy\" class=\"anchor\"></a><code>connection.destroy()</code></h4><p>Forcefully destroys the connection.</p>\n<p>In addition to this the connection has all the classic stream methods such as <code>.write</code> etc.</p>\n<h2 id=\"socket-api\"><a href=\"#socket-api\" class=\"anchor\"></a>Socket API</h2><p>The socket api allows you to reuse the same underlying UDP socket to both connect to other clients on accept incoming connections. It also mimicks the node core <a href=\"https://nodejs.org/api/dgram.html#dgram_class_dgram_socket\">dgram socket</a> api.</p>\n<h4 id=\"socket-utp\"><a href=\"#socket-utp\" class=\"anchor\"></a><code>socket = utp()</code></h4><p>Create a new utp socket</p>\n<h4 id=\"socketbindport-host-onlistening\"><a href=\"#socketbindport-host-onlistening\" class=\"anchor\"></a><code>socket.bind([port], [host], [onlistening])</code></h4><p>Bind the socket.</p>\n<h4 id=\"socketonlistening\"><a href=\"#socketonlistening\" class=\"anchor\"></a><code>socket.on(&#39;listening&#39;)</code></h4><p>Emitted when the socket is bound.</p>\n<h4 id=\"socketsendbuf-offset-len-port-host-callback\"><a href=\"#socketsendbuf-offset-len-port-host-callback\" class=\"anchor\"></a><code>socket.send(buf, offset, len, port, host, [callback])</code></h4><p>Send a udp message.</p>\n<h4 id=\"socketonmessage-buffer-rinfo\"><a href=\"#socketonmessage-buffer-rinfo\" class=\"anchor\"></a><code>socket.on(&#39;message&#39;, buffer, rinfo)</code></h4><p>Listen for a udp message.</p>\n<h4 id=\"socketclose\"><a href=\"#socketclose\" class=\"anchor\"></a><code>socket.close()</code></h4><p>Close the socket.</p>\n<h4 id=\"address-socketaddress\"><a href=\"#address-socketaddress\" class=\"anchor\"></a><code>address = socket.address()</code></h4><p>Returns an address object, <code>{port, address}</code> that tell you which port / address this socket is bound to.</p>\n<h4 id=\"socketonclose\"><a href=\"#socketonclose\" class=\"anchor\"></a><code>socket.on(&#39;close&#39;)</code></h4><p>Emitted when the socket is fully closed.</p>\n<h4 id=\"socketonerror\"><a href=\"#socketonerror\" class=\"anchor\"></a><code>socket.on(&#39;error&#39;)</code></h4><p>Emitted if the socket experiences an error.</p>\n<h4 id=\"socketlistenport-host-onlistening\"><a href=\"#socketlistenport-host-onlistening\" class=\"anchor\"></a><code>socket.listen([port], [host], [onlistening])</code></h4><p>Start listening for incoming connections. Performs a bind as well.</p>\n<h4 id=\"socketonconnection-connection\"><a href=\"#socketonconnection-connection\" class=\"anchor\"></a><code>socket.on(&#39;connection&#39;, connection)</code></h4><p>Emitted after you start listening and a client connects to this socket.\nConnection is similar to the connection used in the net api.</p>\n<h4 id=\"connection-socketconnectport-host\"><a href=\"#connection-socketconnectport-host\" class=\"anchor\"></a><code>connection = socket.connect(port, host)</code></h4><p>Connect to another socket. Connection is similar to the connection used in the net api.</p>\n<h4 id=\"socketunref\"><a href=\"#socketunref\" class=\"anchor\"></a><code>socket.unref()</code></h4><p>Dereference the socket from the node event loop.</p>\n<h4 id=\"socketref\"><a href=\"#socketref\" class=\"anchor\"></a><code>socket.ref()</code></h4><p>Opposite of <code>socket.unref()</code></p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","signalhub":"<h1 id=\"signalhub\"><a href=\"#signalhub\" class=\"anchor\"></a>signalhub</h1><p>Simple signalling server that can be used to coordinate handshaking with webrtc or other fun stuff.</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> signalhub\n</code></pre><p>Or to install the command line tool</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> -g signalhub\n</code></pre><p><a href=\"http://travis-ci.org/mafintosh/signalhub\"><img src=\"http://img.shields.io/travis/mafintosh/signalhub.svg?style=flat\" alt=\"build status\"></a></p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> signalhub = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'signalhub'</span>)\n<span class=\"hljs-keyword\">var</span> hub = signalhub(<span class=\"hljs-string\">'my-app-name'</span>, [\n  <span class=\"hljs-string\">'http://yourhub.com'</span>\n])\n\nhub.subscribe(<span class=\"hljs-string\">'my-channel'</span>)\n  .on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">message</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'new message received'</span>, message)\n  })\n\nhub.broadcast(<span class=\"hljs-string\">'my-channel'</span>, {<span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">'world'</span>})\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h4 id=\"hub-signalhubappname-urls\"><a href=\"#hub-signalhubappname-urls\" class=\"anchor\"></a><code>hub = signalhub(appName, urls)</code></h4><p>Create a new hub client. If you have more than one hub running specify them in an array</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// use more than one server for redundancy</span>\n<span class=\"hljs-keyword\">var</span> hub = signalhub(<span class=\"hljs-string\">'my-app-name'</span>, [\n  <span class=\"hljs-string\">'https://signalhub1.example.com'</span>,\n  <span class=\"hljs-string\">'https://signalhub2.example.com'</span>,\n  <span class=\"hljs-string\">'https://signalhub3.example.com'</span>\n])\n</code></pre>\n<p>The <code>appName</code> is used to namespace the subscriptions/broadcast so you can reuse the\nsignalhub for more than one app.</p>\n<h4 id=\"stream-hubsubscribechannel\"><a href=\"#stream-hubsubscribechannel\" class=\"anchor\"></a><code>stream = hub.subscribe(channel)</code></h4><p>Subscribe to a channel on the hub. Returns a readable stream of messages</p>\n<h4 id=\"hubbroadcastchannel-message-callback\"><a href=\"#hubbroadcastchannel-message-callback\" class=\"anchor\"></a><code>hub.broadcast(channel, message, [callback])</code></h4><p>Broadcast a new message to a channel on the hub</p>\n<h4 id=\"hubclosecallback\"><a href=\"#hubclosecallback\" class=\"anchor\"></a><code>hub.close([callback])</code></h4><p>Close all subscriptions</p>\n<h2 id=\"cli-api\"><a href=\"#cli-api\" class=\"anchor\"></a>CLI API</h2><p>You can use the command line api to run a hub server</p>\n<pre><code>signalhub listen -p 8080 # starts a signalhub<span class=\"hljs-built_in\"> server </span>on 8080\n</code></pre><p>To listen on https, use the <code>--key</code> and <code>--cert</code> flags to specify the path to the private\nkey and certificate files, respectively. These will be passed through to the node <code>https</code>\npackage.</p>\n<p>To avoid logging to console on every subscribe/broadcast event use the <code>--quiet</code> or <code>-q</code> flag.</p>\n<p>Or broadcast/subscribe to channels</p>\n<pre><code>signalhub broadcast my-app my-channel <span class=\"hljs-string\">'{\"hello\":\"world\"}'</span> -<span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-number\">8080</span> -h yourhub<span class=\"hljs-selector-class\">.com</span>\nsignalhub subscribe my-app my-channel -<span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-number\">8080</span> -h yourhub.com\n</code></pre><h2 id=\"browserify\"><a href=\"#browserify\" class=\"anchor\"></a>Browserify</h2><p>This also works in the browser using browserify :)</p>\n<h2 id=\"heroku\"><a href=\"#heroku\" class=\"anchor\"></a>Heroku</h2><p><a href=\"https://heroku.com/deploy\"><img src=\"https://www.herokucdn.com/deploy/button.png\" alt=\"Deploy\"></a></p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","dat-storage":"<h1 id=\"dat-storage\"><a href=\"#dat-storage\" class=\"anchor\"></a>dat-storage</h1><p>Dat specific storage provider for <a href=\"https://github.com/mafintosh/hyperdrive\">Hyperdrive</a></p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> dat-<span class=\"hljs-keyword\">storage</span>\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> storage = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-storage'</span>)\n\n<span class=\"hljs-comment\">// files are stored in ./my-dataset</span>\n<span class=\"hljs-comment\">// metadata (hashes and stuff) are stored in ./my-dataset/.dat</span>\n<span class=\"hljs-keyword\">var</span> archive = hyperdrive(storage(<span class=\"hljs-string\">'my-dataset'</span>))\n</code></pre>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","dat-secret-storage":"<h1 id=\"dat-secret-storage\"><a href=\"#dat-secret-storage\" class=\"anchor\"></a>dat-secret-storage</h1><p>Store secret keys for hyperdrive archives in the user&#39;s home directory.</p>\n<p><a href=\"https://www.npmjs.com/package/dat-secret-storage\"><img src=\"https://img.shields.io/npm/v/dat-secret-storage.svg?style=flat-square\" alt=\"npm\"></a>\n<a href=\"https://travis-ci.org/joehand/dat-secret-storage\"><img src=\"https://img.shields.io/travis/joehand/dat-secret-storage.svg?style=flat-square\" alt=\"travis\"></a>\n<a href=\"http://npm.im/standard\"><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\" alt=\"standard\"></a></p>\n<h2 id=\"install\"><a href=\"#install\" class=\"anchor\"></a>Install</h2><pre><code>npm <span class=\"hljs-keyword\">install</span> dat-secret-<span class=\"hljs-keyword\">storage</span>\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>Return for the <code>secret_key</code> storage in hyperdrive/hypercore. To avoid local ownership conflicts, pass the local directory as the first argument. <code>dat-secret-storage</code> will check for a non-empty ownership file in the source directory storage.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> secretStore = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-secret-storage'</span>)\n\n<span class=\"hljs-keyword\">var</span> storage = {\n  <span class=\"hljs-attr\">metadata</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name, opts</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (name === <span class=\"hljs-string\">'secret_key'</span>) <span class=\"hljs-keyword\">return</span> secretStore()(path.join(dir, <span class=\"hljs-string\">'.dat/metadata.ogd'</span>), opts)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-comment\">// other storage</span>\n  },\n  <span class=\"hljs-attr\">content</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name, opts</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-comment\">// other storage</span>\n  }\n}\n\n<span class=\"hljs-comment\">// store secret key in ~/.dat/secret_keys</span>\n<span class=\"hljs-keyword\">var</span> archive = hyperdrive(storage)\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"secretstoragedirownershipfile-opts\"><a href=\"#secretstoragedirownershipfile-opts\" class=\"anchor\"></a><code>secretStorage([dir])(ownershipFile, opts)</code></h3><ul>\n<li><code>dir</code>: directory to store keys under <code>dir/.dat/secret_keys</code>. Defaults to users home directory.</li>\n<li><code>ownershipFile</code>: non-empty file that denotes ownership. This helps avoid local ownership conflicts of the same dat.</li>\n</ul>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p><a href=\"LICENSE.md\">MIT</a></p>\n","abstract-random-access":"<h1 id=\"abstract-random-access\"><a href=\"#abstract-random-access\" class=\"anchor\"></a>abstract-random-access</h1><p>Base class for random access stores, such as</p>\n<ul>\n<li><a href=\"https://github.com/mafintosh/random-access-file\">random-access-file</a></li>\n<li><a href=\"https://github.com/mafintosh/random-access-memory\">random-access-memory</a></li>\n</ul>\n<h2 id=\"features\"><a href=\"#features\" class=\"anchor\"></a>Features</h2><ul>\n<li>ensures the store has been <code>.open()</code>ed</li>\n<li>verifies and defaults arguments</li>\n<li>provides stubs for unimplemented functions</li>\n<li>emits <code>open</code> and <code>close</code> events</li>\n</ul>\n<h2 id=\"example\"><a href=\"#example\" class=\"anchor\"></a>Example</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> Abstract = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'abstract-random-access'</span>)\n<span class=\"hljs-keyword\">var</span> inherits = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'inherits'</span>)\n\n<span class=\"hljs-keyword\">var</span> Store = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  Abstract.call(<span class=\"hljs-keyword\">this</span>)  \n}\n\ninherits(Store, Abstract)\n\nStore.prototype._read = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">offset, length, callback</span>) </span>{\n  process.nextTick(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    callback(<span class=\"hljs-literal\">null</span>, Buffer(<span class=\"hljs-string\">'ohai'</span>))  \n  })  \n}\n</code></pre>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","multi-random-access":"<h1 id=\"multi-random-access\"><a href=\"#multi-random-access\" class=\"anchor\"></a>multi-random-access</h1><p>An <a href=\"https://github.com/juliangruber/abstract-random-access\">abstract-random-access</a> compliant instance (API similar to <a href=\"https://github.com/mafintosh/random-access-file\">random-access-file</a>) that combines multiple other abstract-random-access instances into a single one.</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> multi-random-<span class=\"hljs-keyword\">access</span>\n</code></pre><p><a href=\"http://travis-ci.org/mafintosh/multi-random-access\"><img src=\"http://img.shields.io/travis/mafintosh/multi-random-access.svg?style=flat\" alt=\"build status\"></a></p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>In the below example we&#39;ll create a multi-random-access instance that writes to different instances of <a href=\"https://github.com/mafintosh/random-access-memory\">random-access-memory</a>, each containing 10 bytes of data.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> multi = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'multi-random-access'</span>)\n<span class=\"hljs-keyword\">var</span> ram = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'random-access-memory'</span>)\n\n<span class=\"hljs-keyword\">var</span> storage = multi(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">offset, cb</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-built_in\">Math</span>.floor(offset / <span class=\"hljs-number\">10</span>)\n\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Creating new underlying storage'</span>)\n\n  cb(<span class=\"hljs-literal\">null</span>, {\n    <span class=\"hljs-attr\">start</span>: index * <span class=\"hljs-number\">10</span>,\n    <span class=\"hljs-attr\">end</span>: index * <span class=\"hljs-number\">10</span> + <span class=\"hljs-number\">10</span>,\n    <span class=\"hljs-attr\">storage</span>: ram()\n  })\n})\n\nstorage.write(<span class=\"hljs-number\">0</span>, Buffer(<span class=\"hljs-string\">'hello world'</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n  storage.read(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, buf</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n    <span class=\"hljs-built_in\">console</span>.log(buf.toString())\n  })\n})\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h4 id=\"var-storage-multioptions-open\"><a href=\"#var-storage-multioptions-open\" class=\"anchor\"></a><code>var storage = multi([options], open)</code></h4><p>Create a new instance. <code>open</code> is a function that is called when a new storage instance is needed. A new instance is needed when a read or write happens in a byte range that has not been opened yet.</p>\n<p>The signature for open is <code>(offset, cb)</code>. You should call the callback with an object containing the following properties:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">open</span> (<span class=\"hljs-params\">offset, cb</span>) </span>{\n  cb(<span class=\"hljs-literal\">null</span>, {\n    <span class=\"hljs-attr\">start</span>: startByteOffset,\n    <span class=\"hljs-attr\">end</span>: endByteOffset,\n    <span class=\"hljs-attr\">storage</span>: abstractRandomAccessInstance\n  })\n}\n</code></pre>\n<p>Options include:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">limit</span>: <span class=\"hljs-number\">16</span> <span class=\"hljs-comment\">// start closes old stores after this many was opened</span>\n}\n</code></pre>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","random-access-file":"<h1 id=\"random-access-file\"><a href=\"#random-access-file\" class=\"anchor\"></a>random-access-file</h1><p>Continuous reading or writing to a file using random offsets and lengths</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> random-<span class=\"hljs-keyword\">access</span>-<span class=\"hljs-keyword\">file</span>\n</code></pre><p><a href=\"http://travis-ci.org/mafintosh/random-access-file\"><img src=\"http://img.shields.io/travis/mafintosh/random-access-file.svg?style=flat\" alt=\"build status\"></a></p>\n<h2 id=\"why\"><a href=\"#why\" class=\"anchor\"></a>Why?</h2><p>If you are receiving a file in multiple pieces in a distributed system it can be useful to write these pieces to disk one by one in various places throughout the file without having to open and close a file descriptor all the time.</p>\n<p>random-access-file allows you to do just this.</p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> randomAccessFile = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'random-access-file'</span>)\n\n<span class=\"hljs-keyword\">var</span> file = randomAccessFile(<span class=\"hljs-string\">'my-file.txt'</span>)\n\nfile.write(<span class=\"hljs-number\">10</span>, <span class=\"hljs-keyword\">new</span> Buffer(<span class=\"hljs-string\">'hello'</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-comment\">// write a buffer to offset 10</span>\n  file.read(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, buffer</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(buffer) <span class=\"hljs-comment\">// read 5 bytes from offset 10</span>\n    file.close(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'file is closed'</span>)\n    })\n  })\n})\n</code></pre>\n<p>file will use an open file descriptor. When you are done with the file you should call <code>file.close()</code>.</p>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h4 id=\"var-file-randomaccessfilefilename-options\"><a href=\"#var-file-randomaccessfilefilename-options\" class=\"anchor\"></a><code>var file = randomAccessFile(filename, [options])</code></h4><p>Create a new file. Options include:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">truncate</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// truncate the file before reading / writing</span>\n  length: someLength, <span class=\"hljs-comment\">// truncate the file to this size first</span>\n  readable: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// should the file be opened as readable?</span>\n  writable: <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\">// should the file be opened as writable?</span>\n}\n</code></pre>\n<h4 id=\"filewriteoffset-buffer-callback\"><a href=\"#filewriteoffset-buffer-callback\" class=\"anchor\"></a><code>file.write(offset, buffer, [callback])</code></h4><p>Write a buffer at a specific offset.</p>\n<h4 id=\"filereadoffset-length-callback\"><a href=\"#filereadoffset-length-callback\" class=\"anchor\"></a><code>file.read(offset, length, callback)</code></h4><p>Read a buffer at a specific offset. Callback is called with the buffer read.</p>\n<h4 id=\"filedeloffset-length-callback\"><a href=\"#filedeloffset-length-callback\" class=\"anchor\"></a><code>file.del(offset, length, callback)</code></h4><p>Will truncate the file if offset + length is larger than the current file length.\nIs otherwise a noop.</p>\n<h4 id=\"fileendoptions-callback\"><a href=\"#fileendoptions-callback\" class=\"anchor\"></a><code>file.end([options], callback)</code></h4><p>Call this method when the entire file has been written. Options include:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">mtime</span>: mtime, <span class=\"hljs-comment\">// set the file's mtime</span>\n  atime: atime <span class=\"hljs-comment\">// set the file's atime</span>\n}\n</code></pre>\n<h4 id=\"fileclosecallback\"><a href=\"#fileclosecallback\" class=\"anchor\"></a><code>file.close([callback])</code></h4><p>Close the underlying file descriptor.</p>\n<h4 id=\"fileunlinkcallback\"><a href=\"#fileunlinkcallback\" class=\"anchor\"></a><code>file.unlink([callback])</code></h4><p>Unlink the underlying file.</p>\n<h4 id=\"fileonopen\"><a href=\"#fileonopen\" class=\"anchor\"></a><code>file.on(&#39;open&#39;)</code></h4><p>Emitted when the file descriptor has been opened. You can access the fd using <code>file.fd</code>.\nYou do not need to wait for this event before doing any reads/writes.</p>\n<h4 id=\"fileonclose\"><a href=\"#fileonclose\" class=\"anchor\"></a><code>file.on(&#39;close&#39;)</code></h4><p>Emitted when the file has been closed.</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","random-access-memory":"<h1 id=\"random-access-memory\"><a href=\"#random-access-memory\" class=\"anchor\"></a>random-access-memory</h1><p>Exposes the same interface as <a href=\"https://github.com/mafintosh/random-access-file\">random-access-file</a> but instead of writing/reading data to a file it maintains it in memory. This is useful when running tests where you don&#39;t want to write files to disk.</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> random-<span class=\"hljs-keyword\">access</span>-<span class=\"hljs-keyword\">memory</span>\n</code></pre><p><a href=\"http://travis-ci.org/mafintosh/random-access-memory\"><img src=\"http://img.shields.io/travis/mafintosh/random-access-memory.svg?style=flat\" alt=\"build status\"></a></p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> ram = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'random-access-memory'</span>)\n<span class=\"hljs-keyword\">var</span> file = ram()\n\nfile.write(<span class=\"hljs-number\">0</span>, Buffer(<span class=\"hljs-string\">'hello'</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  file.write(<span class=\"hljs-number\">5</span>, Buffer(<span class=\"hljs-string\">' world'</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    file.read(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-built_in\">console</span>.log) <span class=\"hljs-comment\">// returns Buffer(hello world)</span>\n  })\n})\n</code></pre>\n<p>You can also initialize a <code>ram</code> instance with a <code>Buffer</code>:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> file = ram(Buffer(<span class=\"hljs-string\">'hello world'</span>))\n</code></pre>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","random-access-page-files":"<h1 id=\"random-access-page-files\"><a href=\"#random-access-page-files\" class=\"anchor\"></a>random-access-page-files</h1><p>An <a href=\"https://github.com/juliangruber/abstract-random-access\">abstract-random-access</a> backend that writes to fixed size page files instead of a single file. Useful for sparse data.</p>\n<pre><code>npm install <span class=\"hljs-built_in\">random</span>-access-page-<span class=\"hljs-built_in\">files</span>\n</code></pre><p><a href=\"http://travis-ci.org/mafintosh/random-access-page-files\"><img src=\"http://img.shields.io/travis/mafintosh/random-access-page-files.svg?style=flat\" alt=\"build status\"></a></p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> pages = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'random-access-page-files'</span>)\n\n<span class=\"hljs-keyword\">var</span> storage = pages(<span class=\"hljs-string\">'a-folder'</span>, {\n  <span class=\"hljs-attr\">pageSize</span>: <span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span> <span class=\"hljs-comment\">// use 5mb pages</span>\n})\n\n<span class=\"hljs-comment\">// will write use single page file &lt; 5mb</span>\nstorage.write(<span class=\"hljs-number\">222852525</span>, <span class=\"hljs-keyword\">new</span> Buffer(<span class=\"hljs-string\">'hello'</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n  storage.read(<span class=\"hljs-number\">222852525</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, buf</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n    <span class=\"hljs-built_in\">console</span>.log(buf)\n  })\n})\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h4 id=\"var-storage-pagesfolder-options\"><a href=\"#var-storage-pagesfolder-options\" class=\"anchor\"></a><code>var storage = pages(folder, [options])</code></h4><p>Create a new storage provider. Options include:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">pageSize</span>: <span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span>, <span class=\"hljs-comment\">// how big are the page files?</span>\n  limit: <span class=\"hljs-number\">16</span> <span class=\"hljs-comment\">// how many open files at max?</span>\n}\n</code></pre>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","dat-http":"<h1 id=\"dat-http\"><a href=\"#dat-http\" class=\"anchor\"></a>dat-http</h1><p>An HTTP transport/storage provider for Dat, allowing replication of Dats over normal HTTP connections from flat files on the server. Currently only supports read operations, write operations coming in the future (open an issue if you need this).</p>\n<p>The entire <code>.dat</code> folder must be available on the server for this to work. Point this at the root url where the <code>.dat</code> folder is and you can use this to do replication.</p>\n<p>This is implemented as a storage provider, conforming to the <a href=\"https://www.npmjs.com/package/abstract-random-access\">https://www.npmjs.com/package/abstract-random-access</a> API. That may seem counterintuitive, as this provides a networkworking transport but implements a storage provider API. However, in Dat you can wrap a storage provider in a Hyperdrive instance to turn it into a network transport.</p>\n<h3 id=\"example\"><a href=\"#example\" class=\"anchor\"></a>example</h3><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> hyperdrive = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive'</span>)\n<span class=\"hljs-keyword\">var</span> Dat = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-node'</span>)\n<span class=\"hljs-keyword\">var</span> datHttp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-http'</span>)\n\n<span class=\"hljs-comment\">// httpDrive is a drive that 'wraps' the http storage provider in a hyperdrive instance. It won't write any data to disk, in fact we won't be using it to write anything, only to read things.</span>\n<span class=\"hljs-keyword\">var</span> storage = datHttp(<span class=\"hljs-string\">'https://wherever-my-dat-is.com'</span>)\n<span class=\"hljs-keyword\">var</span> httpDrive = hyperdrive(storage, {<span class=\"hljs-attr\">latest</span>: <span class=\"hljs-literal\">true</span>})\n\nhttpDrive.on(<span class=\"hljs-string\">'ready'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// create a 'real' dat using the default storage in a local folder</span>\n  Dat(<span class=\"hljs-string\">'./local-copy'</span>, {<span class=\"hljs-attr\">key</span>: httpDrive.key, <span class=\"hljs-attr\">sparse</span>: <span class=\"hljs-literal\">true</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, dat</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n    <span class=\"hljs-comment\">// heres the magic that hooks up the http read only hyperdrive to our real one</span>\n    <span class=\"hljs-keyword\">var</span> localReplicate = dat.archive.replicate()\n    <span class=\"hljs-keyword\">var</span> httpReplicate = httpDrive.replicate()\n    localReplicate.pipe(httpReplicate).pipe(localReplicate)\n\n    <span class=\"hljs-comment\">// after this point, the 'real' dat will use the http dat as a source for all data</span>\n  })\n})\n</code></pre>\n","random-access-idb":"<h1 id=\"random-access-idb\"><a href=\"#random-access-idb\" class=\"anchor\"></a>random-access-idb</h1><p><a href=\"https://npmjs.com/package/abstract-random-access\">random-access</a>-compatible indexedDB storage layer</p>\n<h1 id=\"example\"><a href=\"#example\" class=\"anchor\"></a>example</h1><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> random = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'random-access-idb'</span>)(<span class=\"hljs-string\">'dbname'</span>)\n<span class=\"hljs-keyword\">var</span> cool = random(<span class=\"hljs-string\">'cool.txt'</span>)\ncool.write(<span class=\"hljs-number\">100</span>, <span class=\"hljs-keyword\">new</span> Buffer(<span class=\"hljs-string\">'GREETINGS'</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">console</span>.error(err)\n  cool.read(<span class=\"hljs-number\">104</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, buf</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">console</span>.error(err)\n    <span class=\"hljs-built_in\">console</span>.log(buf.toString()) <span class=\"hljs-comment\">// TIN</span>\n  })\n})\n</code></pre>\n<h1 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>api</h1><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> random = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'random-access-idb'</span>)\n</code></pre>\n<h2 id=\"var-db-randomdbname-opts\"><a href=\"#var-db-randomdbname-opts\" class=\"anchor\"></a>var db = random(dbname, opts)</h2><p>Open an indexedDB database at <code>dbname</code>.</p>\n<p>Any <code>opts</code> provided are forwarded to <code>db(name, opts)</code> as default options.</p>\n<h2 id=\"var-file-dbname-opts\"><a href=\"#var-file-dbname-opts\" class=\"anchor\"></a>var file = db(name, opts)</h2><p>Create a handle <code>file</code> from <code>name</code> and <code>opts</code>:</p>\n<ul>\n<li><code>opts.size</code> - internal chunk size to use (default 4096)</li>\n</ul>\n<p>You must keep <code>opts.size</code> the same after you&#39;ve written data.\nIf you change the size, bad things will happen.</p>\n<h2 id=\"filereadoffset-length-cb\"><a href=\"#filereadoffset-length-cb\" class=\"anchor\"></a>file.read(offset, length, cb)</h2><p>Read <code>length</code> bytes at an <code>offset</code> from <code>file</code> as <code>cb(err, buf)</code>.</p>\n<h2 id=\"filewriteoffset-buf-cb\"><a href=\"#filewriteoffset-buf-cb\" class=\"anchor\"></a>file.write(offset, buf, cb)</h2><p>Write <code>buf</code> to <code>file</code> at an <code>offset</code>.</p>\n<h1 id=\"install\"><a href=\"#install\" class=\"anchor\"></a>install</h1><p>npm install random-access-idb</p>\n<h1 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>license</h1><p>BSD</p>\n","peer-network":"<h1 id=\"peer-network\"><a href=\"#peer-network\" class=\"anchor\"></a>peer-network</h1><p>Create servers/clients that listen on names instead of ports and hostnames and are accessible over the internet.\nUses <a href=\"https://github.com/mafintosh/hyperdht\">hyperdht</a> to discover peers and holepunch connections to them.</p>\n<p>Per default it uses <code>bootstrap1.hyperdht.org</code> to bootstrap the DHT but you can configure your own.</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> peer-network\n</code></pre><p><a href=\"http://travis-ci.org/mafintosh/peer-network\"><img src=\"http://img.shields.io/travis/mafintosh/peer-network.svg?style=flat\" alt=\"build status\"></a></p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>First create a server</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> peernet = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'peer-network'</span>)\n<span class=\"hljs-keyword\">var</span> network = peernet()\n\n<span class=\"hljs-keyword\">var</span> server = network.createServer()\n\nserver.on(<span class=\"hljs-string\">'connection'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">stream</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'new connection'</span>)\n  stream.pipe(stream) <span class=\"hljs-comment\">// echo</span>\n})\n\nserver.listen(<span class=\"hljs-string\">'echo-server'</span>) <span class=\"hljs-comment\">// listen on a name</span>\n</code></pre>\n<p>In another process (on any machine)</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// will connect to a server annoucing itself as echo-server</span>\n<span class=\"hljs-keyword\">var</span> stream = network.connect(<span class=\"hljs-string\">'echo-server'</span>)\n\nstream.write(<span class=\"hljs-string\">'hello world'</span>)\nstream.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'data:'</span>, data.toString())\n})\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h4 id=\"var-network-peernetopts\"><a href=\"#var-network-peernetopts\" class=\"anchor\"></a><code>var network = peernet(opts)</code></h4><p>Create a new network instance. Options are forwarded to the <a href=\"https://github.com/mafintosh/hyperdht\">hyperdht</a> constructor.\nIf you do not provide a bootstrap list, <code>bootstrap1.hyperdht.org</code> is used.</p>\n<h4 id=\"var-server-networkcreateserveronconnection\"><a href=\"#var-server-networkcreateserveronconnection\" class=\"anchor\"></a><code>var server = network.createServer([onconnection])</code></h4><p>Create a new server.</p>\n<h4 id=\"serverlistenname-onlistening\"><a href=\"#serverlistenname-onlistening\" class=\"anchor\"></a><code>server.listen(name, [onlistening])</code></h4><p>Listen on a name. Can be any buffer/string. Optionally you can specify a port to bound to as well. If not specified a random open port will be used.\nThe server will use discovery-channel to announce itself to other peers using multicast-dns, the bittorrent dht and potentially a series of dns servers.</p>\n<h4 id=\"servercloseonclose\"><a href=\"#servercloseonclose\" class=\"anchor\"></a><code>server.close([onclose])</code></h4><p>Close the server and stop announcing its pressence</p>\n<h4 id=\"serveronconnection-stream\"><a href=\"#serveronconnection-stream\" class=\"anchor\"></a><code>server.on(&#39;connection&#39;, stream)</code></h4><p>Emitted when a client connects</p>\n<h4 id=\"serveronlistening\"><a href=\"#serveronlistening\" class=\"anchor\"></a><code>server.on(&#39;listening&#39;)</code></h4><p>Emitted when the server is listening.</p>\n<h4 id=\"serveronerror-err\"><a href=\"#serveronerror-err\" class=\"anchor\"></a><code>server.on(&#39;error&#39;, err)</code></h4><p>Emitted if the server has a critical error.</p>\n<h4 id=\"serveronclose\"><a href=\"#serveronclose\" class=\"anchor\"></a><code>server.on(&#39;close&#39;)</code></h4><p>Emitted when the server is fully close</p>\n<h4 id=\"var-stream-networkconnectname\"><a href=\"#var-stream-networkconnectname\" class=\"anchor\"></a><code>var stream = network.connect(name)</code></h4><p>Connect to a server listening on a name. If multiple servers are listening it will connect to the first one to which an connection can be established.</p>\n<h4 id=\"streamonconnect\"><a href=\"#streamonconnect\" class=\"anchor\"></a><code>stream.on(&#39;connect&#39;)</code></h4><p>Emitted when the stream is fully connected to another peer. You do not need to wait for this event before writing data to the socket.</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","hyperdht":"<h1 id=\"hyperdht\"><a href=\"#hyperdht\" class=\"anchor\"></a>hyperdht</h1><p>A DHT that supports peer discovery and distributed hole punching</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> hyperdht\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>First run a bootstrap node</p>\n<pre><code class=\"lang-sh\">npm install -g dht-rpc-bootstrap\ndht-rpc-bootstrap --port=10000\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> hyperdht = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdht'</span>)\n\n<span class=\"hljs-keyword\">var</span> a = hyperdht({\n  <span class=\"hljs-attr\">bootstrap</span>: [<span class=\"hljs-string\">'localhost:10000'</span>]\n})\n\n<span class=\"hljs-keyword\">var</span> b = hyperdht({\n  <span class=\"hljs-attr\">bootstrap</span>: [<span class=\"hljs-string\">'localhost:10000'</span>]\n})\n\na.ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// announce on a 32 byte key</span>\n  <span class=\"hljs-keyword\">var</span> key = <span class=\"hljs-keyword\">new</span> Buffer(<span class=\"hljs-string\">'01234567012345670123456701234567'</span>)\n\n  b.announce(key, {<span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">10000</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n\n    <span class=\"hljs-keyword\">var</span> stream = a.lookup(key)\n\n    stream.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'found peers:'</span>, data)\n    })\n  })\n})\n</code></pre>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><h4 id=\"var-dht-hyperdhtoptions\"><a href=\"#var-dht-hyperdhtoptions\" class=\"anchor\"></a><code>var dht = hyperdht([options])</code></h4><p>Create a new dht. Options are passed to the <a href=\"https://github.com/mafintosh/dht-rpc\">dht-rpc</a> constructor</p>\n<h4 id=\"var-stream-dhtannouncekey-options-callback\"><a href=\"#var-stream-dhtannouncekey-options-callback\" class=\"anchor\"></a><code>var stream = dht.announce(key, [options], [callback])</code></h4><p>Announce that you are listening on a key. Options include</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">10000</span>, <span class=\"hljs-comment\">// port you are listening. If omitted the udp sockets port is used</span>\n  localAddress: {\n    <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">'192.168.1.2'</span>, <span class=\"hljs-comment\">// announce that you are listening on a local address also</span>\n    port: <span class=\"hljs-number\">8888</span>\n  }\n}\n</code></pre>\n<p>The returned stream will emit peers as they are discovered during the announce face.\nThe data events look like this</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">node</span>: {\n    <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">'10.4.2.4'</span>, <span class=\"hljs-comment\">// dht node's host</span>\n    port: <span class=\"hljs-number\">42424</span> <span class=\"hljs-comment\">// dht node's port</span>\n  },\n  <span class=\"hljs-attr\">peers</span>: [{\n    <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">'4.41.3.4'</span>, <span class=\"hljs-comment\">// a peer host</span>\n    port: <span class=\"hljs-number\">4244</span>, <span class=\"hljs-comment\">// a peer port</span>\n  }],\n  <span class=\"hljs-attr\">localPeers</span>: [{\n    <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">'192.168.3.4'</span>, <span class=\"hljs-comment\">// a local peer host</span>\n    port: <span class=\"hljs-number\">4244</span>, <span class=\"hljs-comment\">// a local peer port</span>\n  }]\n}\n</code></pre>\n<p>Local peers will only contain addresses that share the first two parts of your local address (<code>192.168</code> in the example).\nBoth <code>peers</code> and <code>localPeers</code> will <em>not</em> contain your own address.</p>\n<p>If you provide the callback the stream will be buffers and an array of results is passed.\nNote that you should keep announcing yourself at regular intervals (fx every 4-5min)</p>\n<h4 id=\"var-stream-dhtlookupkey-options-callback\"><a href=\"#var-stream-dhtlookupkey-options-callback\" class=\"anchor\"></a><code>var stream = dht.lookup(key, [options], [callback])</code></h4><p>Find peers but do not announce. Accepts the same options as <code>announce</code> and returns a similar stream.</p>\n<h4 id=\"dhtunannouncekey-options-callback\"><a href=\"#dhtunannouncekey-options-callback\" class=\"anchor\"></a><code>dht.unannounce(key, [options], [callback])</code></h4><p>Remove yourself from the DHT. Pass the same options as you used to announce yourself.</p>\n<h4 id=\"dhtpingpeer-callback\"><a href=\"#dhtpingpeer-callback\" class=\"anchor\"></a><code>dht.ping(peer, callback)</code></h4><p>Ping a another DHT peer. Useful if you want to see if you can connect to a node without holepunching.</p>\n<h4 id=\"dhtholepunchpeer-node-callback\"><a href=\"#dhtholepunchpeer-node-callback\" class=\"anchor\"></a><code>dht.holepunch(peer, node, callback)</code></h4><p>UDP holepunch to another peer. Pass the same node as was returned in the announce/lookup stream\nfor the peer.</p>\n<h4 id=\"dhtreadycallback\"><a href=\"#dhtreadycallback\" class=\"anchor\"></a><code>dht.ready(callback)</code></h4><p>Wait for the dht to be fully bootstrapped. You do not need to call this before annnouncing / querying.</p>\n<h4 id=\"dhtdestroycallback\"><a href=\"#dhtdestroycallback\" class=\"anchor\"></a><code>dht.destroy(callback)</code></h4><p>Destroy the dht and stop listening.</p>\n<h4 id=\"dhtbootstrapcallback\"><a href=\"#dhtbootstrapcallback\" class=\"anchor\"></a><code>dht.bootstrap([callback])</code></h4><p>Re-bootstrap the DHT. Call this at regular intervals if you do not announce/lookup any keys.</p>\n<h4 id=\"dhtlistenport-callback\"><a href=\"#dhtlistenport-callback\" class=\"anchor\"></a><code>dht.listen(port, callback)</code></h4><p>Explicitly listen on a port. If you do not call this a random port will be chosen for you.</p>\n<h2 id=\"command-line-tool\"><a href=\"#command-line-tool\" class=\"anchor\"></a>Command line tool</h2><p>There is a command line tool available as well which is useful if you want to run a long lived dht node on a server or similar.</p>\n<pre><code class=\"lang-sh\">npm install -g hyperdht\nhyperdht --<span class=\"hljs-built_in\">help</span>\n</code></pre>\n<p>To run a node simply pass it the addresses of your bootstrap servers</p>\n<pre><code class=\"lang-sh\">hyperdht --bootstrap=localhost:10000 --bootstrap=localhost:10001\n</code></pre>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","datproject.org":"<h1 id=\"dat-registry\"><a href=\"#dat-registry\" class=\"anchor\"></a>Dat Registry</h1><p>A web registry for the dat network. Hosted at <a href=\"http://datproject.org\">http://datproject.org</a>.</p>\n<p><a href=\"https://travis-ci.org/datproject/datproject.org\"><img src=\"https://travis-ci.org/datproject/datproject.org.svg?branch=master\" alt=\"Build Status\"></a></p>\n<h2 id=\"features\"><a href=\"#features\" class=\"anchor\"></a>Features</h2><ul>\n<li>Preview the files in a dat in the browser.</li>\n<li>Download individual files from dats.</li>\n<li>Create short links for dats with user accounts.</li>\n</ul>\n<h2 id=\"setup\"><a href=\"#setup\" class=\"anchor\"></a>Setup</h2><ol>\n<li>Clone this repository, then copy the configuration file:</li>\n</ol>\n<pre><code>cp config/default<span class=\"hljs-selector-class\">.js</span> config/config<span class=\"hljs-selector-class\">.development</span><span class=\"hljs-selector-class\">.js</span>\n</code></pre><ol>\n<li>Install the dependencies:</li>\n</ol>\n<pre><code>npm <span class=\"hljs-keyword\">install</span>\n</code></pre><p>Create the database</p>\n<pre><code>npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> database</span>\n</code></pre><p>Start the server</p>\n<pre><code><span class=\"hljs-built_in\">npm</span> start\n</code></pre><h2 id=\"configuration\"><a href=\"#configuration\" class=\"anchor\"></a>Configuration</h2><h3 id=\"secret-key\"><a href=\"#secret-key\" class=\"anchor\"></a>Secret key</h3><p>Each deployment should have a different secret key. You want to set the secret key for generating password hashes and salts.</p>\n<p>Set the secret key by using the <code>TOWNSHIP_SECRET</code> environment variable.</p>\n<h3 id=\"default-location-of-account-and-sqlite-databases\"><a href=\"#default-location-of-account-and-sqlite-databases\" class=\"anchor\"></a>Default location of account and sqlite databases</h3><p>Specify where you want data for the app (databases and also by default the archiver) to be located. By default, all the data will be stored in <code>./data</code>. If you&#39;d like the data to be stored somewhere else, add a <code>data</code> key:</p>\n<pre><code>{\n  <span class=\"hljs-attribute\">data</span>: <span class=\"hljs-string\">'/path/to/my/data'</span>\n}\n</code></pre><h3 id=\"closed-beta\"><a href=\"#closed-beta\" class=\"anchor\"></a>Closed beta</h3><p>To create a closed beta, add the <code>whitelist</code> key with the path to a newline-delimited list of emails allowed to sign up. Default value <code>false</code> allows anyone to register an account.</p>\n<pre><code>{ <span class=\"hljs-attribute\">whitelist</span>: <span class=\"hljs-string\">'/path/to/my/list/of/folks.txt'</span>}\n</code></pre><p><code>folks.txt</code> should have a list of valid emails, each separated by a new line character. For example:</p>\n<pre><code>pamlikesdata<span class=\"hljs-meta\">@gmail</span>.com\nrobert.singletown<span class=\"hljs-meta\">@sbcglobal</span>.netw\n</code></pre><h3 id=\"location-of-cached-and-archived-dat-data\"><a href=\"#location-of-cached-and-archived-dat-data\" class=\"anchor\"></a>Location of cached and archived dat data</h3><p>You can set the location where dat data is cached on the filesystem. By default it is stored in the <code>data</code> directory (above), in the <code>archiver</code> subdirectory. You can change this by using the <code>archiver</code> key:</p>\n<pre><code>{ <span class=\"hljs-attribute\">archiver</span>: <span class=\"hljs-string\">'/mnt1/bigdisk/archiver-data'</span> }\n</code></pre><h3 id=\"mixpanel-account\"><a href=\"#mixpanel-account\" class=\"anchor\"></a>Mixpanel account</h3><p>The site will report basic information to Mixpanel if you have an account. It will by default use the environment variable <code>MIXPANEL_KEY</code>.</p>\n<p>This can also be set in the configuration file by using the <code>mixpanel</code> key:</p>\n<pre><code>{ <span class=\"hljs-attribute\">mixpanel</span>: <span class=\"hljs-string\">'&lt;my-api-key-here&gt;'</span> }\n</code></pre><h3 id=\"advanced-password-security\"><a href=\"#advanced-password-security\" class=\"anchor\"></a>Advanced password security</h3><p>If you want to have advanced security for generating passwords, you can use ES512 keys, for example. Generate the keys using <a href=\"https://connect2id.com/products/nimbus-jose-jwt/openssl-key-generation\">this tutorial</a> and set their locations in the configuration file.</p>\n<pre><code>{\n  <span class=\"hljs-attribute\">township</span>: {\n    db: <span class=\"hljs-string\">'township.db'</span>,\n    publicKey: path.<span class=\"hljs-built_in\">join</span>(<span class=\"hljs-string\">'secrets'</span>, <span class=\"hljs-string\">'ecdsa-p521-public.pem'</span>),\n    privateKey: path.<span class=\"hljs-built_in\">join</span>(<span class=\"hljs-string\">'secrets'</span>, <span class=\"hljs-string\">'ecdsa-p521-private.pem'</span>),\n    algorithm: <span class=\"hljs-string\">'ES512'</span>\n  }\n}\n</code></pre>","discussions":"<p>this repo doesn&#39;t have code, go to <a href=\"https://github.com/datproject/meta/issues\">the issue tracker</a> instead</p>\n","design":"<h1 id=\"dat-design\"><a href=\"#dat-design\" class=\"anchor\"></a>dat-design</h1><p><a href=\"https://npmjs.org/package/dat-design\"><img src=\"https://img.shields.io/npm/v/dat-design.svg?style=flat-square\" alt=\"NPM version\"></a>\n<a href=\"https://gitter.im/datproject/design?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\"><img src=\"https://badges.gitter.im/datproject/design.svg\" alt=\"Join the chat at https://gitter.im/datproject/design\"></a></p>\n<p>design resources and assets for the <a href=\"http://dat-data.com\">dat project</a></p>\n<h2 id=\"build-and-deploy-documentation-website\"><a href=\"#build-and-deploy-documentation-website\" class=\"anchor\"></a>Build and deploy documentation website</h2><p>run <code>./scripts/build</code></p>\n<h2 id=\"build-andor-develop-on-this-module\"><a href=\"#build-andor-develop-on-this-module\" class=\"anchor\"></a>Build and/or develop on this module:</h2><pre><code class=\"lang-shell\">npm install\nnpm run watch-css\nnpm run watch-site\nopen dist/index.html\n</code></pre>\n<h2 id=\"lessa-namedat-design-apigreaterlessagreaterapi-for-importing-scss-assets-into-other-projects\"><a href=\"#lessa-namedat-design-apigreaterlessagreaterapi-for-importing-scss-assets-into-other-projects\" class=\"anchor\"></a><a name=\"dat-design-api\"></a>api for importing (s)css assets into other projects</h2><p>from your project’s root directory (assuming you’re using <a href=\"http://npmjs.com\">npm</a>):</p>\n<pre><code class=\"lang-shell\">npm install dat-design --save\n</code></pre>\n<p>from here you have the following choices for including individual .css files in your project:</p>\n<h4 id=\"vanilla-link\"><a href=\"#vanilla-link\" class=\"anchor\"></a>vanilla link</h4><p>the simplest way to include this module in another project. just include the stylesheet you want in your html as you would any other stylesheet with a relative link. not recommended for use in production web apps because this would involve making your node_modules directory accessible from the web:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"./../node_modules/dat-design/css/base.css\"</span>&gt;</span>\n</code></pre>\n<h4 id=\"vanilla-import\"><a href=\"#vanilla-import\" class=\"anchor\"></a>vanilla @import:</h4><p>from within a css file in your project, include a relative path to the file you want to include from this repo, which is now in your project’s <code>nodule_modules</code> directory. not recommended for use in production web apps without a build step that removes the @import, since @import is not performant on the fly.</p>\n<pre><code class=\"lang-css\">@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./../node_modules/dat-design/public/css/base.css'</span>;\n</code></pre>\n<h4 id=\"node-sass-magic-importer\"><a href=\"#node-sass-magic-importer\" class=\"anchor\"></a>node-sass-magic-importer:</h4><p>Use the <a href=\"https://www.npmjs.com/package/node-sass-magic-importer\">magic importer npm module</a> with node-sass.</p>\n<pre><code class=\"lang-shell\">npm install node-sass-magic-importer --save-dev\n</code></pre>\n<p>when you set up node-sass to run in your package.json scripts, you can use the <code>--importer</code> option like so:</p>\n<pre><code class=\"lang-json\">&quot;build-css&quot;: &quot;node-sass --importer node_modules/node-sass-magic-importer src/scss/sample.scss public/css/sample.css&quot;\n</code></pre>\n<p>now, from within your <code>sample.scss</code> file, you can <code>@import</code> this <code>dat-design</code> npm module with the following syntax:</p>\n<pre><code class=\"lang-scss\">@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"~dat-design\"</span>;\n</code></pre>\n<p>if there&#39;s no file path specified after the <code>dat-design</code> module name (like above), the <code>@import</code> rule resolves to the file defined by this module&#39;s <code>style</code> property in the package.json. you can also point at individual files within this module from within the scss files in your project to use mixins and variables:</p>\n<pre><code class=\"lang-scss\">@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"~dat-design/base/buttons.scss\"</span>\n</code></pre>\n<p>node-sass-magic-importer offers lots of other options in addition to these as well.</p>\n<h3 id=\"how-to-use-dat-scss-in-your-project\"><a href=\"#how-to-use-dat-scss-in-your-project\" class=\"anchor\"></a>How To Use Dat (S)CSS in Your Project</h3><p>By importing dat-design in your projects (s)css, you’ll get the following:</p>\n<h4 id=\"reset\"><a href=\"#reset\" class=\"anchor\"></a>Reset</h4><p>Dat-design uses <a href=\"https://necolas.github.io/normalize.css/\">Normalize</a>, which makes browsers render all elements more consistently.</p>\n<h4 id=\"variables\"><a href=\"#variables\" class=\"anchor\"></a>Variables</h4><p>The SCSS version of dat-design provides you with <a href=\"https://github.com/datproject/design/tree/master/scss/variables\">variables</a> for colors and transitions which you should use in your project to ensure visual consistency between dat-related projects. Refer to the <a href=\"http://datproject.github.io/design/\">Dat Styleguide</a> to understand how.</p>\n<h4 id=\"dat-classes\"><a href=\"#dat-classes\" class=\"anchor\"></a>Dat classes</h4><p>There’s also a set of custom classes for dat-specific components, like buttons or loaders. Those components are documented in the <a href=\"http://datproject.github.io/design/\">Dat Styleguide</a>.</p>\n<h4 id=\"logo-assets\"><a href=\"#logo-assets\" class=\"anchor\"></a>Logo Assets</h4><p>Dat-design comes with ready-to-use logo assets, in <code>./../node_modules/dat-design/public/img</code>.</p>\n<h2 id=\"is-something-missing\"><a href=\"#is-something-missing\" class=\"anchor\"></a>Is something missing?</h2><p>If some dat project is in need of a new design element or concept please open an issue!</p>\n","dat-elements":"<h1 id=\"dat-elements-stability01\"><a href=\"#dat-elements-stability01\" class=\"anchor\"></a>dat-elements <a href=\"https://nodejs.org/api/documentation.html#documentation_stability_index\"><img src=\"https://img.shields.io/badge/stability-experimental-orange.svg?style=flat-square\" alt=\"stability\"></a></h1><p><a href=\"https://npmjs.org/package/dat-elements\"><img src=\"https://img.shields.io/npm/v/dat-elements.svg?style=flat-square\" alt=\"npm version\"></a> <a href=\"https://travis-ci.org/datproject/dat-elements\"><img src=\"https://img.shields.io/travis/datproject/dat-elements/master.svg?style=flat-square\" alt=\"build status\"></a>\n<a href=\"https://npmjs.org/package/dat-elements\"><img src=\"http://img.shields.io/npm/dm/dat-elements.svg?style=flat-square\" alt=\"downloads\"></a> <a href=\"https://github.com/feross/standard\"><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\" alt=\"js-standard-style\"></a></p>\n<p>Dat UI elements.</p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> Loader = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-elements/loader'</span>)\n<span class=\"hljs-keyword\">var</span> Sprite = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-elements/sprite'</span>)\n<span class=\"hljs-keyword\">var</span> Icon = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-elements/icon'</span>)\n\n<span class=\"hljs-comment\">// load the SVG sprite containing all icons onto the DOM</span>\n<span class=\"hljs-keyword\">var</span> sprite = Sprite()\n<span class=\"hljs-built_in\">document</span>.body.appendChild(sprite)\n\n<span class=\"hljs-comment\">// select an icon from the sprite!</span>\n<span class=\"hljs-keyword\">var</span> icon = Icon(<span class=\"hljs-string\">'happy-dat'</span>)\n<span class=\"hljs-built_in\">document</span>.body.appendChild(icon)\n\n<span class=\"hljs-comment\">// create a loader element</span>\n<span class=\"hljs-keyword\">var</span> loader = Loader()\n<span class=\"hljs-built_in\">document</span>.body.appendChild(loader)\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"loader-loader\"><a href=\"#loader-loader\" class=\"anchor\"></a><code>loader = Loader()</code></h3><p>Create a smooth, pulsating loader.</p>\n<h3 id=\"sprite-sprite\"><a href=\"#sprite-sprite\" class=\"anchor\"></a><code>sprite = Sprite()</code></h3><p>Create a new SVG sprite that must be loaded onto the DOM as the first child\nelement. Allows the icon element to work.</p>\n<h3 id=\"icon-iconiconname-options\"><a href=\"#icon-iconiconname-options\" class=\"anchor\"></a><code>icon = Icon(iconName, [options])</code></h3><p>Create a new icon element, referencing an icon from the sprite.</p>\n<h2 id=\"installation\"><a href=\"#installation\" class=\"anchor\"></a>Installation</h2><pre><code class=\"lang-sh\">$ npm install dat-elements\n</code></pre>\n<h2 id=\"see-also\"><a href=\"#see-also\" class=\"anchor\"></a>See Also</h2><ul>\n<li><a href=\"https://github.com/Kriesse/dat-icons\">dat-icons</a></li>\n</ul>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p><a href=\"https://tldrlegal.com/license/mit-license\">MIT</a></p>\n","dat-colors":"<h1 id=\"dat-colors\"><a href=\"#dat-colors\" class=\"anchor\"></a>Dat Colors</h1><p>CSS color variables for Dat</p>\n<h2 id=\"styles\"><a href=\"#styles\" class=\"anchor\"></a>Styles</h2><pre><code class=\"lang-css\">:root {\n  --color-white: #FFFFFF;\n  --color-black: #070B14;\n  --color-neutral: #293648;\n  --color-neutral-90: #394B5B;\n  --color-neutral-80: #505F6D;\n  --color-neutral-70: #65737F;\n  --color-neutral-60: #7C8792;\n  --color-neutral-50: #919BA4;\n  --color-neutral-40: #A7AFB6;\n  --color-neutral-30: #C3C9CD;\n  --color-neutral-20: #D3D7DB;\n  --color-neutral-14: #E0E3E5;\n  --color-neutral-10: #E9EBEC;\n  --color-neutral-04: #F6F7F8;\n  --color-green: #2ACA4B;\n  --color-green-hover: #199E33;\n  --color-green-darker: #006607;\n  --color-green-disabled: #94E4A5;\n  --color-blue: #007FFF;\n  --color-blue-hover: #0066CC;\n  --color-blue-darker: #003E83;\n  --color-blue-disabled: #7FBFFF;\n  --color-mint: #159F84;\n  --color-mint-hover: #0B856D;\n  --color-mint-darker: #045943;\n  --color-mint-disabled: #8ACFC1;\n  --color-yellow: #F2CD02;\n  --color-yellow-hover: #C4A500;\n  --color-yellow-darker: #9F7D07;\n  --color-yellow-disabled: #FBF0B3;\n  --color-red: #D8524E;\n  --color-red-hover: #B33C38;\n  --color-red-darker: #A52724;\n  --color-red-disabled: #EBA8A6;\n  --color-pink: #F9A5E4;\n}\n</code></pre>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","dat-icons":"<h1 id=\"dat-icons\"><a href=\"#dat-icons\" class=\"anchor\"></a>dat-icons</h1><p><a href=\"https://npmjs.org/package/dat-icons\"><img src=\"https://img.shields.io/npm/v/dat-icons.svg?style=flat-square\" alt=\"NPM version\"></a></p>\n<p>SVG icons for <a href=\"http://dat-data.com\">dat project</a> and related projects.</p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> svgSprite = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-icons'</span>)\n<span class=\"hljs-keyword\">var</span> el = svgSprite()\n<span class=\"hljs-built_in\">document</span>.body.appendChild(el)\n</code></pre>\n<p>Make sure to include this sprite in your page as the first element after the <code>&lt;body&gt;</code> opening tag.</p>\n<p>Icons can later be referenced like so:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">use</span> <span class=\"hljs-attr\">xlink:href</span>=<span class=\"hljs-string\">\"#daticon-happy-dat\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">use</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span>\n</code></pre>\n<p>If this looks unfamiliar, read more about an SVG workflow using SVG sprites and <code>&lt;use&gt;</code> <a href=\"https://www.sitepoint.com/a-working-svg-workflow-for-accessible-icons/\">here</a>.</p>\n<h3 id=\"icon-names\"><a href=\"#icon-names\" class=\"anchor\"></a>Icon Names</h3><ul>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/clipboard.svg\"> <code>daticon-clipboard</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/create-new-dat.svg\"> <code>daticon-create-new-dat</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/delete.svg\"> <code>daticon-delete</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/download.svg\"> <code>daticon-download</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/edit-dat.svg\"> <code>daticon-edit-dat</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/file.svg\"> <code>daticon-file</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/folder.svg\"> <code>daticon-folder</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/happy-dat.svg\"> <code>daticon-happy-dat</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/hexagon-down.svg\"> <code>daticon-hexagon-down</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/hexagon-outlines.svg\"> <code>daticon-hexagon-outlines</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/hexagon-pause.svg\"> <code>daticon-hexagon-pause</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/hexagon-resume.svg\"> <code>daticon-hexagon-resume</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/hexagon-up.svg\"> <code>daticon-hexagon-up</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/hexagon-x.svg\"> <code>daticon-hexagon-x</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/import-dat.svg\"> <code>daticon-import-dat</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/link.svg\"> <code>daticon-link</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/loading.svg\"> <code>daticon-loading</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/letter.svg\"> <code>daticon-letter</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/lock.svg\"> <code>daticon-lock</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/menu.svg\"> <code>daticon-menu</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/network.svg\"> <code>daticon-network</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/open-in-desktop.svg\"> <code>daticon-open-in-desktop</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/open-in-finder.svg\"> <code>daticon-open-in-finder</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/plus.svg\"> <code>daticon-plus</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/question.svg\"> <code>daticon-question</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/sad-dat.svg\"> <code>daticon-sad-dat</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/star-dat.svg\"> <code>daticon-star-dat</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/edit.svg\"> <code>daticon-edit</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/info.svg\"> <code>daticon-info</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/gear.svg\"> <code>daticon-gear</code></li>\n<li><img width=\"16px\" src=\"https://cdn.rawgit.com/kriesse/dat-icons/master/icons/search.svg\"> <code>daticon-search</code></li>\n</ul>\n<h2 id=\"build\"><a href=\"#build\" class=\"anchor\"></a>Build</h2><p>to build SVG sprite:</p>\n<pre><code class=\"lang-shell\">npm install\nnpm run build-icons\n</code></pre>\n","dat.json":"<h1 id=\"datjson\"><a href=\"#datjson\" class=\"anchor\"></a>dat.json</h1><p>The WIP specification for the dat.json meta format.</p>\n<pre><code class=\"lang-json\">{\n  <span class=\"hljs-attr\">\"title\"</span>: <span class=\"hljs-string\">\"My paper library\"</span>,\n  <span class=\"hljs-attr\">\"author\"</span>: <span class=\"hljs-string\">\"Julian Gruber &lt;julian@juliangruber.com&gt;\"</span>,\n  <span class=\"hljs-attr\">\"url\"</span>: <span class=\"hljs-string\">\"dat://c75ffb161a9965e47323ba9b76aa11f649504b0d2d5d062dcb3438d5aeadc187\"</span>\n}\n</code></pre>\n<h2 id=\"specification\"><a href=\"#specification\" class=\"anchor\"></a>Specification</h2><p>Add a <code>dat.json</code> with any of those keys - all are optional - to the root of a dat archive to help tooling work with your archive more nicely:</p>\n<h3 id=\"title\"><a href=\"#title\" class=\"anchor\"></a><code>.title</code></h3><p>A short but descriptive human friendly title.</p>\n<h3 id=\"description\"><a href=\"#description\" class=\"anchor\"></a><code>.description</code></h3><p>A one- or two-line description of the archive.</p>\n<h3 id=\"url\"><a href=\"#url\" class=\"anchor\"></a><code>.url</code></h3><p>Url of the Dat archive. This will usually be the <code>dat://</code> then the archive key.</p>\n<h3 id=\"author\"><a href=\"#author\" class=\"anchor\"></a><code>.author</code></h3><p>The archive&#39;s author - the packager, not necessarily the data&#39;s author as well. Can be either an object with any of those keys:</p>\n<pre><code class=\"lang-json\">{\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"Julian Gruber\"</span>,\n  <span class=\"hljs-attr\">\"email\"</span>: <span class=\"hljs-string\">\"julian@juliangruber.com\"</span>,\n  <span class=\"hljs-attr\">\"web\"</span>: <span class=\"hljs-string\">\"https://juliangruber.com\"</span>\n}\n</code></pre>\n<p>or a string with at least the name and any of the segments email and web:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"NAME &lt;EMAIL&gt; (WEB)\"</span>\n</code></pre>\n<p>like for example:</p>\n<ul>\n<li><code>&quot;Julian Gruber&quot;</code></li>\n<li><code>&quot;Julian Gruber &lt;julian@juliangruber.com&gt;&quot;</code></li>\n<li><code>&quot;Julian Gruber (https://juliangruber.com/)&quot;</code></li>\n<li><code>&quot;Julian Gruber &lt;julian@juliangruber.com&gt; (https://juliangruber.com/)&quot;</code></li>\n</ul>\n<h2 id=\"support\"><a href=\"#support\" class=\"anchor\"></a>Support</h2><ul>\n<li><a href=\"https://github.com/juliangruber/dat-desktop\">Dat-Desktop</a> will use <code>.title</code> to display a nice archive name instead of just its key</li>\n</ul>\n","dat.haus":"<h1 id=\"httpsdathaus\"><a href=\"#httpsdathaus\" class=\"anchor\"></a><a href=\"https://dat.haus/\">https://dat.haus/</a></h1><p>  <a href=\"http://dat-data.com/\">Dat</a> + Http + Unix.</p>\n<p>  The composable HTTP API to the <a href=\"http://dat-data.com/\">dat</a> network!</p>\n<h2 id=\"roadmap\"><a href=\"#roadmap\" class=\"anchor\"></a>Roadmap</h2><ul>\n<li>[x] <code>curl https://dat.haus/ARCHIVE/FILE &gt; file.txt</code></li>\n<li>[ ] <code>curl https://dat.haus/ARCHIVE.tar &gt; file.tar.gz</code></li>\n<li>[x] <code>curl https://dat.haus/ARCHIVE &gt; info.txt</code></li>\n<li>[ ] <code>cat file | curl -XPOST https://dat.haus/</code></li>\n<li>[ ] <code>tar -cz - . | curl -XPOST https://dat.haus/</code></li>\n<li>[ ] <code>curl -XHEAD https://dat.haus/ARCHIVE/FILE &gt; stat.txt</code></li>\n<li>[ ] <code>curl -XHEAD https://dat.haus/ARCHIVE &gt; stat-and-list.txt</code></li>\n</ul>\n","hyperfeed":"<h1 id=\"hyperfeed\"><a href=\"#hyperfeed\" class=\"anchor\"></a>Hyperfeed</h1><p><a href=\"https://www.npmjs.com/package/hyperfeed\"><img src=\"https://img.shields.io/npm/v/hyperfeed.svg\" alt=\"NPM Version\"></a> <a href=\"http://standardjs.com/\"><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg\" alt=\"JavaScript Style Guide\"></a></p>\n<p>Hyperfeed is a self-archiving P2P live feed. You can convert any RSS/ATOM/RDF feed to a P2P live update publishing network.</p>\n<ul>\n<li><strong>Self-archiving</strong>: Items and it&#39;s linked page will be archived within hyperfeed.</li>\n<li><strong>Decentralized</strong>: Feed contents can still be distributed between readers even if the original host is down.</li>\n<li><strong>Live</strong>: No need to poll the original feed. Updates will be pushed to you.</li>\n</ul>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> hyperfeed\n</code></pre><h2 id=\"synopsis\"><a href=\"#synopsis\" class=\"anchor\"></a>Synopsis</h2><p>Publish your RSS feed through hyperfeed:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> request = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'request'</span>)\n<span class=\"hljs-keyword\">const</span> hyperfeed = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperfeed'</span>)\n<span class=\"hljs-keyword\">const</span> hyperdrive = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive'</span>)\n<span class=\"hljs-keyword\">const</span> swarm = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdiscovery'</span>)\n\n<span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-string\">'https://medium.com/feed/google-developers'</span>\n\n<span class=\"hljs-keyword\">var</span> archive = hyperdrive(<span class=\"hljs-string\">'./feed'</span>)\n<span class=\"hljs-keyword\">var</span> feed = hyperfeed(archive)\nfeed.ready(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  swarm(archive)\n  <span class=\"hljs-built_in\">console</span>.log(feed.key.toString(<span class=\"hljs-string\">'hex'</span>))\n  feed.update(request(url), (err) =&gt; {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'feed imported'</span>)\n  })\n})\n</code></pre>\n<p>Now you can replicate the hyperfeed through a p2p network:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> Hyperfeed = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperfeed'</span>)\n<span class=\"hljs-keyword\">const</span> swarm = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdiscovery'</span>)\n<span class=\"hljs-keyword\">const</span> hyperdrive = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive'</span>)\n\n<span class=\"hljs-keyword\">var</span> archive = hyperdrive(<span class=\"hljs-string\">'./anotherFeed'</span>, <span class=\"hljs-string\">'&lt;KEY FROM ABOVE&gt;'</span>)\n<span class=\"hljs-keyword\">var</span> feed = hyperfeed(archive)\nswarm(archive) <span class=\"hljs-comment\">// load the feed from the p2p network</span>\nfeed.list(<span class=\"hljs-function\">(<span class=\"hljs-params\">err, entries</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(entries) <span class=\"hljs-comment\">// all entries in the feed (include history entries)</span>\n})\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h4 id=\"var-feed-hyperfeedarchive-opts\"><a href=\"#var-feed-hyperfeedarchive-opts\" class=\"anchor\"></a><code>var feed = hyperfeed(archive, [opts])</code></h4><p>Create a new Hyperfeed instance. <code>opts</code> includes:</p>\n<pre><code class=\"lang-javascript\">{\n  <span class=\"hljs-attr\">scrapLink</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// set to false to stop archiving linked page for each feed item</span>\n}\n</code></pre>\n<h4 id=\"feedkey\"><a href=\"#feedkey\" class=\"anchor\"></a><code>feed.key</code></h4><p>The public key identifying the feed.</p>\n<h4 id=\"feeddiscoverykey\"><a href=\"#feeddiscoverykey\" class=\"anchor\"></a><code>feed.discoveryKey</code></h4><p>A key derived from the public key that can be used to discovery other peers sharing this feed.</p>\n<h4 id=\"feedmeta\"><a href=\"#feedmeta\" class=\"anchor\"></a><code>feed.meta</code></h4><p>The metadata of the feed.</p>\n<h4 id=\"feedreadycb\"><a href=\"#feedreadycb\" class=\"anchor\"></a><code>feed.ready(cb)</code></h4><p>Wait for feed is fully ready and all properties has been populated.</p>\n<h4 id=\"feedupdatefeedstream-cberr-feed\"><a href=\"#feedupdatefeedstream-cberr-feed\" class=\"anchor\"></a><code>feed.update(feedStream, cb(err, feed))</code></h4><p>import a RSS feed into <code>feed</code>. Accept a stream.</p>\n<h4 id=\"feedsetmetametadataobject-cberr\"><a href=\"#feedsetmetametadataobject-cberr\" class=\"anchor\"></a><code>feed.setMeta(metadataObject, cb(err))</code></h4><p>Set feed&#39;s metadata.</p>\n<h4 id=\"feedlistcberr-entries\"><a href=\"#feedlistcberr-entries\" class=\"anchor\"></a><code>feed.list(cb(err, entries))</code></h4><p>List archived item in the feed.</p>\n<h4 id=\"feedsaveitem-scrappeddata-cberr\"><a href=\"#feedsaveitem-scrappeddata-cberr\" class=\"anchor\"></a><code>feed.save(item, [scrappedData], cb(err))</code></h4><p>Save a new feed item.  Check <a href=\"https://github.com/jpmonette/feed\">https://github.com/jpmonette/feed</a> for item detail.</p>\n<p>If you already have scrapped data for the given item, you can pass it to <code>scrappedData</code> to avoid redundant requests.</p>\n<h4 id=\"feedexportcount-cberr-rss\"><a href=\"#feedexportcount-cberr-rss\" class=\"anchor\"></a><code>feed.export(count, cb(err, rss))</code></h4><p>Export a RSS-2.0 Feed containing latest <code>count</code> items.</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>The MIT License</p>\n","normcore":"<h1 id=\"normcore-stability01\"><a href=\"#normcore-stability01\" class=\"anchor\"></a>normcore <a href=\"https://nodejs.org/api/documentation.html#documentation_stability_index\"><img src=\"https://img.shields.io/badge/stability-experimental-orange.svg?style=flat-square\" alt=\"stability\"></a></h1><p><a href=\"https://npmjs.org/package/normcore\"><img src=\"https://img.shields.io/npm/v/normcore.svg?style=flat-square\" alt=\"npm version\"></a> <a href=\"https://travis-ci.org/yoshuawuyts/normcore\"><img src=\"https://img.shields.io/travis/yoshuawuyts/normcore/master.svg?style=flat-square\" alt=\"build status\"></a>\n<a href=\"https://npmjs.org/package/normcore\"><img src=\"http://img.shields.io/npm/dm/normcore.svg?style=flat-square\" alt=\"downloads\"></a> <a href=\"https://github.com/feross/standard\"><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\" alt=\"js-standard-style\"></a></p>\n<p>No-config distributed streams using <a href=\"https://github.com/mafintosh/hypercore\">hypercore</a>.</p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> normcore = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'normcore'</span>)\n\n<span class=\"hljs-keyword\">const</span> feed1 = normcore(<span class=\"hljs-string\">'welcome-to-the-norm-zone'</span>)\n<span class=\"hljs-keyword\">const</span> key = feed1.key.toString(<span class=\"hljs-string\">'hex'</span>)\nfeed1.append(<span class=\"hljs-string\">'hello'</span>)\nfeed1.append(<span class=\"hljs-string\">'this is norman'</span>)\n\n<span class=\"hljs-keyword\">const</span> feed2 = normcore(key)\nfeed2.createReadStream().on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'feed2: '</span> + data.toString())\n})\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"feed-normcorekeyornameorpath-opts\"><a href=\"#feed-normcorekeyornameorpath-opts\" class=\"anchor\"></a>feed = normcore(keyOrNameOrPath, [opts])</h3><p>Create a new <code>normcore</code> instance. If you pass in a hypercore hex key it will\nfetch that feed. If you pass it an absolute path it will create a core at that\nlocation. Otherwise it just uses the string as the local db name</p>\n<p><code>opts</code>, if specified, gets passed through as <code>hyperdiscovery</code> options</p>\n<h3 id=\"key-feedkey\"><a href=\"#key-feedkey\" class=\"anchor\"></a>key = feed.key</h3><p>Get the hypercore key. You probably usually want to turn it into a hex value:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> hypercore = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hypercore'</span>)\n<span class=\"hljs-keyword\">const</span> feed = normcore(<span class=\"hljs-string\">'omnormnormnormnorm'</span>)\n<span class=\"hljs-built_in\">console</span>.log(feed.key.toString(<span class=\"hljs-string\">'hex'</span>))\n</code></pre>\n<h3 id=\"feedappenddata\"><a href=\"#feedappenddata\" class=\"anchor\"></a>feed.append(data)</h3><p>Write data into the feed</p>\n<h3 id=\"writeablestream-feedcreatewriteablestream\"><a href=\"#writeablestream-feedcreatewriteablestream\" class=\"anchor\"></a>writeableStream = feed.createWriteableStream()</h3><p>Create a new <code>writeableStream</code> you can write data to</p>\n<h3 id=\"readablestream-feedcreatereadablestream\"><a href=\"#readablestream-feedcreatereadablestream\" class=\"anchor\"></a>readableStream = feed.createReadableStream()</h3><p>Create a new <code>readableStream</code> you can read data from</p>\n<h2 id=\"installation\"><a href=\"#installation\" class=\"anchor\"></a>Installation</h2><pre><code class=\"lang-sh\">$ npm install normcore\n</code></pre>\n<h2 id=\"see-also\"><a href=\"#see-also\" class=\"anchor\"></a>See Also</h2><ul>\n<li><a href=\"https://github.com/mafintosh/hypercore\">hypercore</a></li>\n<li><a href=\"https://github.com/karissa/hyperdrive-archive-swarm\">hyperdrive-archive-swarm</a></li>\n</ul>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p><a href=\"https://tldrlegal.com/license/mit-license\">MIT</a></p>\n","github-to-hypercore":"<h1 id=\"github-to-hypercore-stability01\"><a href=\"#github-to-hypercore-stability01\" class=\"anchor\"></a>github-to-hypercore <a href=\"https://nodejs.org/api/documentation.html#documentation_stability_index\"><img src=\"https://img.shields.io/badge/stability-experimental-orange.svg?style=flat-square\" alt=\"stability\"></a></h1><p><a href=\"https://npmjs.org/package/github-to-hypercore\"><img src=\"https://img.shields.io/npm/v/github-to-hypercore.svg?style=flat-square\" alt=\"npm version\"></a> <a href=\"https://travis-ci.org/yoshuawuyts/github-to-hypercore\"><img src=\"https://img.shields.io/travis/yoshuawuyts/github-to-hypercore/master.svg?style=flat-square\" alt=\"build status\"></a> <a href=\"https://codecov.io/github/yoshuawuyts/github-to-hypercore\"><img src=\"https://img.shields.io/codecov/c/github/yoshuawuyts/github-to-hypercore/master.svg?style=flat-square\" alt=\"test coverage\"></a>\n<a href=\"https://npmjs.org/package/github-to-hypercore\"><img src=\"http://img.shields.io/npm/dm/github-to-hypercore.svg?style=flat-square\" alt=\"downloads\"></a> <a href=\"https://github.com/feross/standard\"><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\" alt=\"js-standard-style\"></a></p>\n<p>Stream a github event feed into a hypercore.</p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-sh\">$ SECRET=&lt;cool-github-secret&gt; PORT=&lt;some-port&gt; github-to-hypercore\n<span class=\"hljs-comment\"># =&gt; &lt;base64 key&gt;</span>\n</code></pre>\n<p>To apply to all of your projects, you need to create a new <a href=\"https://github.com/settings/installations\">github\nintegration</a> that can receive the\nwebhook events.</p>\n<h2 id=\"installation\"><a href=\"#installation\" class=\"anchor\"></a>Installation</h2><pre><code class=\"lang-sh\">$ npm install github-to-hypercore\n</code></pre>\n<h2 id=\"see-also\"><a href=\"#see-also\" class=\"anchor\"></a>See Also</h2><ul>\n<li><a href=\"https://developer.github.com/webhooks/#events\">https://developer.github.com/webhooks/#events</a></li>\n<li><a href=\"https://github.com/settings/installations\">https://github.com/settings/installations</a></li>\n</ul>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p><a href=\"https://tldrlegal.com/license/mit-license\">MIT</a></p>\n","hyperspark":"<h1 id=\"hyperspark\"><a href=\"#hyperspark\" class=\"anchor\"></a>Hyperspark</h1><p>Hyperspark is a decentralized data processing tool for <a href=\"http://dat-data.com\">Dat</a>. Inspired by <a href=\"https://spark.apache.org/\">Spark</a></p>\n<p>Basically, it&#39;s just a fancy wrapper around <a href=\"datproject.org\">Dat Archive</a></p>\n<p><strong>This is a work-in-progress. Any idea/suggestion is welcome</strong></p>\n<h3 id=\"goal\"><a href=\"#goal\" class=\"anchor\"></a>Goal</h3><ul>\n<li>Reuse intermediate data.</li>\n<li>Minimize bandwidth usage.</li>\n<li>Share computation power.</li>\n</ul>\n<h2 id=\"how-to-use\"><a href=\"#how-to-use\" class=\"anchor\"></a>How to use</h2><h4 id=\"data-owner\"><a href=\"#data-owner\" class=\"anchor\"></a>Data owner</h4><p>It&#39;s simple! Just share your data with dat: <code>dat .</code></p>\n<h4 id=\"data-scientist\"><a href=\"#data-scientist\" class=\"anchor\"></a>Data Scientist</h4><p>Define your ideas with <a href=\"https://github.com/poga/dat-transform\">transforms and actions</a> without worrying about fetching and storing data.</p>\n<h4 id=\"computation-provider\"><a href=\"#computation-provider\" class=\"anchor\"></a>Computation Provider</h4><p>Run transformations defined by researchers. Cache and share intermediate data so everyone can re-use the knowledge without having their own computation cluster.</p>\n<hr>\n<h2 id=\"synopsis\"><a href=\"#synopsis\" class=\"anchor\"></a>Synopsis</h2><p>define RDD on dat with <a href=\"https://github.com/poga/dat-transform\">dat-transform</a></p>\n<p>word-counting:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> hs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperspark'</span>)\n<span class=\"hljs-keyword\">var</span> rdd = hs(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DAT-ARCHIVE-KEY</span>&gt;</span>)\n\n// define transforms\nvar result = rdd\n  .splitBy(/[\\n\\s]/)\n  .filter(x =&gt; x !== '')\n  .map(word =&gt; kv(word, 1))\n\n// actual run(action)\nresult.reduceByKey((x, y) =&gt; x + y)\n  .toArray(res =&gt; {\n    console.log(res) // [{bar: 2, baz: 1, foo: 1}]\n  })</span>\n</code></pre>\n<h2 id=\"related-modules\"><a href=\"#related-modules\" class=\"anchor\"></a>Related Modules</h2><ul>\n<li>RDD-style data transformation with js. <a href=\"https://github.com/poga/dat-transform\">dat-transform</a></li>\n<li>Analyze data inside dat archive with RDD-style API. <a href=\"https://github.com/poga/dat-ipynb-demo\">dat-ipynb</a>, using <a href=\"https://github.com/poga/nel\">nel</a></li>\n<li>Convert iPython Notebook to Markdown. <a href=\"https://github.com/poga/ipynb2md\">ipynb2md</a></li>\n<li>Attach file to markdown with dat. <a href=\"https://github.com/poga/markdown-attachment-p2p\">markdown-attachment-p2p</a></li>\n</ul>\n","hypercore-index":"<h1 id=\"hypercore-index\"><a href=\"#hypercore-index\" class=\"anchor\"></a>hypercore-index</h1><p>Linear asynchronous stateful indexing of a\n<a href=\"https://github.com/mafintosh/hypercore\">hypercore</a> feed.</p>\n<p><a href=\"http://travis-ci.org/juliangruber/hypercore-index\"><img src=\"https://travis-ci.org/juliangruber/hypercore-index.svg?branch=master\" alt=\"build status\"></a>\n<a href=\"https://greenkeeper.io/\"><img src=\"https://badges.greenkeeper.io/juliangruber/hypercore-index.svg\" alt=\"Greenkeeper badge\"></a></p>\n<p>Traverses a hypercore feed in chronologic order and lets you consume each\nentry via some asynchronous function. Remembers where you left inside the\nfeed&#39;s db and continues there on later runs.</p>\n<h2 id=\"example\"><a href=\"#example\" class=\"anchor\"></a>Example</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> ram = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'random-access-memory'</span>)\n<span class=\"hljs-keyword\">const</span> hypercore = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hypercore'</span>)\n<span class=\"hljs-keyword\">const</span> index = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hypercore-index'</span>)\n\n<span class=\"hljs-keyword\">const</span> feed = hypercore(ram)\n\nindex(ram(), {\n  <span class=\"hljs-attr\">feed</span>: feed\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onentry</span> (<span class=\"hljs-params\">entry, next</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'entry'</span>, entry.toString())\n  next()\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ondone</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Done!'</span>)\n})\n</code></pre>\n<h2 id=\"installation\"><a href=\"#installation\" class=\"anchor\"></a>Installation</h2><pre><code class=\"lang-bash\">$ npm install hypercore-index\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"var-append-indexstorage-opts-onentry-ondone\"><a href=\"#var-append-indexstorage-opts-onentry-ondone\" class=\"anchor\"></a>var append = index(storage, opts, onentry, [ondone])</h3><p><code>storage</code> is an <a href=\"https://github.com/juliangruber/abstract-random-access\">abstract-random-access</a> compliant storage or file path.</p>\n<p>Options:</p>\n<ul>\n<li><code>feed</code>: The hypercore feed. Required.</li>\n<li><code>start</code>: The first index. Default: <code>0</code></li>\n<li><code>end</code>: The last index. Default: <code>Infinity</code></li>\n<li><code>live</code>: Whether to keep scanning. Default: <code>true</code>, unless you pass <code>opts.end</code></li>\n</ul>\n<p>If you are the feed owner you can use the <code>append(data, callback)</code> method returned to append\ndata and and wait for it to be indexed</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","hyperdrive-encoding":"<h1 id=\"hyperdrive-encoding\"><a href=\"#hyperdrive-encoding\" class=\"anchor\"></a>hyperdrive-encoding</h1><p>  The message encoding used by\n  <a href=\"https://github.com/mafintosh/hyperdrive\">hyperdrive</a>.</p>\n<p>  <a href=\"http://travis-ci.org/juliangruber/hyperdrive-encoding\"><img src=\"https://travis-ci.org/juliangruber/hyperdrive-encoding.svg?branch=master\" alt=\"build status\"></a>\n  <a href=\"https://github.com/mafintosh/abstract-encoding\"><img src=\"https://img.shields.io/badge/abstract--encoding-compliant-brightgreen.svg?style=flat\" alt=\"abstract-encoding\"></a></p>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"decodebuffer-start-end\"><a href=\"#decodebuffer-start-end\" class=\"anchor\"></a>.decode(buffer[, start][, end])</h3><h3 id=\"encodeobj-buffer-offset\"><a href=\"#encodeobj-buffer-offset\" class=\"anchor\"></a>.encode(obj[, buffer][, offset])</h3><h2 id=\"installation\"><a href=\"#installation\" class=\"anchor\"></a>Installation</h2><pre><code class=\"lang-bash\">$ npm install hyperdrive-encoding\n</code></pre>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>  MIT</p>\n","hyperdrive-http-server":"<h1 id=\"hyperdrive-http-server\"><a href=\"#hyperdrive-http-server\" class=\"anchor\"></a>hyperdrive-http-server</h1><p>Command line tool to serve hyperdrives over http.\nUseful if you want to stream content into other applications like streaming video into VLC.</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> -g hyperdrive-<span class=\"hljs-keyword\">http</span>-<span class=\"hljs-keyword\">server</span>\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-sh\">hyperdrive-http-server 4333067ee4ff8e659d6d12f21b043e66c5f27b9b8b7c3b2ab1d3d8ef7a0947df\n</code></pre>\n<p>After running the above visit, <a href=\"http://localhost:10000/image.gif\">http://localhost:10000/image.gif</a> in your browser.\nIt will also run a stats interface on <a href=\"http://localhost:10001\">http://localhost:10001</a></p>\n<p>For more options run</p>\n<pre><code class=\"lang-sh\">hyperdrive-http-server --<span class=\"hljs-built_in\">help</span>\n</code></pre>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","dat-push":"<h1 id=\"dat-push\"><a href=\"#dat-push\" class=\"anchor\"></a>Dat Push</h1><p>Push files, via Dat, to a server running a <a href=\"https://github.com/maxogden/dat-archiver\">dat-archiver</a> or <a href=\"https://github.com/joehand/dat-publish\">dat-publish</a>. Dat Push will send the files to your server over peer to peer networks.</p>\n<p>Dat push (+ a compatible server) can be used for data publishing, file backup, or website deployment.</p>\n<pre><code>dat-<span class=\"hljs-built_in\">push</span> &lt;server-<span class=\"hljs-built_in\">key</span>&gt; --dir=[<span class=\"hljs-built_in\">directory</span>]\n</code></pre><h3 id=\"features\"><a href=\"#features\" class=\"anchor\"></a>Features</h3><ul>\n<li><strong>Push to Multiple Servers</strong>: Add more server keys to push to as many servers as you like. Redundancy!</li>\n<li><strong>Fast pushes</strong>: After you push the first time, dat-push will only send the data that has changed. Speed!</li>\n<li><strong>Peer to Peer</strong>: Data is sent encrypted over peer to peer networks (not using http). Data is sent directly between you and your servers. Networks!</li>\n<li><strong>Instant Publishing</strong>: Combine dat-push with <a href=\"https://github.com/joehand/dat-publish\">dat-publish</a> to instantly publish your data or files to http and/or Dat networks. Sharing!</li>\n</ul>\n<h2 id=\"installation\"><a href=\"#installation\" class=\"anchor\"></a>Installation</h2><pre><code>npm install -g dat-<span class=\"hljs-keyword\">push</span>\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code>dat-<span class=\"hljs-built_in\">push</span> &lt;server-<span class=\"hljs-built_in\">key</span>&gt; &lt;server-<span class=\"hljs-built_in\">key</span>&gt; --dir=[<span class=\"hljs-built_in\">directory</span>]\n</code></pre><ul>\n<li>Run a <code>dat-archiver</code> or <code>dat-publish</code> server and copy the server key</li>\n<li>Run <code>dat-push &lt;your-server-key&gt;</code> (this will push current directory)</li>\n<li>Files are sent to your dat-archiver server!</li>\n<li><code>dat-push</code> will exit when your server received all the files.</li>\n</ul>\n<p>Dat push uses <a href=\"https://github.com/mafintosh/peer-network\">peer-network</a> to connect to servers. (TODO: Notes about security).</p>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><p><code>dat-push</code> can also be used in other node modules to push Dats. See <code>cli.js</code> for example usage.</p>\n<h3 id=\"var-datpush-datpushopts\"><a href=\"#var-datpush-datpushopts\" class=\"anchor\"></a><code>var datPush = DatPush(opts)</code></h3><p>Options:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">dir</span>: <span class=\"hljs-string\">'/data'</span>, <span class=\"hljs-comment\">// directory to push, required</span>\n}\n</code></pre>\n<h3 id=\"datpushpushserverkey-cb\"><a href=\"#datpushpushserverkey-cb\" class=\"anchor\"></a><code>datPush.push(serverKey, [cb])</code></h3><p>Push your directory to dat-archiver sever with key <code>serverKey</code>. Callback when finished pushing.</p>\n<h3 id=\"datpushonceconnect-key\"><a href=\"#datpushonceconnect-key\" class=\"anchor\"></a><code>datPush.once(&#39;connect&#39;, key)</code></h3><p>Connected to <code>dat-archiver</code> server.</p>\n<h3 id=\"datpushoncedat-open\"><a href=\"#datpushoncedat-open\" class=\"anchor\"></a><code>datPush.once(&#39;dat-open&#39;)</code></h3><p>Dat folder ready to push to archiver. <code>datPush.dat</code> is populated so you can check if its a new dat (<code>datPush.dat.resume</code>) or get the key (<code>datPush.dat.archive.key</code>).</p>\n<h3 id=\"datpushoncereplication-ready-key\"><a href=\"#datpushoncereplication-ready-key\" class=\"anchor\"></a><code>datPush.once(&#39;replication-ready&#39;, key)</code></h3><p>About to replicate. <code>datPush.dat.archive</code> is finalized at this point. File size, or other metrics, available.</p>\n<h3 id=\"datpushoncereplicating-key\"><a href=\"#datpushoncereplicating-key\" class=\"anchor\"></a><code>datPush.once(&#39;replicating&#39;, key)</code></h3><p>Replication to <code>dat-archiver</code> server started.</p>\n<h3 id=\"datpushonprogress-key-remote-total\"><a href=\"#datpushonprogress-key-remote-total\" class=\"anchor\"></a><code>datPush.on(&#39;progress&#39;, key, remote, total)</code></h3><p>Block(s) uploaded to remote server. <code>remote / total</code> will give you % uploaded.</p>\n<h3 id=\"datpushonceupload-finished-key\"><a href=\"#datpushonceupload-finished-key\" class=\"anchor\"></a><code>datPush.once(&#39;upload-finished&#39;, key)</code></h3><p>Upload is finished. Emitted same time as callback is called.</p>\n<h3 id=\"datpushdat\"><a href=\"#datpushdat\" class=\"anchor\"></a><code>datPush.dat</code></h3><p><a href=\"https://github.com/joehand/dat-js\">dat-js</a> instance of Dat folder.</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","dat-backup":"<h1 id=\"dat-backup\"><a href=\"#dat-backup\" class=\"anchor\"></a>dat-backup</h1><p>Backup a dat to local storage. Useful for:</p>\n<ul>\n<li>Storing full history</li>\n<li>Creating local backups of data (good for offline backups!)</li>\n<li>More efficient storage (all content, latest and historic, is stored as a single <code>content.data</code> file)</li>\n</ul>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>A dat backup is good for situations where an archive is only storing the <code>latest</code> content but you want to keep historic version of content around locally, either temporarily or permanently.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> createBackup = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dat-backup'</span>)\n\n<span class=\"hljs-keyword\">var</span> archive = hyperdrive(<span class=\"hljs-string\">'/dir'</span>, {<span class=\"hljs-attr\">latest</span>: <span class=\"hljs-literal\">true</span>}) <span class=\"hljs-comment\">// some existing archive or dat-node instance</span>\n\n<span class=\"hljs-comment\">// default dir is ~/.dat/backups/&lt;discovery-key&gt;</span>\n<span class=\"hljs-keyword\">var</span> backup = createBackup(archive, {<span class=\"hljs-attr\">dir</span>: <span class=\"hljs-string\">'/big-hd/'</span> + archive.discoveryKey.toString(<span class=\"hljs-string\">'hex'</span>)})\n\nbackup.ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n\n  <span class=\"hljs-comment\">// backup archive at current version</span>\n  backup.add(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'archive backed up at version: '</span>, archive.version)\n  })\n\n  <span class=\"hljs-comment\">// List all file versions available in archive backup</span>\n  backup.list(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, files</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n    <span class=\"hljs-built_in\">console</span>.log(files)\n  })\n})\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"var-backup-createbackupsource-opts\"><a href=\"#var-backup-createbackupsource-opts\" class=\"anchor\"></a><code>var backup = createBackup(source, [opts])</code></h3><p><code>source</code> is either a hyperdrive <code>archive</code> or dat-node instanace, <code>dat</code>.</p>\n<p>Options are:</p>\n<ul>\n<li><code>opts.dir</code>: where to store backups, defaults to <code>~/.dat/backup/discKey.slice(0, 2), discKey.slice(2)</code></li>\n</ul>\n<h4 id=\"backupready\"><a href=\"#backupready\" class=\"anchor\"></a><code>backup.ready()</code></h4><p>Initalize the backup and make sure it is ready for adding, etc. This is often called automatically but for sync commands you may need to call it first, e.g. <code>backup.list()</code>.</p>\n<h4 id=\"backupaddopts-cb\"><a href=\"#backupaddopts-cb\" class=\"anchor\"></a><code>backup.add([opts], cb)</code></h4><p>Create a new backup of the archive at current version. Will backup <em>all content</em> available in the current archive, but not any remote archives. <code>callback</code> will be called when finished, unless live.</p>\n<p>Options are:</p>\n<ul>\n<li><code>opts.live</code>: Do a live backup, backing up content as it is updated. Will not callback.</li>\n</ul>\n<h4 id=\"backupremovestart-end-cb\"><a href=\"#backupremovestart-end-cb\" class=\"anchor\"></a><code>backup.remove(start, [end], cb)</code></h4><p>Remove archive version(s) from local backup.</p>\n<p>Start and end have the following properties: <code>{version: 0}</code>. <code>end.version</code> defaults to <code>start.version + 1</code>.</p>\n<p>You can also pass <em>content</em> block numbers directly (equivilant to <code>archive.content.clear(start, end, cb)</code>).</p>\n<h4 id=\"var-stream-backuplistopts-cb\"><a href=\"#var-stream-backuplistopts-cb\" class=\"anchor\"></a><code>var stream = backup.list([opts], [cb])</code></h4><p>List all data available in backup. Streams a list of files from <code>archive.history()</code> if they are backed up. <code>opts</code> are passed to <code>archive.history</code>.</p>\n<p>If <code>cb</code> is provided, stream will collect the list and callback with <code>(err, list)</code>.</p>\n<h4 id=\"backupserve\"><a href=\"#backupserve\" class=\"anchor\"></a><code>backup.serve()</code></h4><p>Serve data from a backup. This will allow users to download any data that is backed up.</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","archiver-server":"<h1 id=\"archiver-server\"><a href=\"#archiver-server\" class=\"anchor\"></a>Archiver-Server</h1><p>Serve Dat Archives stored in a <a href=\"https://github.com/mafintosh/hypercore-archiver\">hypercore-archiver</a>.</p>\n<p>Archives can be served over HTTP and the Dat Network (via <code>discovery-swarm</code>).</p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><h3 id=\"serve-on-dat-network\"><a href=\"#serve-on-dat-network\" class=\"anchor\"></a>Serve on Dat Network</h3><p>Serve archives in a hypercore-archiver with discovery-swarm.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> Archiver = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hypercore-archiver'</span>)\n<span class=\"hljs-keyword\">var</span> archiverServer = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'archiver-server'</span>)\n\n<span class=\"hljs-keyword\">var</span> archives = Archiver(<span class=\"hljs-string\">'archives'</span>, {<span class=\"hljs-attr\">swarm</span>: <span class=\"hljs-literal\">true</span>})\n<span class=\"hljs-keyword\">var</span> datServer = archiverServer(archives)\n\ndatServer.swarm.on(<span class=\"hljs-string\">'listening'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Listening for connections on the Dat Network'</span>)\n})\n\n<span class=\"hljs-comment\">// (Later) Any archives added will be available over discovery-swarm network</span>\narchives.add(key)\n</code></pre>\n<h3 id=\"serve-over-http\"><a href=\"#serve-over-http\" class=\"anchor\"></a>Serve Over HTTP</h3><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>)\n<span class=\"hljs-keyword\">var</span> Archiver = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hypercore-archiver'</span>)\n<span class=\"hljs-keyword\">var</span> archiverServer = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'archiver-server'</span>)\n\n<span class=\"hljs-keyword\">var</span> archiver = Archiver(<span class=\"hljs-string\">'archives'</span>)\n<span class=\"hljs-keyword\">var</span> datServer = archiverServer(archiver, {<span class=\"hljs-attr\">http</span>: <span class=\"hljs-literal\">true</span>})\n\n<span class=\"hljs-comment\">// Bring your own HTTP server and handle requests</span>\n<span class=\"hljs-keyword\">var</span> server = http.createServer()\nserver.on(<span class=\"hljs-string\">'request'</span>, datServer.httpRequest)\nserver.listen(argv.httpPort, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Server is listening on port '</span> + port)\n})\n\n<span class=\"hljs-comment\">// (Later) Any archives added will be available over HTTP</span>\narchives.add(key)\n</code></pre>\n<h3 id=\"cli\"><a href=\"#cli\" class=\"anchor\"></a>CLI</h3><p>Archiver-server provides a basic CLI utility. There is currently no interface to add/remove archives to the hypercore-archiver, so it may be difficult to add use the CLI except for testing on preexisting archiver directories.</p>\n<p>Run <code>npm start</code> to run the CLI in debug mode.</p>\n<p>Options:</p>\n<ul>\n<li><code>--httpPort 8080</code>: Port for HTTP server</li>\n<li><code>--datPort 3282</code>: Port for Dat Network</li>\n<li><code>--archiveDir dats</code>: Directory for <code>hypercore-archiver</code> storage</li>\n<li><code>--swarm</code> (boolean): Serve archives on the Dat Network</li>\n<li><code>--http</code> (boolean): Serve archives over HTTP</li>\n</ul>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"var-server-archiverserverarchiver-opts\"><a href=\"#var-server-archiverserverarchiver-opts\" class=\"anchor\"></a>var server = archiverServer(archiver, [opts])</h3><p>Create a server for a <code>hypercore-archiver</code>. Use <code>http</code> and <code>swarm</code> to specify which server types to use.</p>\n<p>Options include:</p>\n<pre><code class=\"lang-js\">opts = {\n  <span class=\"hljs-attr\">http</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// Return onrequest function to serve over HTTP</span>\n  swarm: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// Serve over Dat Network</span>\n  utp: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// Passed to Discovery-Swarm</span>\n  tcp: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// Passed to Discovery-Swarm</span>\n  datPort: <span class=\"hljs-number\">3282</span> <span class=\"hljs-comment\">// Passed to Discovery-Swarm</span>\n}\n</code></pre>\n<h4 id=\"serverswarm\"><a href=\"#serverswarm\" class=\"anchor\"></a><code>server.swarm</code></h4><p><code>discovery-swarm</code> for your archives. Automatically connects.</p>\n<h4 id=\"serverhttprequest\"><a href=\"#serverhttprequest\" class=\"anchor\"></a><code>server.httpRequest</code></h4><p>Bring your own HTTP server. Use <code>server.httpRequest</code> for your http server&#39;s request function.</p>\n<p>HTTP requires hypercore-archiver <code>^2.3.0</code>.</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","archiver-api":"<h1 id=\"archiver-api-travishttpstravis-ciorgjoehandarchiver-apisvghttpstravis-ciorgjoehandarchiver-api-npmhttpsimgshieldsionpmvarchiver-apisvghttpsnpmjsorgpackagearchiver-api\"><a href=\"#archiver-api-travishttpstravis-ciorgjoehandarchiver-apisvghttpstravis-ciorgjoehandarchiver-api-npmhttpsimgshieldsionpmvarchiver-apisvghttpsnpmjsorgpackagearchiver-api\" class=\"anchor\"></a>Archiver-API <a href=\"https://travis-ci.org/joehand/archiver-api\"><img src=\"https://travis-ci.org/joehand/archiver-api.svg\" alt=\"Travis\"></a> <a href=\"https://npmjs.org/package/archiver-api\"><img src=\"https://img.shields.io/npm/v/archiver-api.svg\" alt=\"npm\"></a></h1><p>A REST API for <a href=\"https://github.com/mafintosh/hypercore-archiver\">hypercore-archiver</a>.</p>\n<h4 id=\"features\"><a href=\"#features\" class=\"anchor\"></a>Features</h4><ul>\n<li>Add &amp; remove keys to a hypercore-archiver</li>\n<li>Get status of the hypercore-archiver</li>\n</ul>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>See <code>server.js</code> for a complete usage example.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>)\n<span class=\"hljs-keyword\">var</span> appa = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'appa'</span>)\n<span class=\"hljs-keyword\">var</span> Archiver = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hypercore-archiver'</span>)\n<span class=\"hljs-keyword\">var</span> archiverAPI = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'archiver-api'</span>)\n<span class=\"hljs-keyword\">var</span> DatServer = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'archiver-server'</span>)\n\n<span class=\"hljs-keyword\">var</span> archives = Archiver(dir)\n<span class=\"hljs-keyword\">var</span> datServer = DatServer(archives, {<span class=\"hljs-attr\">swarm</span>: <span class=\"hljs-literal\">true</span>})\n<span class=\"hljs-keyword\">var</span> api = Api(archives)\n<span class=\"hljs-keyword\">var</span> app = appa()\n\n<span class=\"hljs-keyword\">var</span> apiServer = http.createServer(app)\n\napp.on(<span class=\"hljs-string\">'/add'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res, ctx</span>) </span>{\n  api.add(ctx.body, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, code, data</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> app.error(res, code, err.message)\n    app.send(code, data).pipe(res)\n  })\n})\n\n<span class=\"hljs-comment\">// Register Other API methods</span>\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"var-api-archiverapiarchiver-opts\"><a href=\"#var-api-archiverapiarchiver-opts\" class=\"anchor\"></a><code>var api = ArchiverApi(archiver, [opts])</code></h3><p><code>archiver</code> is a <code>hypercore-archiver</code> instance.</p>\n<h3 id=\"apiaddopts-cb\"><a href=\"#apiaddopts-cb\" class=\"anchor\"></a><code>api.add(opts, cb)</code></h3><p>Add an archive to the archiver. <code>opts</code> should be an object with:</p>\n<ul>\n<li><code>opts.key</code> (String) - archive key</li>\n</ul>\n<p><strong>Note: To add an archive, you need to connect to it on the Dat Network. <a href=\"https://github.com/joehand/archiver-server\">archiver-server</a> does this for you but you can also use discovery-swarm or discovery-channel directly</strong></p>\n<h3 id=\"apiremoveopts-cb\"><a href=\"#apiremoveopts-cb\" class=\"anchor\"></a><code>api.remove(opts, cb)</code></h3><p>Remove an archive from the archiver.</p>\n<p><code>opts</code> should be an object with:</p>\n<ul>\n<li><code>opts.key</code> (String) - archive key</li>\n</ul>\n<h3 id=\"apistatuscb\"><a href=\"#apistatuscb\" class=\"anchor\"></a><code>api.status(cb)</code></h3><p>Get the archiver status. Currently returns <code>{archives: count}</code> where <code>count</code> is number of archives in the archiver.</p>\n<h3 id=\"apiarchiveprogresskey-cb\"><a href=\"#apiarchiveprogresskey-cb\" class=\"anchor\"></a><code>api.archiveProgress(key, cb)</code></h3><p>Get progress for an archive.</p>\n<p>API will respond with a archive progress object: <code>{progress: 0.5}</code>, where progress is the percentage of blocks done.</p>\n<h3 id=\"api-status\"><a href=\"#api-status\" class=\"anchor\"></a>API Status</h3><h4 id=\"implemented\"><a href=\"#implemented\" class=\"anchor\"></a>Implemented</h4><ul>\n<li>Add</li>\n<li>Remove via POST</li>\n<li>General Status</li>\n<li>Archive Progress</li>\n</ul>\n<h4 id=\"todo\"><a href=\"#todo\" class=\"anchor\"></a>TODO:</h4><ul>\n<li>Remove via DELETE</li>\n<li>Archive status (peers, history, etc.)</li>\n<li>Associate archive with user/email </li>\n</ul>\n<h2 id=\"example-with-archiver-server\"><a href=\"#example-with-archiver-server\" class=\"anchor\"></a>Example with Archiver-Server</h2><p><a href=\"https://github.com/joehand/archiver-server\">Archiver-server</a> makes it easy to connect to the Dat network and serve archives over HTTP.</p>\n<h3 id=\"run-the-servers\"><a href=\"#run-the-servers\" class=\"anchor\"></a>Run the Servers:</h3><pre><code><span class=\"hljs-built_in\">npm</span> start\n</code></pre><p>This will start three servers:</p>\n<ol>\n<li>HTTP Archiver API: Send POST requests to <code>/add</code> to archive Dats.</li>\n<li>Dat Network: Connect to peers over the Dat network</li>\n<li>HTTP Archives: Access archives over HTTP (via hyperdrive-http)</li>\n</ol>\n<h3 id=\"send-a-post-request-to-the-api\"><a href=\"#send-a-post-request-to-the-api\" class=\"anchor\"></a>Send a POST request to the API</h3><p>Send the request with a Dat key, <code>YOUR_DAT_KEY_HERE</code>, that you are hosting.</p>\n<pre><code>curl -X POST -H <span class=\"hljs-string\">\"Content-Type: application/json\"</span> -d <span class=\"hljs-string\">'{\"</span>key<span class=\"hljs-string\">\":\"</span>YOUR_DAT_KEY_HERE<span class=\"hljs-string\">\"}'</span> http:<span class=\"hljs-comment\">//127.0.0.1:3000/add</span>\n</code></pre><p>Visit your archive in your http-based browser: <a href=\"http://127.0.0.1:8000/YOUR_DAT_KEY_HERE/\">http://127.0.0.1:8000/YOUR_DAT_KEY_HERE/</a>. </p>\n<p>Or via Dat on Beaker: dat://YOUR_DAT_KEY_HERE</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","hyperdrive-ln":"<h1 id=\"hyperdrive-ln\"><a href=\"#hyperdrive-ln\" class=\"anchor\"></a>hyperdrive-ln</h1><p><a href=\"https://www.npmjs.com/package/hyperfeed\"><img src=\"https://img.shields.io/npm/v/hyperdrive-ln.svg\" alt=\"NPM Version\"></a> <a href=\"http://standardjs.com/\"><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg\" alt=\"JavaScript Style Guide\"></a></p>\n<p>create symbolic link between <a href=\"https://github.com/mafintosh/hyperdrive\">hyperdrives</a></p>\n<p><code>npm i hyperdrive-ln</code></p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> ln = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive-ln'</span>)\n\n<span class=\"hljs-keyword\">var</span> drive = hyperdrive(memdb())\n<span class=\"hljs-keyword\">var</span> archive = drive.createArchive()\n\nln.link(archive, <span class=\"hljs-string\">'linkfile'</span>, &lt;ARCHIVE KEY&gt;, [meta], err =&gt; {}) <span class=\"hljs-comment\">// create symlink to another archive</span>\nln.readlink(archive, <span class=\"hljs-string\">'linkfile'</span>, (err, link) =&gt; {}) <span class=\"hljs-comment\">// get link data</span>\n\n<span class=\"hljs-comment\">// assume ln.link(archive, 'path/to/file', &lt;ARCHIVE KEY&gt;)</span>\nln.resolve(archive, <span class=\"hljs-string\">'path/to/file/within/linked/archive'</span>, (err, link, restOfThePath)) <span class=\"hljs-comment\">// returns (err, {link: &lt;ARCHIVE_KEY&gt;, meta: {...}}, 'within/linked/archive')</span>\n\n<span class=\"hljs-comment\">// resolve through archives</span>\nln.deepResolve(drive, swarmer, archive, path, (err, result) =&gt; {})\n\nln.encode(key, [meta]) <span class=\"hljs-comment\">// encode a key for linkfile</span>\nln.decode(data) <span class=\"hljs-comment\">// decode a linkfile content to key</span>\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h4 id=\"lnlinkarchive-path-archivekey-meta-cb\"><a href=\"#lnlinkarchive-path-archivekey-meta-cb\" class=\"anchor\"></a><code>ln.link(archive, path, archiveKey, [meta], cb)</code></h4><p>Create a symlink at <code>path</code> point to <code>archiveKey</code>.</p>\n<p>You can pass a <code>meta</code> object to store it in the symlink.</p>\n<h4 id=\"lnreadlinkarchive-path-cb\"><a href=\"#lnreadlinkarchive-path-cb\" class=\"anchor\"></a><code>ln.readlink(archive, path, cb)</code></h4><p>Get the link data stored inside a symlink.</p>\n<h4 id=\"lnresolvearchive-path-cb\"><a href=\"#lnresolvearchive-path-cb\" class=\"anchor\"></a><code>ln.resolve(archive, path, cb)</code></h4><p>Resolve a path. Returns an archive and a path within that archive with <code>cb(err, linkedArchiveKey, pathWithinLinkedArchive)</code></p>\n<ul>\n<li>If there&#39;s a symlink encountered in the path. <code>cb(err, link, pathWithinLinkedArchive)</code> will be invoked.</li>\n<li>If there&#39;s no symlink in the path, <code>cb(err, {}, path)</code> will be called.</li>\n</ul>\n<p>for example:</p>\n<pre><code class=\"lang-js\">ln.link(archive, <span class=\"hljs-string\">'foo/bar'</span>, <span class=\"hljs-string\">'&lt;LINK_KEY&gt;'</span>, (err) =&gt; {\n    ln.resolve(archive, <span class=\"hljs-string\">'foo/bar/baz'</span>, (err, link, path) =&gt; {\n      <span class=\"hljs-comment\">// link === {link: '&lt;LINK_KEY&gt;', meta: {...}}</span>\n      <span class=\"hljs-comment\">// path === 'baz'</span>\n    })\n})\n</code></pre>\n<h4 id=\"lndeepresolvedrive-swarmer-archive-path-cb\"><a href=\"#lndeepresolvedrive-swarmer-archive-path-cb\" class=\"anchor\"></a><code>ln.deepResolve(drive, swarmer, archive, path, cb)</code></h4><p>Recursively resolve a path through archives. Create swarm connection when necessary.</p>\n<p><code>swarmer</code> is anything let you join swarm . For example: <a href=\"https://github.com/karissa/hyperdiscovery\">hyperdiscovery</a>.</p>\n<p>callback <code>cb(err, result)</code> where <code>result</code> is a recursive structure:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">archive</span>: <span class=\"hljs-comment\">// traversed archive,</span>\n  path: <span class=\"hljs-comment\">// consumed path,</span>\n  swarm: <span class=\"hljs-comment\">// swarm instance,</span>\n  next: result <span class=\"hljs-comment\">// next component if there's one</span>\n}\n</code></pre>\n<p>For example: Assume we have an <code>archive1</code> which <code>/foo/bar</code> linked to <code>archive2</code>.</p>\n<pre><code class=\"lang-js\">ln.deepResolve(drive, swarmer, archive1, <span class=\"hljs-string\">'/foo/bar/baz/baz.txt'</span>, cb)\n</code></pre>\n<p>will get the result:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">archive</span>: archive1,\n  <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/foo/bar'</span>,\n  <span class=\"hljs-attr\">swarm</span>: <span class=\"hljs-comment\">// a swarm instance,</span>\n  next: {\n    <span class=\"hljs-attr\">archive</span>: archive2,\n    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'baz/baz.txt'</span>,\n    <span class=\"hljs-attr\">swarm</span>: <span class=\"hljs-comment\">// another swarm instance</span>\n  }\n}\n</code></pre>\n<p>use <code>deepClose(result)</code> to close all swarm instance in the result.</p>\n<h4 id=\"lndeepcloseresult\"><a href=\"#lndeepcloseresult\" class=\"anchor\"></a><code>ln.deepClose(result)</code></h4><p>Close all swarm instance in the result.</p>\n<h4 id=\"body-lnencodekey-meta\"><a href=\"#body-lnencodekey-meta\" class=\"anchor\"></a><code>body = ln.encode(key, [meta])</code></h4><p>Encode a key to symlink file body.</p>\n<h4 id=\"lndecodebody\"><a href=\"#lndecodebody\" class=\"anchor\"></a><code>ln.decode(body)</code></h4><p>Decode a symlink file body to linked archive key.</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>The MIT License</p>\n","hyperdrive-multiwriter":"<h1 id=\"hyperdrive-multiwriter\"><a href=\"#hyperdrive-multiwriter\" class=\"anchor\"></a>hyperdrive-multiwriter</h1><p>present a bundle of hyperdrive archives together as a multi-writer view</p>\n<p>This module create a writable archive on each database and creates readable\narchives for every other remote peer. The data from these archives are presented\nas a single view, even though there are many archives behind the scenes.</p>\n<h1 id=\"example\"><a href=\"#example\" class=\"anchor\"></a>example</h1><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> multidrive = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive-multiwriter'</span>)\n<span class=\"hljs-keyword\">var</span> hyperdrive = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive'</span>)\n<span class=\"hljs-keyword\">var</span> level = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'level'</span>)\n<span class=\"hljs-keyword\">var</span> sub = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'subleveldown'</span>)\n\n<span class=\"hljs-keyword\">var</span> db = level(process.argv[<span class=\"hljs-number\">2</span>])\n<span class=\"hljs-keyword\">var</span> mdrive = multidrive({\n  <span class=\"hljs-attr\">db</span>: db,\n  <span class=\"hljs-attr\">drive</span>: hyperdrive(sub(db,<span class=\"hljs-string\">'d'</span>))\n})\n\n<span class=\"hljs-keyword\">if</span> (process.argv[<span class=\"hljs-number\">3</span>] === <span class=\"hljs-string\">'list'</span>) {\n  mdrive.list(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, entries</span>) </span>{\n    entries.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">entry</span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(entry))\n    })\n  })\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (process.argv[<span class=\"hljs-number\">3</span>] === <span class=\"hljs-string\">'read'</span>) {\n  <span class=\"hljs-keyword\">var</span> entry = <span class=\"hljs-built_in\">JSON</span>.parse(process.argv[<span class=\"hljs-number\">4</span>])\n  mdrive.createFileReadStream(entry).pipe(process.stdout)\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (process.argv[<span class=\"hljs-number\">3</span>] === <span class=\"hljs-string\">'write'</span>) {\n  process.stdin.pipe(mdrive.createFileWriteStream(process.argv[<span class=\"hljs-number\">4</span>]))\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (process.argv[<span class=\"hljs-number\">3</span>] === <span class=\"hljs-string\">'sync'</span>) {\n  <span class=\"hljs-keyword\">var</span> r = mdrive.replicate()\n  process.stdin.pipe(r).pipe(process.stdout)\n}\n</code></pre>\n<p>create some data:</p>\n<pre><code class=\"lang-sh\">$ <span class=\"hljs-built_in\">echo</span> HI | node drive.js /tmp/a write hello.txt\n$ <span class=\"hljs-built_in\">echo</span> HOWDY | node drive.js /tmp/b write hello.txt\n$ <span class=\"hljs-built_in\">echo</span> WHATEVER | node drive.js /tmp/c write cool.txt\n</code></pre>\n<p>gossip replication (<code>npm install -g dupsh</code>):</p>\n<pre><code class=\"lang-sh\">$ dupsh <span class=\"hljs-string\">'node drive.js /tmp/a sync'</span> <span class=\"hljs-string\">'node drive.js /tmp/b sync'</span>\n^C\n$ dupsh <span class=\"hljs-string\">'node drive.js /tmp/b sync'</span> <span class=\"hljs-string\">'node drive.js /tmp/c sync'</span>\n^C\n$ dupsh <span class=\"hljs-string\">'node drive.js /tmp/a sync'</span> <span class=\"hljs-string\">'node drive.js /tmp/b sync'</span>\n^C\n</code></pre>\n<p>now each node has all the data:</p>\n<pre><code class=\"lang-sh\">$ node drive.js /tmp/a list\n{<span class=\"hljs-string\">\"name\"</span>:<span class=\"hljs-string\">\"hello.txt\"</span>,<span class=\"hljs-string\">\"linkname\"</span>:<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-string\">\"length\"</span>:3,<span class=\"hljs-string\">\"blocks\"</span>:1,<span class=\"hljs-string\">\"mode\"</span>:0,<span class=\"hljs-string\">\"uid\"</span>:0,<span class=\"hljs-string\">\"gid\"</span>:0,<span class=\"hljs-string\">\"mtime\"</span>:0,<span class=\"hljs-string\">\"ctime\"</span>:0,<span class=\"hljs-string\">\"content\"</span>:{<span class=\"hljs-string\">\"blockOffset\"</span>:0,<span class=\"hljs-string\">\"bytesOffset\"</span>:0},<span class=\"hljs-string\">\"type\"</span>:<span class=\"hljs-string\">\"file\"</span>,<span class=\"hljs-string\">\"link\"</span>:<span class=\"hljs-string\">\"a9310f51ee8e9e4bc805866b1ae0bf3d94be055843b1f4f3d55ea275946f1dcb\"</span>}\n{<span class=\"hljs-string\">\"name\"</span>:<span class=\"hljs-string\">\"cool.txt\"</span>,<span class=\"hljs-string\">\"linkname\"</span>:<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-string\">\"length\"</span>:9,<span class=\"hljs-string\">\"blocks\"</span>:1,<span class=\"hljs-string\">\"mode\"</span>:0,<span class=\"hljs-string\">\"uid\"</span>:0,<span class=\"hljs-string\">\"gid\"</span>:0,<span class=\"hljs-string\">\"mtime\"</span>:0,<span class=\"hljs-string\">\"ctime\"</span>:0,<span class=\"hljs-string\">\"content\"</span>:{<span class=\"hljs-string\">\"blockOffset\"</span>:0,<span class=\"hljs-string\">\"bytesOffset\"</span>:0},<span class=\"hljs-string\">\"type\"</span>:<span class=\"hljs-string\">\"file\"</span>,<span class=\"hljs-string\">\"link\"</span>:<span class=\"hljs-string\">\"c34e0d868ae6371dff499733befe5213f9cf1573a4bb14eb4eb105f2a7408860\"</span>}\n{<span class=\"hljs-string\">\"name\"</span>:<span class=\"hljs-string\">\"hello.txt\"</span>,<span class=\"hljs-string\">\"linkname\"</span>:<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-string\">\"length\"</span>:6,<span class=\"hljs-string\">\"blocks\"</span>:1,<span class=\"hljs-string\">\"mode\"</span>:0,<span class=\"hljs-string\">\"uid\"</span>:0,<span class=\"hljs-string\">\"gid\"</span>:0,<span class=\"hljs-string\">\"mtime\"</span>:0,<span class=\"hljs-string\">\"ctime\"</span>:0,<span class=\"hljs-string\">\"content\"</span>:{<span class=\"hljs-string\">\"blockOffset\"</span>:0,<span class=\"hljs-string\">\"bytesOffset\"</span>:0},<span class=\"hljs-string\">\"type\"</span>:<span class=\"hljs-string\">\"file\"</span>,<span class=\"hljs-string\">\"link\"</span>:<span class=\"hljs-string\">\"d4934913d24da13f9ede9e56ccf71f769db29252b95cab59ea08e7cd6ea845ce\"</span>}\n$ node drive.js /tmp/a <span class=\"hljs-built_in\">read</span> <span class=\"hljs-string\">'{\"name\":\"cool.txt\",\"link\":\"c34e0d868ae6371dff499733befe5213f9cf1573a4bb14eb4eb105f2a7408860\"}'</span>\nWHATEVER\n</code></pre>\n<h1 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>api</h1><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> multidrive = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive-multiwriter'</span>)\n</code></pre>\n<h2 id=\"var-mdrive-multidriveopts\"><a href=\"#var-mdrive-multidriveopts\" class=\"anchor\"></a>var mdrive = multidrive(opts)</h2><p>Create a multi-writer hyperdrive instance <code>mdrive</code> from <code>opts</code>:</p>\n<ul>\n<li><code>opts.db</code> - levelup database</li>\n<li><code>opts.drive</code> - hyperdrive instance</li>\n</ul>\n<p><code>mdrive</code> has most of the same methods as a hyperdrive archive instance.</p>\n<p>The rest of the <code>opts</code> are passed through to <code>drive.createArchive(opts)</code>.</p>\n<h2 id=\"var-r-mdrivelistopts-cb\"><a href=\"#var-r-mdrivelistopts-cb\" class=\"anchor\"></a>var r = mdrive.list(opts, cb)</h2><p>Return a readable stream <code>r</code> with entries from all the archives or collect all\nthe entries as <code>cb(err, entries)</code>.</p>\n<p>Each entry has an <code>entry.link</code> hex string added to it to associate it with the\nproper archive..</p>\n<h2 id=\"var-w-mdrivecreatefilewritestreamentry\"><a href=\"#var-w-mdrivecreatefilewritestreamentry\" class=\"anchor\"></a>var w = mdrive.createFileWriteStream(entry)</h2><p>Store data in the archive by writing to a writable stream <code>w</code>.</p>\n<p><code>entry</code> should be an object or a string interpreted as <code>entry.name</code>.</p>\n<h2 id=\"var-r-mdrivecreatefilereadstreamentry\"><a href=\"#var-r-mdrivecreatefilereadstreamentry\" class=\"anchor\"></a>var r = mdrive.createFileReadStream(entry)</h2><p>Create a readable stream for the contents of <code>entry</code>.</p>\n<p><code>entry</code> should have an <code>entry.link</code> and <code>entry.name</code>.</p>\n<h2 id=\"mdriveappendentry-cb\"><a href=\"#mdriveappendentry-cb\" class=\"anchor\"></a>mdrive.append(entry, cb)</h2><p>Append an entry into the writable archive.</p>\n<h2 id=\"mdrivegetentry-opts-cb\"><a href=\"#mdrivegetentry-opts-cb\" class=\"anchor\"></a>mdrive.get(entry, opts, cb)</h2><p>Read an entry from the archive as <code>cb(err, entry)</code>.</p>\n<h2 id=\"mdrivedownloadentry-opts-cb\"><a href=\"#mdrivedownloadentry-opts-cb\" class=\"anchor\"></a>mdrive.download(entry, opts, cb)</h2><p>Fully download a file/entry from the archive.</p>\n<h2 id=\"mdriveclosecb\"><a href=\"#mdriveclosecb\" class=\"anchor\"></a>mdrive.close(cb)</h2><p>Close all resources.</p>\n<h2 id=\"var-cursor-mdrivecreatebytecursorentry\"><a href=\"#var-cursor-mdrivecreatebytecursorentry\" class=\"anchor\"></a>var cursor = mdrive.createByteCursor(entry)</h2><p>Create a <code>cursor</code> that can seek and traverse <code>entry</code>.</p>\n<h2 id=\"var-stream-mdrivereplicate\"><a href=\"#var-stream-mdrivereplicate\" class=\"anchor\"></a>var stream = mdrive.replicate()</h2><p>Return a duplex <code>stream</code> for replication that multiplexes the replication\nstreams of all the underlying archives along with a coordinator channel to\ncreate the required readable archives on both sides of the connection.</p>\n<h2 id=\"mdriveunreplicatestream\"><a href=\"#mdriveunreplicatestream\" class=\"anchor\"></a>mdrive.unreplicate(stream)</h2><p>Stop replicating a <code>stream</code>. If <code>stream</code> isn&#39;t given, stops all replication\nstream on <code>mdrive</code>.</p>\n<h1 id=\"install\"><a href=\"#install\" class=\"anchor\"></a>install</h1><pre><code>npm <span class=\"hljs-keyword\">install</span> hyperdrive-multiwriter\n</code></pre><h1 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>license</h1><p>BSD</p>\n","hyperdrive-named-archives":"<h1 id=\"hyperdrive-named-archives\"><a href=\"#hyperdrive-named-archives\" class=\"anchor\"></a>hyperdrive-named-archives</h1><p>create hyperdrive archives that store and load link keys from names</p>\n<h1 id=\"example\"><a href=\"#example\" class=\"anchor\"></a>example</h1><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> namedArchives = requre(<span class=\"hljs-string\">'hyperdrive-named-archives'</span>)\n<span class=\"hljs-keyword\">var</span> hyperdrive = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive'</span>)\n<span class=\"hljs-keyword\">var</span> level = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'level'</span>)\n<span class=\"hljs-keyword\">var</span> sub = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'subleveldown'</span>)\n\n<span class=\"hljs-keyword\">var</span> db = level(<span class=\"hljs-string\">'/tmp/drive.db'</span>)\n\n<span class=\"hljs-keyword\">var</span> named = namedArchives({\n  <span class=\"hljs-attr\">drive</span>: hyperdrive(sub(db, <span class=\"hljs-string\">'drive'</span>)),\n  <span class=\"hljs-attr\">db</span>: sub(db, <span class=\"hljs-string\">'archives'</span>)\n})\n\n<span class=\"hljs-keyword\">var</span> archive = named.createArchive(<span class=\"hljs-string\">'default'</span>)\n<span class=\"hljs-keyword\">if</span> (process.argv[<span class=\"hljs-number\">2</span>] === <span class=\"hljs-string\">'write'</span>) {\n  <span class=\"hljs-keyword\">var</span> file = process.argv[<span class=\"hljs-number\">3</span>]\n  <span class=\"hljs-keyword\">var</span> stream = archive.createFileWriteStream(file)\n  process.stdin.pipe(stream)\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (process.argv[<span class=\"hljs-number\">2</span>] === <span class=\"hljs-string\">'read'</span>) {\n  <span class=\"hljs-keyword\">var</span> file = process.argv[<span class=\"hljs-number\">3</span>]\n  <span class=\"hljs-keyword\">var</span> stream = archive.createFileReadStream(file)\n  stream.pipe(process.stdout)\n}\n</code></pre>\n<h1 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>api</h1><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> namedArchives = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive-named-archives'</span>)\n</code></pre>\n<h2 id=\"var-named-namedarchivesopts\"><a href=\"#var-named-namedarchivesopts\" class=\"anchor\"></a>var named = namedArchives(opts)</h2><p>Create a new named archive instance <code>named</code> from:</p>\n<ul>\n<li><code>opts.drive</code> - a hyperdrive instance</li>\n<li><code>opts.db</code> - a leveldb instance to store archive links</li>\n</ul>\n<h2 id=\"var-archive-namedcreatearchivename-opts\"><a href=\"#var-archive-namedcreatearchivename-opts\" class=\"anchor\"></a>var archive = named.createArchive(name, opts)</h2><p>Create an archive from a string <code>name</code>. The first time <code>name</code> is used, the\narchive link will be saved so that subsequent calls to <code>createArchive()</code> under\nthe same name will use the same stored archive link.</p>\n<p><code>opts</code> are passed to the underlying <code>drive.createArchive(opts)</code> method.</p>\n<h2 id=\"namedgetlinkname-cb\"><a href=\"#namedgetlinkname-cb\" class=\"anchor\"></a>named.getLink(name, cb)</h2><p>Get the archive link for <code>name</code> as <code>cb(err, link)</code>. <code>name</code> is a string and\n<code>link</code> is a buffer from the underlying <code>archive.key</code>.</p>\n<h2 id=\"var-stream-namedlistopts-cb\"><a href=\"#var-stream-namedlistopts-cb\" class=\"anchor\"></a>var stream = named.list(opts, cb)</h2><p>Return a readable object <code>stream</code> with stored <code>name</code> and <code>link</code> properties for\neach stored link.</p>\n<h1 id=\"install\"><a href=\"#install\" class=\"anchor\"></a>install</h1><pre><code>npm <span class=\"hljs-keyword\">install</span> hyperdrive-named-archives\n</code></pre><h1 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>license</h1><p>BSD</p>\n","git-dat":"<h1 id=\"git-dat\"><a href=\"#git-dat\" class=\"anchor\"></a>git-dat</h1><p>git plugin to use dat:// remotes</p>\n<p>To learn more about how remote helper programs work, read\n<code>man gitremote-helpers</code>.</p>\n<p>Work in progress, not completely working yet.</p>\n","jawn":"<h1 id=\"dat-jawn-git-for-tabular-data\"><a href=\"#dat-jawn-git-for-tabular-data\" class=\"anchor\"></a>dat jawn: &#39;Git for Tabular Data&#39;</h1><p><a href=\"https://travis-ci.org/CfABrigadePhiladelphia/jawn\"><img src=\"https://travis-ci.org/CfABrigadePhiladelphia/jawn.svg?branch=master\" alt=\"Build Status\"></a></p>\n<p><a href=\"https://nodei.co/npm/jawn/\"><img src=\"https://nodei.co/npm/jawn.png\" alt=\"NPM\"></a></p>\n<p>Jawn is a node.js module that allows <em>distributed version control of Tabular Data</em>. It&#39;s connected to the <a href=\"https://github.com/maxogden/dat\">dat</a> project. It allows you to import tabular data (rows and columns like CSV or TSV) and track how those data change over time. <em>Do you have non-tabular data? read this:</em> <a href=\"https://github.com/CfABrigadePhiladelphia/jawn/wiki/What-about-Non-Tabular-Data%3F\">What about Non Tabular Data?</a>  </p>\n<p>The key features for jawn are to:</p>\n<ul>\n<li><strong>manage and track change history</strong> in tabular data</li>\n<li><strong>create historical checkpoints</strong> with metadata (e.g., message, timestamp, author)</li>\n</ul>\n<p>Jawn relies on <a href=\"https://github.com/mafintosh/hypercore\">hypercore</a> to handle the core functions around creating merkle chains, which allows us to </p>\n<ul>\n<li><strong>supply access points to data</strong> across the network with a peer-to-peer model</li>\n<li><strong>sync incrementally</strong> between machines</li>\n</ul>\n<p>This is where jawn connects with the current work of the dat team, who created hypercore and are using it to do the same things with directories of files. For more background info, read our <a href=\"https://github.com/CfABrigadePhiladelphia/jawn/wiki/Technical-Background-and-Reference-Code-Bases\">Technical Background and Reference Code Bases</a> wiki page.</p>\n<h2 id=\"project-team\"><a href=\"#project-team\" class=\"anchor\"></a>Project Team</h2><p>jawn is maintained by a <a href=\"https://codeforphilly.org\">Code for Philly</a> project that aims to be a model for mentorship and collaborative learning. For full information about the project go to the <a href=\"https://codeforphilly.org/projects/dat_tables\">jawn project page</a>  </p>\n<p>We welcome contributions from anyone.</p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p><em>work in progress</em></p>\n<h2 id=\"contributing\"><a href=\"#contributing\" class=\"anchor\"></a>Contributing</h2><p><em>work in progress</em></p>\n<p>If you want to work on the jawn code, first clone the repository and cd into that directory, then install the node dependencies and run the tests with these commands: </p>\n<pre><code><span class=\"hljs-built_in\">npm</span> install\n<span class=\"hljs-built_in\">npm</span> test\n</code></pre>","dat-archiver":"<h1 id=\"dat-archiver\"><a href=\"#dat-archiver\" class=\"anchor\"></a>Dat Archiver</h1><p>Server for archiving files via Dat. Upload files with <a href=\"https://github.com/joehand/dat-push\">dat-push</a>. </p>\n<p>Runs a <a href=\"https://github.com/mafintosh/peer-network\">peer network</a> server and archives files using <a href=\"https://github.com/mafintosh/hypercore-archiver\">hypercore-archiver</a>.</p>\n<h2 id=\"installation\"><a href=\"#installation\" class=\"anchor\"></a>Installation</h2><pre><code>npm <span class=\"hljs-keyword\">install</span> -g dat-archiver\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p>On a server run:</p>\n<pre><code>dat-archiver my-<span class=\"hljs-keyword\">backup</span>-<span class=\"hljs-keyword\">server</span> <span class=\"hljs-comment\">--dir=archive_directory</span>\n</code></pre><p>Creates a dat-archiver server with name, with the server key <code>my-backup-server</code>. If key is not set, a 16 digit string will be generated. Dats files are saved to the current directory or <code>--dir</code> option.</p>\n<p>On your local computer with Dat files:</p>\n<pre><code>dat-push my-<span class=\"hljs-keyword\">backup</span>-<span class=\"hljs-keyword\">server</span> <span class=\"hljs-comment\">--dir=directory_to_backup</span>\n</code></pre><p>This will push the files to your server over peer to peer networks.</p>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"var-archiver-archiveropts\"><a href=\"#var-archiver-archiveropts\" class=\"anchor\"></a><code>var archiver = Archiver(opts)</code></h3><p>Create an archiver, options include:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attr\">dir</span>: <span class=\"hljs-string\">'dats'</span> <span class=\"hljs-comment\">// directory to store hypercore archives</span>\n}\n</code></pre>\n<h3 id=\"archiverjoinserverkey\"><a href=\"#archiverjoinserverkey\" class=\"anchor\"></a>archiver.join(serverKey)</h3><p>Create a new peer-network server with name, <code>serverKey</code>. <code>serverKey</code> can be any string. It will be used to tell where dat-push should connect to.</p>\n<h3 id=\"events\"><a href=\"#events\" class=\"anchor\"></a>Events</h3><h4 id=\"archiveronconnection-serverkey\"><a href=\"#archiveronconnection-serverkey\" class=\"anchor\"></a>archiver.on(&#39;connection&#39;, serverKey)</h4><p>New connection on <code>serverKey</code></p>\n<h4 id=\"archiveronkey-received-archivekey\"><a href=\"#archiveronkey-received-archivekey\" class=\"anchor\"></a>archiver.on(&#39;key received&#39;, archiveKey)</h4><p>Key received from <code>dat-push</code>. Emitted immediately before <code>getArchive(key)</code> is called.</p>\n<h4 id=\"archiveronreplication-started-archivekey\"><a href=\"#archiveronreplication-started-archivekey\" class=\"anchor\"></a>archiver.on(&#39;replication started&#39;, archiveKey)</h4><p>Archive replication starting for <code>archiveKey</code>.</p>\n<h4 id=\"archiveronreplication-ended-archivekey\"><a href=\"#archiveronreplication-ended-archivekey\" class=\"anchor\"></a>archiver.on(&#39;replication ended&#39;, archiveKey)</h4><p>Archive replication ended for <code>archiveKey</code>. <em>Note: this could be a successful replication, or the client may have disconnected.</em></p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>ISC</p>\n","hyperdrive-stats":"<h1 id=\"hyperdrive-stats\"><a href=\"#hyperdrive-stats\" class=\"anchor\"></a>hyperdrive-stats</h1><p>Live &amp; persistent stats module for hyperdrive.</p>\n<p><a href=\"http://travis-ci.org/juliangruber/hyperdrive-stats\"><img src=\"https://travis-ci.org/juliangruber/hyperdrive-stats.svg?branch=master\" alt=\"build status\"></a></p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> Stats = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive-stats'</span>)\n<span class=\"hljs-keyword\">var</span> stats = Stats({\n  <span class=\"hljs-attr\">archive</span>: archive,\n  <span class=\"hljs-attr\">db</span>: db\n})\n\nstats.on(<span class=\"hljs-string\">'update'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(stats.get())\n})\n</code></pre>\n<h2 id=\"stats\"><a href=\"#stats\" class=\"anchor\"></a>Stats</h2><ul>\n<li><code>&quot;bytesTotal&quot;</code></li>\n<li><code>&quot;bytesProgress&quot;</code></li>\n<li><code>&quot;blocksTotal&quot;</code></li>\n<li><code>&quot;filesTotal&quot;</code></li>\n</ul>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","hypercore-stats-server":"<h1 id=\"hypercore-stats-server\"><a href=\"#hypercore-stats-server\" class=\"anchor\"></a>hypercore-stats-server</h1><p>Server for sending hypercore/hyperdrive stats over server-side events.</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> hypercore-stats-<span class=\"hljs-keyword\">server</span>\n</code></pre><h3 id=\"example\"><a href=\"#example\" class=\"anchor\"></a>Example</h3><pre><code class=\"lang-`\">var swarm = require(&#39;hyperdrive-archive-swarm&#39;)\nvar hyperdrive = require(&#39;hyperdrive&#39;)\nvar http = require(&#39;http&#39;)\nvar memdb = require(&#39;memdb&#39;)\nvar stats = require(&#39;hypercore-stats-server&#39;)\n\n// create a server\nhttp.createServer(function (req, res) {\n\n  // set up a drive\n  var drive = hyperdrive(memdb())\n  var archive = drive.createArchive(&#39;2d8186c581cd9c1b4f45e42eb765cebcba983feb8a0525d7bffee1ce3b7a9471&#39;) // sintel.mp4\n  swarm(archive)\n\n  // stats for the given drive will be sent to /events\n  if (req.url === &#39;/events&#39;) stats(archive, res)\n  else res.end(&#39;hi. hit /events for stat events&#39;)\n}).listen(10000)\n</code></pre>\n<h3 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h3><h5 id=\"statsarchive-response\"><a href=\"#statsarchive-response\" class=\"anchor\"></a><code>stats(archive, response)</code></h5><p>Takes a hyperdrive archive and an <code>http</code> response object. Will return server side events to the response object that represent stats as they are downloaded through the swarm.</p>\n","hypercore-stats-ui":"<h1 id=\"hypercore-stats-ui\"><a href=\"#hypercore-stats-ui\" class=\"anchor\"></a>hypercore-stats-ui</h1><p>HTML based stats ui for <a href=\"https://github.com/mafintosh/hypercore\">hypercore</a>/<a href=\"https://github.com/mafintosh/hyperdrive\">hyperdrive</a></p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> hypercore-stats-ui\n</code></pre><h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>)\n<span class=\"hljs-keyword\">var</span> stats = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hypercore-stats-ui'</span>)\n<span class=\"hljs-keyword\">var</span> hypercore = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hypercore'</span>)\n<span class=\"hljs-keyword\">var</span> level = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'level'</span>)\n\n<span class=\"hljs-keyword\">var</span> core = hypercore(level(<span class=\"hljs-string\">'database'</span>))\n<span class=\"hljs-keyword\">var</span> feed = core.createFeed(<span class=\"hljs-string\">'4e397d94d0f5df0e2268b2b7b23948b6dddfca66f91c2d452f404202e6d0f626'</span>)\n\nhttp.createServer(stats(feed)).listen(<span class=\"hljs-number\">1000</span>)\n</code></pre>\n<p>And visit <a href=\"http://localhost:10000\">http://localhost:10000</a> in the browser.</p>\n<p><img src=\"https://mafintosh.github.io/assets/hypercore-stats.gif\" width=\"600\">\n<img src=\"https://mafintosh.github.io/assets/hypercore-stats-uploader.gif\" width=\"600\"></p>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h4 id=\"var-onrequest-statsfeed-or-archive\"><a href=\"#var-onrequest-statsfeed-or-archive\" class=\"anchor\"></a><code>var onrequest = stats(feed or archive)</code></h4><p>Create a new stats interface for a hypercore feed or hyperdrive archive.</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n","zip-to-hyperdrive":"<h1 id=\"zip-to-hyperdrive\"><a href=\"#zip-to-hyperdrive\" class=\"anchor\"></a>zip-to-hyperdrive</h1><p>Add files from a zip archive to a hyperdrive archive.</p>\n<p><a href=\"https://travis-ci.org/karissa/zip-to-hyperdrive\"><img src=\"https://api.travis-ci.org/karissa/zip-to-hyperdrive.svg\" alt=\"Travis\"></a></p>\n<pre><code><span class=\"hljs-built_in\">npm</span> install zip-<span class=\"hljs-keyword\">to</span>-hyperdrive\n</code></pre><h2 id=\"example\"><a href=\"#example\" class=\"anchor\"></a>Example</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> hyperzip = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'zip-to-hyperdrive'</span>)\n<span class=\"hljs-keyword\">var</span> hyperdrive = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive'</span>)\n<span class=\"hljs-keyword\">var</span> memdb = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'memdb'</span>)\n\n<span class=\"hljs-keyword\">var</span> drive = hyperdrive(memdb())\n<span class=\"hljs-keyword\">var</span> archive = drive.createArchive()\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">done</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'files added!'</span>)\n}\n\nhyperzip(<span class=\"hljs-string\">'/path/to/zipfile.zip'</span>, archive, done)\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h4 id=\"hyperzipzipfile-archive-cb\"><a href=\"#hyperzipzipfile-archive-cb\" class=\"anchor\"></a>hyperzip(zipfile, archive, [cb])</h4><p>Adds files to the given archive. The <code>cb</code>  will be called once all files have been read and their contents added to the hyperdrive archive.</p>\n<p><code>zipfile</code> can be a path to a file on the local filesystem, a <code>yauzl</code> zipfile object, or a <code>Buffer</code>.</p>\n","url-dat":"<h1 id=\"urls-to-dat\"><a href=\"#urls-to-dat\" class=\"anchor\"></a>Urls to Dat</h1><p>Put files from urls into a hyperdrive archive</p>\n<p>See other modules for more info:</p>\n<ul>\n<li><a href=\"https://github.com/joehand/tar-dat\">tar-dat</a>: streams tarball into dat</li>\n<li><a href=\"https://github.com/joehand/url-tar\">url-tar</a>: puts body from url into tar</li>\n</ul>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><p><code>urlDat(urls, archive, cb)</code></p>\n<pre><code class=\"lang-javascript\">\n<span class=\"hljs-keyword\">var</span> hyperdrive = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive'</span>)\n<span class=\"hljs-keyword\">var</span> swarm = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive-archive-swarm'</span>)\n<span class=\"hljs-keyword\">var</span> memdb = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'memdb'</span>)\n<span class=\"hljs-keyword\">var</span> urlDat = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'url-dat'</span>)\n\n<span class=\"hljs-keyword\">var</span> drive = hyperdrive(memdb())\n<span class=\"hljs-keyword\">var</span> archive = drive.createArchive()\n\n<span class=\"hljs-keyword\">var</span> urls = [<span class=\"hljs-string\">'http://google.com'</span>, <span class=\"hljs-string\">'http://npmjs.com'</span>]\n\nurlDat(urls, archive, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n  archive.finalize(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{ \n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'sharing key: '</span>, archive.key.toString(<span class=\"hljs-string\">'hex'</span>))\n    swarm(archive)\n  })\n})\n</code></pre>\n","tar-dat":"<h2 id=\"tar-to-dat\"><a href=\"#tar-to-dat\" class=\"anchor\"></a>Tar to Dat</h2><p>Stream a tarball into a hyperdrive archive.</p>\n<h3 id=\"install\"><a href=\"#install\" class=\"anchor\"></a>Install</h3><pre><code>npm <span class=\"hljs-keyword\">install</span> tar-dat\n</code></pre><h3 id=\"usage-packpipetardatarchive\"><a href=\"#usage-packpipetardatarchive\" class=\"anchor\"></a>Usage: <code>pack.pipe(tarDat(archive))</code></h3><p>See <code>example.js</code> for full usage.</p>\n","hyperdrive-duplicate":"<h1 id=\"hyperdrive-duplicate\"><a href=\"#hyperdrive-duplicate\" class=\"anchor\"></a>hyperdrive-duplicate</h1><p><a href=\"https://travis-ci.org/joehand/hyperdrive-duplicate\"><img src=\"https://img.shields.io/travis/joehand/hyperdrive-duplicate.svg?style=flat-square\" alt=\"Travis\"></a> <a href=\"https://npmjs.org/package/hyperdrive-duplicate\"><img src=\"https://img.shields.io/npm/v/hyperdrive-duplicate.svg?style=flat-square\" alt=\"npm\"></a></p>\n<p>Check if a file on the filesystem is the same as an entry in hyperdrive by comparing <code>stat</code> objects and file contents.</p>\n<ul>\n<li>Compare <code>archive.stat</code> and <code>fs.stat</code> first, then</li>\n<li>Compare <code>archive.createReadStream</code> and <code>fs.createReadStream</code> (will fail as soon as stream differs).</li>\n</ul>\n<p><strong>Warning! Can be decrease performance to check duplicates of many large files.</strong></p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"anchor\"></a>Usage</h2><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> isDuplicate = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hyperdrive-duplicate'</span>)\n\n<span class=\"hljs-keyword\">var</span> archive = hyperdrive(ram)\n\narchive.writeFile(<span class=\"hljs-string\">'example.js'</span>, fs.readFileSync(<span class=\"hljs-string\">'example.js'</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n  <span class=\"hljs-comment\">// example.js is now in the archive</span>\n  <span class=\"hljs-comment\">// we can see if the fs file is duplicate</span>\n  isDuplicate(archive, <span class=\"hljs-string\">'example.js'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, duplicate</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n    <span class=\"hljs-keyword\">if</span> (duplicate) <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'example.js is duplicate!'</span>)\n  })\n\n  isDuplicate(archive, <span class=\"hljs-string\">'index.js'</span>, <span class=\"hljs-string\">'example.js'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, duplicate</span>) </span>{\n    <span class=\"hljs-comment\">// index.js is a file on our fs</span>\n    <span class=\"hljs-comment\">// example.js is the file in our archive</span>\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err\n    <span class=\"hljs-keyword\">if</span> (duplicate) <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'index.js not a duplicate of example.js!'</span>)\n  })\n})\n</code></pre>\n<h2 id=\"api\"><a href=\"#api\" class=\"anchor\"></a>API</h2><h3 id=\"isduplicatearchive-filepath-entryname-cb\"><a href=\"#isduplicatearchive-filepath-entryname-cb\" class=\"anchor\"></a>isDuplicate(archive, filePath, [entryName], cb)</h3><p>Callback returns <code>(err, isDuplicate)</code> where <code>isDuplicate</code> is a boolean, true if the file is a duplicate.</p>\n<p>If <code>filePath</code> is different from the entry name in hyperdrive, specify both.</p>\n<h2 id=\"license\"><a href=\"#license\" class=\"anchor\"></a>License</h2><p>MIT</p>\n"}})
  app.start('#choo-root')
  
},{"minidocs":59}],2:[function(require,module,exports){
(function (global){
'use strict';

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = require('util/');
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"util/":128}],3:[function(require,module,exports){
module.exports = applyHook

// apply arguments onto an array of functions, useful for hooks
// (arr, any?, any?, any?, any?, any?) -> null
function applyHook (arr, arg1, arg2, arg3, arg4, arg5) {
  arr.forEach(function (fn) {
    fn(arg1, arg2, arg3, arg4, arg5)
  })
}

},{}],4:[function(require,module,exports){
const mutate = require('xtend/mutable')
const assert = require('assert')
const xtend = require('xtend')

const applyHook = require('./apply-hook')

module.exports = dispatcher

// initialize a new barracks instance
// obj -> obj
function dispatcher (hooks) {
  hooks = hooks || {}
  assert.equal(typeof hooks, 'object', 'barracks: hooks should be undefined or an object')

  const onStateChangeHooks = []
  const onActionHooks = []
  const onErrorHooks = []

  const subscriptionWraps = []
  const initialStateWraps = []
  const reducerWraps = []
  const effectWraps = []

  use(hooks)

  var reducersCalled = false
  var effectsCalled = false
  var stateCalled = false
  var subsCalled = false

  const subscriptions = start._subscriptions = {}
  const reducers = start._reducers = {}
  const effects = start._effects = {}
  const models = start._models = []
  var _state = {}

  start.model = setModel
  start.state = getState
  start.start = start
  start.use = use
  return start

  // push an object of hooks onto an array
  // obj -> null
  function use (hooks) {
    assert.equal(typeof hooks, 'object', 'barracks.use: hooks should be an object')
    assert.ok(!hooks.onError || typeof hooks.onError === 'function', 'barracks.use: onError should be undefined or a function')
    assert.ok(!hooks.onAction || typeof hooks.onAction === 'function', 'barracks.use: onAction should be undefined or a function')
    assert.ok(!hooks.onStateChange || typeof hooks.onStateChange === 'function', 'barracks.use: onStateChange should be undefined or a function')

    if (hooks.onStateChange) onStateChangeHooks.push(hooks.onStateChange)
    if (hooks.onError) onErrorHooks.push(wrapOnError(hooks.onError))
    if (hooks.onAction) onActionHooks.push(hooks.onAction)
    if (hooks.wrapSubscriptions) subscriptionWraps.push(hooks.wrapSubscriptions)
    if (hooks.wrapInitialState) initialStateWraps.push(hooks.wrapInitialState)
    if (hooks.wrapReducers) reducerWraps.push(hooks.wrapReducers)
    if (hooks.wrapEffects) effectWraps.push(hooks.wrapEffects)
  }

  // push a model to be initiated
  // obj -> null
  function setModel (model) {
    assert.equal(typeof model, 'object', 'barracks.store.model: model should be an object')
    models.push(model)
  }

  // get the current state from the store
  // obj? -> obj
  function getState (opts) {
    opts = opts || {}
    assert.equal(typeof opts, 'object', 'barracks.store.state: opts should be an object')

    const state = opts.state
    if (!opts.state && opts.freeze === false) return xtend(_state)
    else if (!opts.state) return Object.freeze(xtend(_state))
    assert.equal(typeof state, 'object', 'barracks.store.state: state should be an object')

    const namespaces = []
    const newState = {}

    // apply all fields from the model, and namespaced fields from the passed
    // in state
    models.forEach(function (model) {
      const ns = model.namespace
      namespaces.push(ns)
      const modelState = model.state || {}
      if (ns) {
        newState[ns] = newState[ns] || {}
        apply(ns, modelState, newState)
        newState[ns] = xtend(newState[ns], state[ns])
      } else {
        mutate(newState, modelState)
      }
    })

    // now apply all fields that weren't namespaced from the passed in state
    Object.keys(state).forEach(function (key) {
      if (namespaces.indexOf(key) !== -1) return
      newState[key] = state[key]
    })

    const tmpState = xtend(_state, xtend(state, newState))
    const wrappedState = wrapHook(tmpState, initialStateWraps)

    return (opts.freeze === false)
      ? wrappedState
      : Object.freeze(wrappedState)
  }

  // initialize the store hooks, get the send() function
  // obj? -> fn
  function start (opts) {
    opts = opts || {}
    assert.equal(typeof opts, 'object', 'barracks.store.start: opts should be undefined or an object')

    // register values from the models
    models.forEach(function (model) {
      const ns = model.namespace
      if (!stateCalled && model.state && opts.state !== false) {
        const modelState = model.state || {}
        if (ns) {
          _state[ns] = _state[ns] || {}
          apply(ns, modelState, _state)
        } else {
          mutate(_state, modelState)
        }
      }
      if (!reducersCalled && model.reducers && opts.reducers !== false) {
        apply(ns, model.reducers, reducers, function (cb) {
          return wrapHook(cb, reducerWraps)
        })
      }
      if (!effectsCalled && model.effects && opts.effects !== false) {
        apply(ns, model.effects, effects, function (cb) {
          return wrapHook(cb, effectWraps)
        })
      }
      if (!subsCalled && model.subscriptions && opts.subscriptions !== false) {
        apply(ns, model.subscriptions, subscriptions, function (cb, key) {
          const send = createSend('subscription: ' + (ns ? ns + ':' + key : key))
          cb = wrapHook(cb, subscriptionWraps)
          cb(send, function (err) {
            applyHook(onErrorHooks, err, _state, createSend)
          })
          return cb
        })
      }
    })

    // the state wrap is special because we want to operate on the full
    // state rather than indvidual chunks, so we apply it outside the loop
    if (!stateCalled && opts.state !== false) {
      _state = wrapHook(_state, initialStateWraps)
    }

    if (!opts.noSubscriptions) subsCalled = true
    if (!opts.noReducers) reducersCalled = true
    if (!opts.noEffects) effectsCalled = true
    if (!opts.noState) stateCalled = true

    if (!onErrorHooks.length) onErrorHooks.push(wrapOnError(defaultOnError))

    return createSend

    // call an action from a view
    // (str, bool?) -> (str, any?, fn?) -> null
    function createSend (selfName, callOnError) {
      assert.equal(typeof selfName, 'string', 'barracks.store.start.createSend: selfName should be a string')
      assert.ok(!callOnError || typeof callOnError === 'boolean', 'barracks.store.start.send: callOnError should be undefined or a boolean')

      return function send (name, data, cb) {
        if (!cb && !callOnError) {
          cb = data
          data = null
        }
        data = (typeof data === 'undefined' ? null : data)

        assert.equal(typeof name, 'string', 'barracks.store.start.send: name should be a string')
        assert.ok(!cb || typeof cb === 'function', 'barracks.store.start.send: cb should be a function')

        const done = callOnError ? onErrorCallback : cb
        _send(name, data, selfName, done)

        function onErrorCallback (err) {
          err = err || null
          if (err) {
            applyHook(onErrorHooks, err, _state, function createSend (selfName) {
              return function send (name, data) {
                assert.equal(typeof name, 'string', 'barracks.store.start.send: name should be a string')
                data = (typeof data === 'undefined' ? null : data)
                _send(name, data, selfName, done)
              }
            })
          }
        }
      }
    }

    // call an action
    // (str, str, any, fn) -> null
    function _send (name, data, caller, cb) {
      assert.equal(typeof name, 'string', 'barracks._send: name should be a string')
      assert.equal(typeof caller, 'string', 'barracks._send: caller should be a string')
      assert.equal(typeof cb, 'function', 'barracks._send: cb should be a function')

      setTimeout(function () {
        var reducersCalled = false
        var effectsCalled = false
        const newState = xtend(_state)

        if (onActionHooks.length) {
          applyHook(onActionHooks, data, _state, name, caller, createSend)
        }

        // validate if a namespace exists. Namespaces are delimited by ':'.
        var actionName = name
        if (/:/.test(name)) {
          const arr = name.split(':')
          var ns = arr.shift()
          actionName = arr.join(':')
        }

        const _reducers = ns ? reducers[ns] : reducers
        if (_reducers && _reducers[actionName]) {
          if (ns) {
            const reducedState = _reducers[actionName](data, _state[ns])
            newState[ns] = xtend(_state[ns], reducedState)
          } else {
            mutate(newState, reducers[actionName](data, _state))
          }
          reducersCalled = true
          if (onStateChangeHooks.length) {
            applyHook(onStateChangeHooks, data, newState, _state, actionName, createSend)
          }
          _state = newState
          cb(null, newState)
        }

        const _effects = ns ? effects[ns] : effects
        if (!reducersCalled && _effects && _effects[actionName]) {
          const send = createSend('effect: ' + name)
          if (ns) _effects[actionName](data, _state[ns], send, cb)
          else _effects[actionName](data, _state, send, cb)
          effectsCalled = true
        }

        if (!reducersCalled && !effectsCalled) {
          throw new Error('Could not find action ' + actionName)
        }
      }, 0)
    }
  }
}

// compose an object conditionally
// optionally contains a namespace
// which is used to nest properties.
// (str, obj, obj, fn?) -> null
function apply (ns, source, target, wrap) {
  if (ns && !target[ns]) target[ns] = {}
  Object.keys(source).forEach(function (key) {
    const cb = wrap ? wrap(source[key], key) : source[key]
    if (ns) target[ns][key] = cb
    else target[key] = cb
  })
}

// handle errors all the way at the top of the trace
// err? -> null
function defaultOnError (err) {
  throw err
}

function wrapOnError (onError) {
  return function onErrorWrap (err, state, createSend) {
    if (err) onError(err, state, createSend)
  }
}

// take a apply an array of transforms onto a value. The new value
// must be returned synchronously from the transform
// (any, [fn]) -> any
function wrapHook (value, transforms) {
  transforms.forEach(function (transform) {
    value = transform(value)
  })
  return value
}

},{"./apply-hook":3,"assert":2,"xtend":132,"xtend/mutable":133}],5:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],6:[function(require,module,exports){
var document = require('global/document')
var hyperx = require('hyperx')
var onload = require('on-load')

var SVGNS = 'http://www.w3.org/2000/svg'
var XLINKNS = 'http://www.w3.org/1999/xlink'

var BOOL_PROPS = {
  autofocus: 1,
  checked: 1,
  defaultchecked: 1,
  disabled: 1,
  formnovalidate: 1,
  indeterminate: 1,
  readonly: 1,
  required: 1,
  selected: 1,
  willvalidate: 1
}
var COMMENT_TAG = '!--'
var SVG_TAGS = [
  'svg',
  'altGlyph', 'altGlyphDef', 'altGlyphItem', 'animate', 'animateColor',
  'animateMotion', 'animateTransform', 'circle', 'clipPath', 'color-profile',
  'cursor', 'defs', 'desc', 'ellipse', 'feBlend', 'feColorMatrix',
  'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting',
  'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB',
  'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode',
  'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting',
  'feSpotLight', 'feTile', 'feTurbulence', 'filter', 'font', 'font-face',
  'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri',
  'foreignObject', 'g', 'glyph', 'glyphRef', 'hkern', 'image', 'line',
  'linearGradient', 'marker', 'mask', 'metadata', 'missing-glyph', 'mpath',
  'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect',
  'set', 'stop', 'switch', 'symbol', 'text', 'textPath', 'title', 'tref',
  'tspan', 'use', 'view', 'vkern'
]

function belCreateElement (tag, props, children) {
  var el

  // If an svg tag, it needs a namespace
  if (SVG_TAGS.indexOf(tag) !== -1) {
    props.namespace = SVGNS
  }

  // If we are using a namespace
  var ns = false
  if (props.namespace) {
    ns = props.namespace
    delete props.namespace
  }

  // Create the element
  if (ns) {
    el = document.createElementNS(ns, tag)
  } else if (tag === COMMENT_TAG) {
    return document.createComment(props.comment)
  } else {
    el = document.createElement(tag)
  }

  // If adding onload events
  if (props.onload || props.onunload) {
    var load = props.onload || function () {}
    var unload = props.onunload || function () {}
    onload(el, function belOnload () {
      load(el)
    }, function belOnunload () {
      unload(el)
    },
    // We have to use non-standard `caller` to find who invokes `belCreateElement`
    belCreateElement.caller.caller.caller)
    delete props.onload
    delete props.onunload
  }

  // Create the properties
  for (var p in props) {
    if (props.hasOwnProperty(p)) {
      var key = p.toLowerCase()
      var val = props[p]
      // Normalize className
      if (key === 'classname') {
        key = 'class'
        p = 'class'
      }
      // The for attribute gets transformed to htmlFor, but we just set as for
      if (p === 'htmlFor') {
        p = 'for'
      }
      // If a property is boolean, set itself to the key
      if (BOOL_PROPS[key]) {
        if (val === 'true') val = key
        else if (val === 'false') continue
      }
      // If a property prefers being set directly vs setAttribute
      if (key.slice(0, 2) === 'on') {
        el[p] = val
      } else {
        if (ns) {
          if (p === 'xlink:href') {
            el.setAttributeNS(XLINKNS, p, val)
          } else if (/^xmlns($|:)/i.test(p)) {
            // skip xmlns definitions
          } else {
            el.setAttributeNS(null, p, val)
          }
        } else {
          el.setAttribute(p, val)
        }
      }
    }
  }

  function appendChild (childs) {
    if (!Array.isArray(childs)) return
    for (var i = 0; i < childs.length; i++) {
      var node = childs[i]
      if (Array.isArray(node)) {
        appendChild(node)
        continue
      }

      if (typeof node === 'number' ||
        typeof node === 'boolean' ||
        typeof node === 'function' ||
        node instanceof Date ||
        node instanceof RegExp) {
        node = node.toString()
      }

      if (typeof node === 'string') {
        if (el.lastChild && el.lastChild.nodeName === '#text') {
          el.lastChild.nodeValue += node
          continue
        }
        node = document.createTextNode(node)
      }

      if (node && node.nodeType) {
        el.appendChild(node)
      }
    }
  }
  appendChild(children)

  return el
}

module.exports = hyperx(belCreateElement, {comments: true})
module.exports.default = module.exports
module.exports.createElement = belCreateElement

},{"global/document":33,"hyperx":40,"on-load":65}],7:[function(require,module,exports){

},{}],8:[function(require,module,exports){
(function (process,Buffer){
var msg = require('pako/lib/zlib/messages');
var zstream = require('pako/lib/zlib/zstream');
var zlib_deflate = require('pako/lib/zlib/deflate.js');
var zlib_inflate = require('pako/lib/zlib/inflate.js');
var constants = require('pako/lib/zlib/constants');

for (var key in constants) {
  exports[key] = constants[key];
}

// zlib modes
exports.NONE = 0;
exports.DEFLATE = 1;
exports.INFLATE = 2;
exports.GZIP = 3;
exports.GUNZIP = 4;
exports.DEFLATERAW = 5;
exports.INFLATERAW = 6;
exports.UNZIP = 7;

/**
 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
 */
function Zlib(mode) {
  if (mode < exports.DEFLATE || mode > exports.UNZIP)
    throw new TypeError("Bad argument");
    
  this.mode = mode;
  this.init_done = false;
  this.write_in_progress = false;
  this.pending_close = false;
  this.windowBits = 0;
  this.level = 0;
  this.memLevel = 0;
  this.strategy = 0;
  this.dictionary = null;
}

Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
  this.windowBits = windowBits;
  this.level = level;
  this.memLevel = memLevel;
  this.strategy = strategy;
  // dictionary not supported.
  
  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP)
    this.windowBits += 16;
    
  if (this.mode === exports.UNZIP)
    this.windowBits += 32;
    
  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW)
    this.windowBits = -this.windowBits;
    
  this.strm = new zstream();
  
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      var status = zlib_deflate.deflateInit2(
        this.strm,
        this.level,
        exports.Z_DEFLATED,
        this.windowBits,
        this.memLevel,
        this.strategy
      );
      break;
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
    case exports.UNZIP:
      var status  = zlib_inflate.inflateInit2(
        this.strm,
        this.windowBits
      );
      break;
    default:
      throw new Error("Unknown mode " + this.mode);
  }
  
  if (status !== exports.Z_OK) {
    this._error(status);
    return;
  }
  
  this.write_in_progress = false;
  this.init_done = true;
};

Zlib.prototype.params = function() {
  throw new Error("deflateParams Not supported");
};

Zlib.prototype._writeCheck = function() {
  if (!this.init_done)
    throw new Error("write before init");
    
  if (this.mode === exports.NONE)
    throw new Error("already finalized");
    
  if (this.write_in_progress)
    throw new Error("write already in progress");
    
  if (this.pending_close)
    throw new Error("close is pending");
};

Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {    
  this._writeCheck();
  this.write_in_progress = true;
  
  var self = this;
  process.nextTick(function() {
    self.write_in_progress = false;
    var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
    self.callback(res[0], res[1]);
    
    if (self.pending_close)
      self.close();
  });
  
  return this;
};

// set method for Node buffers, used by pako
function bufferSet(data, offset) {
  for (var i = 0; i < data.length; i++) {
    this[offset + i] = data[i];
  }
}

Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
  this._writeCheck();
  return this._write(flush, input, in_off, in_len, out, out_off, out_len);
};

Zlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
  this.write_in_progress = true;
  
  if (flush !== exports.Z_NO_FLUSH &&
      flush !== exports.Z_PARTIAL_FLUSH &&
      flush !== exports.Z_SYNC_FLUSH &&
      flush !== exports.Z_FULL_FLUSH &&
      flush !== exports.Z_FINISH &&
      flush !== exports.Z_BLOCK) {
    throw new Error("Invalid flush value");
  }
  
  if (input == null) {
    input = new Buffer(0);
    in_len = 0;
    in_off = 0;
  }
  
  if (out._set)
    out.set = out._set;
  else
    out.set = bufferSet;
  
  var strm = this.strm;
  strm.avail_in = in_len;
  strm.input = input;
  strm.next_in = in_off;
  strm.avail_out = out_len;
  strm.output = out;
  strm.next_out = out_off;
  
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      var status = zlib_deflate.deflate(strm, flush);
      break;
    case exports.UNZIP:
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
      var status = zlib_inflate.inflate(strm, flush);
      break;
    default:
      throw new Error("Unknown mode " + this.mode);
  }
  
  if (status !== exports.Z_STREAM_END && status !== exports.Z_OK) {
    this._error(status);
  }
  
  this.write_in_progress = false;
  return [strm.avail_in, strm.avail_out];
};

Zlib.prototype.close = function() {
  if (this.write_in_progress) {
    this.pending_close = true;
    return;
  }
  
  this.pending_close = false;
  
  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
    zlib_deflate.deflateEnd(this.strm);
  } else {
    zlib_inflate.inflateEnd(this.strm);
  }
  
  this.mode = exports.NONE;
};

Zlib.prototype.reset = function() {
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
      var status = zlib_deflate.deflateReset(this.strm);
      break;
    case exports.INFLATE:
    case exports.INFLATERAW:
      var status = zlib_inflate.inflateReset(this.strm);
      break;
  }
  
  if (status !== exports.Z_OK) {
    this._error(status);
  }
};

Zlib.prototype._error = function(status) {
  this.onerror(msg[status] + ': ' + this.strm.msg, status);
  
  this.write_in_progress = false;
  if (this.pending_close)
    this.close();
};

exports.Zlib = Zlib;

}).call(this,require('_process'),require("buffer").Buffer)
},{"_process":86,"buffer":11,"pako/lib/zlib/constants":69,"pako/lib/zlib/deflate.js":71,"pako/lib/zlib/inflate.js":73,"pako/lib/zlib/messages":75,"pako/lib/zlib/zstream":77}],9:[function(require,module,exports){
(function (process,Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Transform = require('_stream_transform');

var binding = require('./binding');
var util = require('util');
var assert = require('assert').ok;

// zlib doesn't provide these, so kludge them in following the same
// const naming scheme zlib uses.
binding.Z_MIN_WINDOWBITS = 8;
binding.Z_MAX_WINDOWBITS = 15;
binding.Z_DEFAULT_WINDOWBITS = 15;

// fewer than 64 bytes per chunk is stupid.
// technically it could work with as few as 8, but even 64 bytes
// is absurdly low.  Usually a MB or more is best.
binding.Z_MIN_CHUNK = 64;
binding.Z_MAX_CHUNK = Infinity;
binding.Z_DEFAULT_CHUNK = (16 * 1024);

binding.Z_MIN_MEMLEVEL = 1;
binding.Z_MAX_MEMLEVEL = 9;
binding.Z_DEFAULT_MEMLEVEL = 8;

binding.Z_MIN_LEVEL = -1;
binding.Z_MAX_LEVEL = 9;
binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

// expose all the zlib constants
Object.keys(binding).forEach(function(k) {
  if (k.match(/^Z/)) exports[k] = binding[k];
});

// translation table for return codes.
exports.codes = {
  Z_OK: binding.Z_OK,
  Z_STREAM_END: binding.Z_STREAM_END,
  Z_NEED_DICT: binding.Z_NEED_DICT,
  Z_ERRNO: binding.Z_ERRNO,
  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
  Z_DATA_ERROR: binding.Z_DATA_ERROR,
  Z_MEM_ERROR: binding.Z_MEM_ERROR,
  Z_BUF_ERROR: binding.Z_BUF_ERROR,
  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
};

Object.keys(exports.codes).forEach(function(k) {
  exports.codes[exports.codes[k]] = k;
});

exports.Deflate = Deflate;
exports.Inflate = Inflate;
exports.Gzip = Gzip;
exports.Gunzip = Gunzip;
exports.DeflateRaw = DeflateRaw;
exports.InflateRaw = InflateRaw;
exports.Unzip = Unzip;

exports.createDeflate = function(o) {
  return new Deflate(o);
};

exports.createInflate = function(o) {
  return new Inflate(o);
};

exports.createDeflateRaw = function(o) {
  return new DeflateRaw(o);
};

exports.createInflateRaw = function(o) {
  return new InflateRaw(o);
};

exports.createGzip = function(o) {
  return new Gzip(o);
};

exports.createGunzip = function(o) {
  return new Gunzip(o);
};

exports.createUnzip = function(o) {
  return new Unzip(o);
};


// Convenience methods.
// compress/decompress a string or buffer in one step.
exports.deflate = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Deflate(opts), buffer, callback);
};

exports.deflateSync = function(buffer, opts) {
  return zlibBufferSync(new Deflate(opts), buffer);
};

exports.gzip = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gzip(opts), buffer, callback);
};

exports.gzipSync = function(buffer, opts) {
  return zlibBufferSync(new Gzip(opts), buffer);
};

exports.deflateRaw = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
};

exports.deflateRawSync = function(buffer, opts) {
  return zlibBufferSync(new DeflateRaw(opts), buffer);
};

exports.unzip = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Unzip(opts), buffer, callback);
};

exports.unzipSync = function(buffer, opts) {
  return zlibBufferSync(new Unzip(opts), buffer);
};

exports.inflate = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Inflate(opts), buffer, callback);
};

exports.inflateSync = function(buffer, opts) {
  return zlibBufferSync(new Inflate(opts), buffer);
};

exports.gunzip = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gunzip(opts), buffer, callback);
};

exports.gunzipSync = function(buffer, opts) {
  return zlibBufferSync(new Gunzip(opts), buffer);
};

exports.inflateRaw = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new InflateRaw(opts), buffer, callback);
};

exports.inflateRawSync = function(buffer, opts) {
  return zlibBufferSync(new InflateRaw(opts), buffer);
};

function zlibBuffer(engine, buffer, callback) {
  var buffers = [];
  var nread = 0;

  engine.on('error', onError);
  engine.on('end', onEnd);

  engine.end(buffer);
  flow();

  function flow() {
    var chunk;
    while (null !== (chunk = engine.read())) {
      buffers.push(chunk);
      nread += chunk.length;
    }
    engine.once('readable', flow);
  }

  function onError(err) {
    engine.removeListener('end', onEnd);
    engine.removeListener('readable', flow);
    callback(err);
  }

  function onEnd() {
    var buf = Buffer.concat(buffers, nread);
    buffers = [];
    callback(null, buf);
    engine.close();
  }
}

function zlibBufferSync(engine, buffer) {
  if (typeof buffer === 'string')
    buffer = new Buffer(buffer);
  if (!Buffer.isBuffer(buffer))
    throw new TypeError('Not a string or buffer');

  var flushFlag = binding.Z_FINISH;

  return engine._processChunk(buffer, flushFlag);
}

// generic zlib
// minimal 2-byte header
function Deflate(opts) {
  if (!(this instanceof Deflate)) return new Deflate(opts);
  Zlib.call(this, opts, binding.DEFLATE);
}

function Inflate(opts) {
  if (!(this instanceof Inflate)) return new Inflate(opts);
  Zlib.call(this, opts, binding.INFLATE);
}



// gzip - bigger header, same deflate compression
function Gzip(opts) {
  if (!(this instanceof Gzip)) return new Gzip(opts);
  Zlib.call(this, opts, binding.GZIP);
}

function Gunzip(opts) {
  if (!(this instanceof Gunzip)) return new Gunzip(opts);
  Zlib.call(this, opts, binding.GUNZIP);
}



// raw - no header
function DeflateRaw(opts) {
  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
  Zlib.call(this, opts, binding.DEFLATERAW);
}

function InflateRaw(opts) {
  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
  Zlib.call(this, opts, binding.INFLATERAW);
}


// auto-detect header.
function Unzip(opts) {
  if (!(this instanceof Unzip)) return new Unzip(opts);
  Zlib.call(this, opts, binding.UNZIP);
}


// the Zlib class they all inherit from
// This thing manages the queue of requests, and returns
// true or false if there is anything in the queue when
// you call the .write() method.

function Zlib(opts, mode) {
  this._opts = opts = opts || {};
  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

  Transform.call(this, opts);

  if (opts.flush) {
    if (opts.flush !== binding.Z_NO_FLUSH &&
        opts.flush !== binding.Z_PARTIAL_FLUSH &&
        opts.flush !== binding.Z_SYNC_FLUSH &&
        opts.flush !== binding.Z_FULL_FLUSH &&
        opts.flush !== binding.Z_FINISH &&
        opts.flush !== binding.Z_BLOCK) {
      throw new Error('Invalid flush flag: ' + opts.flush);
    }
  }
  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;

  if (opts.chunkSize) {
    if (opts.chunkSize < exports.Z_MIN_CHUNK ||
        opts.chunkSize > exports.Z_MAX_CHUNK) {
      throw new Error('Invalid chunk size: ' + opts.chunkSize);
    }
  }

  if (opts.windowBits) {
    if (opts.windowBits < exports.Z_MIN_WINDOWBITS ||
        opts.windowBits > exports.Z_MAX_WINDOWBITS) {
      throw new Error('Invalid windowBits: ' + opts.windowBits);
    }
  }

  if (opts.level) {
    if (opts.level < exports.Z_MIN_LEVEL ||
        opts.level > exports.Z_MAX_LEVEL) {
      throw new Error('Invalid compression level: ' + opts.level);
    }
  }

  if (opts.memLevel) {
    if (opts.memLevel < exports.Z_MIN_MEMLEVEL ||
        opts.memLevel > exports.Z_MAX_MEMLEVEL) {
      throw new Error('Invalid memLevel: ' + opts.memLevel);
    }
  }

  if (opts.strategy) {
    if (opts.strategy != exports.Z_FILTERED &&
        opts.strategy != exports.Z_HUFFMAN_ONLY &&
        opts.strategy != exports.Z_RLE &&
        opts.strategy != exports.Z_FIXED &&
        opts.strategy != exports.Z_DEFAULT_STRATEGY) {
      throw new Error('Invalid strategy: ' + opts.strategy);
    }
  }

  if (opts.dictionary) {
    if (!Buffer.isBuffer(opts.dictionary)) {
      throw new Error('Invalid dictionary: it should be a Buffer instance');
    }
  }

  this._binding = new binding.Zlib(mode);

  var self = this;
  this._hadError = false;
  this._binding.onerror = function(message, errno) {
    // there is no way to cleanly recover.
    // continuing only obscures problems.
    self._binding = null;
    self._hadError = true;

    var error = new Error(message);
    error.errno = errno;
    error.code = exports.codes[errno];
    self.emit('error', error);
  };

  var level = exports.Z_DEFAULT_COMPRESSION;
  if (typeof opts.level === 'number') level = opts.level;

  var strategy = exports.Z_DEFAULT_STRATEGY;
  if (typeof opts.strategy === 'number') strategy = opts.strategy;

  this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS,
                     level,
                     opts.memLevel || exports.Z_DEFAULT_MEMLEVEL,
                     strategy,
                     opts.dictionary);

  this._buffer = new Buffer(this._chunkSize);
  this._offset = 0;
  this._closed = false;
  this._level = level;
  this._strategy = strategy;

  this.once('end', this.close);
}

util.inherits(Zlib, Transform);

Zlib.prototype.params = function(level, strategy, callback) {
  if (level < exports.Z_MIN_LEVEL ||
      level > exports.Z_MAX_LEVEL) {
    throw new RangeError('Invalid compression level: ' + level);
  }
  if (strategy != exports.Z_FILTERED &&
      strategy != exports.Z_HUFFMAN_ONLY &&
      strategy != exports.Z_RLE &&
      strategy != exports.Z_FIXED &&
      strategy != exports.Z_DEFAULT_STRATEGY) {
    throw new TypeError('Invalid strategy: ' + strategy);
  }

  if (this._level !== level || this._strategy !== strategy) {
    var self = this;
    this.flush(binding.Z_SYNC_FLUSH, function() {
      self._binding.params(level, strategy);
      if (!self._hadError) {
        self._level = level;
        self._strategy = strategy;
        if (callback) callback();
      }
    });
  } else {
    process.nextTick(callback);
  }
};

Zlib.prototype.reset = function() {
  return this._binding.reset();
};

// This is the _flush function called by the transform class,
// internally, when the last chunk has been written.
Zlib.prototype._flush = function(callback) {
  this._transform(new Buffer(0), '', callback);
};

Zlib.prototype.flush = function(kind, callback) {
  var ws = this._writableState;

  if (typeof kind === 'function' || (kind === void 0 && !callback)) {
    callback = kind;
    kind = binding.Z_FULL_FLUSH;
  }

  if (ws.ended) {
    if (callback)
      process.nextTick(callback);
  } else if (ws.ending) {
    if (callback)
      this.once('end', callback);
  } else if (ws.needDrain) {
    var self = this;
    this.once('drain', function() {
      self.flush(callback);
    });
  } else {
    this._flushFlag = kind;
    this.write(new Buffer(0), '', callback);
  }
};

Zlib.prototype.close = function(callback) {
  if (callback)
    process.nextTick(callback);

  if (this._closed)
    return;

  this._closed = true;

  this._binding.close();

  var self = this;
  process.nextTick(function() {
    self.emit('close');
  });
};

Zlib.prototype._transform = function(chunk, encoding, cb) {
  var flushFlag;
  var ws = this._writableState;
  var ending = ws.ending || ws.ended;
  var last = ending && (!chunk || ws.length === chunk.length);

  if (!chunk === null && !Buffer.isBuffer(chunk))
    return cb(new Error('invalid input'));

  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
  // If it's explicitly flushing at some other time, then we use
  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
  // goodness.
  if (last)
    flushFlag = binding.Z_FINISH;
  else {
    flushFlag = this._flushFlag;
    // once we've flushed the last of the queue, stop flushing and
    // go back to the normal behavior.
    if (chunk.length >= ws.length) {
      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
    }
  }

  var self = this;
  this._processChunk(chunk, flushFlag, cb);
};

Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
  var availInBefore = chunk && chunk.length;
  var availOutBefore = this._chunkSize - this._offset;
  var inOff = 0;

  var self = this;

  var async = typeof cb === 'function';

  if (!async) {
    var buffers = [];
    var nread = 0;

    var error;
    this.on('error', function(er) {
      error = er;
    });

    do {
      var res = this._binding.writeSync(flushFlag,
                                        chunk, // in
                                        inOff, // in_off
                                        availInBefore, // in_len
                                        this._buffer, // out
                                        this._offset, //out_off
                                        availOutBefore); // out_len
    } while (!this._hadError && callback(res[0], res[1]));

    if (this._hadError) {
      throw error;
    }

    var buf = Buffer.concat(buffers, nread);
    this.close();

    return buf;
  }

  var req = this._binding.write(flushFlag,
                                chunk, // in
                                inOff, // in_off
                                availInBefore, // in_len
                                this._buffer, // out
                                this._offset, //out_off
                                availOutBefore); // out_len

  req.buffer = chunk;
  req.callback = callback;

  function callback(availInAfter, availOutAfter) {
    if (self._hadError)
      return;

    var have = availOutBefore - availOutAfter;
    assert(have >= 0, 'have should not go down');

    if (have > 0) {
      var out = self._buffer.slice(self._offset, self._offset + have);
      self._offset += have;
      // serve some output to the consumer.
      if (async) {
        self.push(out);
      } else {
        buffers.push(out);
        nread += out.length;
      }
    }

    // exhausted the output buffer, or used all the input create a new one.
    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
      availOutBefore = self._chunkSize;
      self._offset = 0;
      self._buffer = new Buffer(self._chunkSize);
    }

    if (availOutAfter === 0) {
      // Not actually done.  Need to reprocess.
      // Also, update the availInBefore to the availInAfter value,
      // so that if we have to hit it a third (fourth, etc.) time,
      // it'll have the correct byte counts.
      inOff += (availInBefore - availInAfter);
      availInBefore = availInAfter;

      if (!async)
        return true;

      var newReq = self._binding.write(flushFlag,
                                       chunk,
                                       inOff,
                                       availInBefore,
                                       self._buffer,
                                       self._offset,
                                       self._chunkSize);
      newReq.callback = callback; // this same function
      newReq.buffer = chunk;
      return;
    }

    if (!async)
      return false;

    // finished with the chunk.
    cb();
  }
};

util.inherits(Deflate, Zlib);
util.inherits(Inflate, Zlib);
util.inherits(Gzip, Zlib);
util.inherits(Gunzip, Zlib);
util.inherits(DeflateRaw, Zlib);
util.inherits(InflateRaw, Zlib);
util.inherits(Unzip, Zlib);

}).call(this,require('_process'),require("buffer").Buffer)
},{"./binding":8,"_process":86,"_stream_transform":98,"assert":2,"buffer":11,"util":128}],10:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"dup":7}],11:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"base64-js":5,"ieee754":41,"isarray":52}],12:[function(require,module,exports){
module.exports = {
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "208": "Already Reported",
  "226": "IM Used",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Payload Too Large",
  "414": "URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "421": "Misdirected Request",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Unordered Collection",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "451": "Unavailable For Legal Reasons",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "508": "Loop Detected",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
}

},{}],13:[function(require,module,exports){
'use strict';

module.exports = Error.captureStackTrace || function (error) {
	var container = new Error();

	Object.defineProperty(error, 'stack', {
		configurable: true,
		get: function getStack() {
			var stack = container.stack;

			Object.defineProperty(this, 'stack', {
				value: stack
			});

			return stack;
		}
	});
};

},{}],14:[function(require,module,exports){
module.exports = require('yo-yo')

},{"yo-yo":134}],15:[function(require,module,exports){
const history = require('sheet-router/history')
const sheetRouter = require('sheet-router')
const document = require('global/document')
const onReady = require('document-ready')
const href = require('sheet-router/href')
const hash = require('sheet-router/hash')
const hashMatch = require('hash-match')
const barracks = require('barracks')
const nanoraf = require('nanoraf')
const assert = require('assert')
const xtend = require('xtend')
const yo = require('yo-yo')

module.exports = choo

// framework for creating sturdy web applications
// null -> fn
function choo (opts) {
  opts = opts || {}

  const _store = start._store = barracks()
  var _router = start._router = null
  var _defaultRoute = null
  var _rootNode = null
  var _routes = null
  var _frame = null

  _store.use({ onStateChange: render })
  _store.use(opts)

  start.toString = toString
  start.router = router
  start.model = model
  start.start = start
  start.use = use

  return start

  // render the application to a string
  // (str, obj) -> str
  function toString (route, serverState) {
    serverState = serverState || {}
    assert.equal(typeof route, 'string', 'choo.app.toString: route must be a string')
    assert.equal(typeof serverState, 'object', 'choo.app.toString: serverState must be an object')
    _store.start({ subscriptions: false, reducers: false, effects: false })

    const state = _store.state({ state: serverState })
    const router = createRouter(_defaultRoute, _routes, createSend)
    const tree = router(route, state)
    return tree.outerHTML || tree.toString()

    function createSend () {
      return function send () {
        assert.ok(false, 'choo: send() cannot be called from Node')
      }
    }
  }

  // start the application
  // (str?, obj?) -> DOMNode
  function start (selector, startOpts) {
    if (!startOpts && typeof selector !== 'string') {
      startOpts = selector
      selector = null
    }
    startOpts = startOpts || {}

    _store.model(appInit(startOpts))
    const createSend = _store.start(startOpts)
    _router = start._router = createRouter(_defaultRoute, _routes, createSend)
    const state = _store.state({state: {}})

    if (!selector) {
      const tree = _router(state.location.pathname, state)
      _rootNode = tree
      return tree
    } else {
      onReady(function onReady () {
        const oldTree = document.querySelector(selector)
        assert.ok(oldTree, 'could not query selector: ' + selector)
        const newTree = _router(state.location.pathname, state)
        _rootNode = yo.update(oldTree, newTree)
      })
    }
  }

  // update the DOM after every state mutation
  // (obj, obj, obj, str, fn) -> null
  function render (data, state, prev, name, createSend) {
    if (!_frame) {
      _frame = nanoraf(function (state, prev) {
        const newTree = _router(state.location.pathname, state, prev)
        _rootNode = yo.update(_rootNode, newTree)
      })
    }
    _frame(state, prev)
  }

  // register all routes on the router
  // (str?, [fn|[fn]]) -> obj
  function router (defaultRoute, routes) {
    _defaultRoute = defaultRoute
    _routes = routes
  }

  // create a new model
  // (str?, obj) -> null
  function model (model) {
    _store.model(model)
  }

  // register a plugin
  // (obj) -> null
  function use (hooks) {
    assert.equal(typeof hooks, 'object', 'choo.use: hooks should be an object')
    _store.use(hooks)
  }

  // create a new router with a custom `createRoute()` function
  // (str?, obj, fn?) -> null
  function createRouter (defaultRoute, routes, createSend) {
    var prev = { params: {} }
    return sheetRouter(defaultRoute, routes, createRoute)

    function createRoute (routeFn) {
      return function (route, inline, child) {
        if (typeof inline === 'function') {
          inline = wrap(inline, route)
        }
        return routeFn(route, inline, child)
      }

      function wrap (child, route) {
        const send = createSend('view: ' + route, true)
        return function chooWrap (params, state) {
          const nwPrev = prev
          const nwState = prev = xtend(state, { params: params })
          if (opts.freeze !== false) Object.freeze(nwState)
          return child(nwState, nwPrev, send)
        }
      }
    }
  }
}

// initial application state model
// obj -> obj
function appInit (opts) {
  const loc = document.location
  const state = { pathname: (opts.hash) ? hashMatch(loc.hash) : loc.href }
  const reducers = {
    setLocation: function setLocation (data, state) {
      return { pathname: data.location.replace(/#.*/, '') }
    }
  }
  // if hash routing explicitly enabled, subscribe to it
  const subs = {}
  if (opts.hash === true) {
    pushLocationSub(function (navigate) {
      hash(function (fragment) {
        navigate(hashMatch(fragment))
      })
    }, 'handleHash', subs)
  } else {
    if (opts.history !== false) pushLocationSub(history, 'handleHistory', subs)
    if (opts.href !== false) pushLocationSub(href, 'handleHref', subs)
  }

  return {
    namespace: 'location',
    subscriptions: subs,
    reducers: reducers,
    state: state
  }

  // create a new subscription that modifies
  // 'app:location' and push it to be loaded
  // (fn, obj) -> null
  function pushLocationSub (cb, key, model) {
    model[key] = function (send, done) {
      cb(function navigate (pathname) {
        send('location:setLocation', { location: pathname }, done)
      })
    }
  }
}

},{"assert":2,"barracks":4,"document-ready":18,"global/document":33,"hash-match":37,"nanoraf":61,"sheet-router":103,"sheet-router/hash":100,"sheet-router/history":101,"sheet-router/href":102,"xtend":132,"yo-yo":134}],16:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":48}],17:[function(require,module,exports){
'use strict';
var captureStackTrace = require('capture-stack-trace');

function inherits(ctor, superCtor) {
	ctor.super_ = superCtor;
	ctor.prototype = Object.create(superCtor.prototype, {
		constructor: {
			value: ctor,
			enumerable: false,
			writable: true,
			configurable: true
		}
	});
}

module.exports = function createErrorClass(className, setup) {
	if (typeof className !== 'string') {
		throw new TypeError('Expected className to be a string');
	}

	if (/[^0-9a-zA-Z_$]/.test(className)) {
		throw new Error('className contains invalid characters');
	}

	setup = setup || function (message) {
		this.message = message;
	};

	var ErrorClass = function () {
		Object.defineProperty(this, 'name', {
			configurable: true,
			value: className,
			writable: true
		});

		captureStackTrace(this, this.constructor);

		setup.apply(this, arguments);
	};

	inherits(ErrorClass, Error);

	return ErrorClass;
};

},{"capture-stack-trace":13}],18:[function(require,module,exports){
'use strict'

var document = require('global/document')

module.exports = document.addEventListener ? ready : noop

function ready (callback) {
  var state = document.readyState
  if (state === 'complete' || state === 'interactive') {
    return setTimeout(callback, 0)
  }

  document.addEventListener('DOMContentLoaded', function onLoad () {
    callback()
  })
}

function noop () {}

},{"global/document":33}],19:[function(require,module,exports){
(function (process,Buffer){
var stream = require('readable-stream')
var eos = require('end-of-stream')
var inherits = require('inherits')
var shift = require('stream-shift')

var SIGNAL_FLUSH = new Buffer([0])

var onuncork = function(self, fn) {
  if (self._corked) self.once('uncork', fn)
  else fn()
}

var destroyer = function(self, end) {
  return function(err) {
    if (err) self.destroy(err.message === 'premature close' ? null : err)
    else if (end && !self._ended) self.end()
  }
}

var end = function(ws, fn) {
  if (!ws) return fn()
  if (ws._writableState && ws._writableState.finished) return fn()
  if (ws._writableState) return ws.end(fn)
  ws.end()
  fn()
}

var toStreams2 = function(rs) {
  return new (stream.Readable)({objectMode:true, highWaterMark:16}).wrap(rs)
}

var Duplexify = function(writable, readable, opts) {
  if (!(this instanceof Duplexify)) return new Duplexify(writable, readable, opts)
  stream.Duplex.call(this, opts)

  this._writable = null
  this._readable = null
  this._readable2 = null

  this._forwardDestroy = !opts || opts.destroy !== false
  this._forwardEnd = !opts || opts.end !== false
  this._corked = 1 // start corked
  this._ondrain = null
  this._drained = false
  this._forwarding = false
  this._unwrite = null
  this._unread = null
  this._ended = false

  this.destroyed = false

  if (writable) this.setWritable(writable)
  if (readable) this.setReadable(readable)
}

inherits(Duplexify, stream.Duplex)

Duplexify.obj = function(writable, readable, opts) {
  if (!opts) opts = {}
  opts.objectMode = true
  opts.highWaterMark = 16
  return new Duplexify(writable, readable, opts)
}

Duplexify.prototype.cork = function() {
  if (++this._corked === 1) this.emit('cork')
}

Duplexify.prototype.uncork = function() {
  if (this._corked && --this._corked === 0) this.emit('uncork')
}

Duplexify.prototype.setWritable = function(writable) {
  if (this._unwrite) this._unwrite()

  if (this.destroyed) {
    if (writable && writable.destroy) writable.destroy()
    return
  }

  if (writable === null || writable === false) {
    this.end()
    return
  }

  var self = this
  var unend = eos(writable, {writable:true, readable:false}, destroyer(this, this._forwardEnd))

  var ondrain = function() {
    var ondrain = self._ondrain
    self._ondrain = null
    if (ondrain) ondrain()
  }

  var clear = function() {
    self._writable.removeListener('drain', ondrain)
    unend()
  }

  if (this._unwrite) process.nextTick(ondrain) // force a drain on stream reset to avoid livelocks

  this._writable = writable
  this._writable.on('drain', ondrain)
  this._unwrite = clear

  this.uncork() // always uncork setWritable
}

Duplexify.prototype.setReadable = function(readable) {
  if (this._unread) this._unread()

  if (this.destroyed) {
    if (readable && readable.destroy) readable.destroy()
    return
  }

  if (readable === null || readable === false) {
    this.push(null)
    this.resume()
    return
  }

  var self = this
  var unend = eos(readable, {writable:false, readable:true}, destroyer(this))

  var onreadable = function() {
    self._forward()
  }

  var onend = function() {
    self.push(null)
  }

  var clear = function() {
    self._readable2.removeListener('readable', onreadable)
    self._readable2.removeListener('end', onend)
    unend()
  }

  this._drained = true
  this._readable = readable
  this._readable2 = readable._readableState ? readable : toStreams2(readable)
  this._readable2.on('readable', onreadable)
  this._readable2.on('end', onend)
  this._unread = clear

  this._forward()
}

Duplexify.prototype._read = function() {
  this._drained = true
  this._forward()
}

Duplexify.prototype._forward = function() {
  if (this._forwarding || !this._readable2 || !this._drained) return
  this._forwarding = true

  var data

  while (this._drained && (data = shift(this._readable2)) !== null) {
    if (this.destroyed) continue
    this._drained = this.push(data)
  }

  this._forwarding = false
}

Duplexify.prototype.destroy = function(err) {
  if (this.destroyed) return
  this.destroyed = true

  var self = this
  process.nextTick(function() {
    self._destroy(err)
  })
}

Duplexify.prototype._destroy = function(err) {
  if (err) {
    var ondrain = this._ondrain
    this._ondrain = null
    if (ondrain) ondrain(err)
    else this.emit('error', err)
  }

  if (this._forwardDestroy) {
    if (this._readable && this._readable.destroy) this._readable.destroy()
    if (this._writable && this._writable.destroy) this._writable.destroy()
  }

  this.emit('close')
}

Duplexify.prototype._write = function(data, enc, cb) {
  if (this.destroyed) return cb()
  if (this._corked) return onuncork(this, this._write.bind(this, data, enc, cb))
  if (data === SIGNAL_FLUSH) return this._finish(cb)
  if (!this._writable) return cb()

  if (this._writable.write(data) === false) this._ondrain = cb
  else cb()
}


Duplexify.prototype._finish = function(cb) {
  var self = this
  this.emit('preend')
  onuncork(this, function() {
    end(self._forwardEnd && self._writable, function() {
      // haxx to not emit prefinish twice
      if (self._writableState.prefinished === false) self._writableState.prefinished = true
      self.emit('prefinish')
      onuncork(self, cb)
    })
  })
}

Duplexify.prototype.end = function(data, enc, cb) {
  if (typeof data === 'function') return this.end(null, null, data)
  if (typeof enc === 'function') return this.end(data, null, enc)
  this._ended = true
  if (data) this.write(data)
  if (!this._writableState.ending) this.write(SIGNAL_FLUSH)
  return stream.Writable.prototype.end.call(this, cb)
}

module.exports = Duplexify

}).call(this,require('_process'),require("buffer").Buffer)
},{"_process":86,"buffer":11,"end-of-stream":21,"inherits":45,"readable-stream":97,"stream-shift":118}],20:[function(require,module,exports){
'use strict';
module.exports = function (opts) {
	opts = opts || {};
	var re = '[^\\.\\s@][^\\s@]*(?!\\.)@[^\\.\\s@]+(?:\\.[^\\.\\s@]+)*';
	return opts.exact ? new RegExp('^' + re + '$') : new RegExp(re, 'g');
};

},{}],21:[function(require,module,exports){
var once = require('once');

var noop = function() {};

var isRequest = function(stream) {
	return stream.setHeader && typeof stream.abort === 'function';
};

var isChildProcess = function(stream) {
	return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3
};

var eos = function(stream, opts, callback) {
	if (typeof opts === 'function') return eos(stream, null, opts);
	if (!opts) opts = {};

	callback = once(callback || noop);

	var ws = stream._writableState;
	var rs = stream._readableState;
	var readable = opts.readable || (opts.readable !== false && stream.readable);
	var writable = opts.writable || (opts.writable !== false && stream.writable);

	var onlegacyfinish = function() {
		if (!stream.writable) onfinish();
	};

	var onfinish = function() {
		writable = false;
		if (!readable) callback.call(stream);
	};

	var onend = function() {
		readable = false;
		if (!writable) callback.call(stream);
	};

	var onexit = function(exitCode) {
		callback.call(stream, exitCode ? new Error('exited with error code: ' + exitCode) : null);
	};

	var onclose = function() {
		if (readable && !(rs && rs.ended)) return callback.call(stream, new Error('premature close'));
		if (writable && !(ws && ws.ended)) return callback.call(stream, new Error('premature close'));
	};

	var onrequest = function() {
		stream.req.on('finish', onfinish);
	};

	if (isRequest(stream)) {
		stream.on('complete', onfinish);
		stream.on('abort', onclose);
		if (stream.req) onrequest();
		else stream.on('request', onrequest);
	} else if (writable && !ws) { // legacy streams
		stream.on('end', onlegacyfinish);
		stream.on('close', onlegacyfinish);
	}

	if (isChildProcess(stream)) stream.on('exit', onexit);

	stream.on('end', onend);
	stream.on('finish', onfinish);
	if (opts.error !== false) stream.on('error', callback);
	stream.on('close', onclose);

	return function() {
		stream.removeListener('complete', onfinish);
		stream.removeListener('abort', onclose);
		stream.removeListener('request', onrequest);
		if (stream.req) stream.req.removeListener('finish', onfinish);
		stream.removeListener('end', onlegacyfinish);
		stream.removeListener('close', onlegacyfinish);
		stream.removeListener('finish', onfinish);
		stream.removeListener('exit', onexit);
		stream.removeListener('end', onend);
		stream.removeListener('error', callback);
		stream.removeListener('close', onclose);
	};
};

module.exports = eos;

},{"once":66}],22:[function(require,module,exports){
'use strict';

var util = require('util');
var isArrayish = require('is-arrayish');

var errorEx = function errorEx(name, properties) {
	if (!name || name.constructor !== String) {
		properties = name || {};
		name = Error.name;
	}

	var errorExError = function ErrorEXError(message) {
		if (!this) {
			return new ErrorEXError(message);
		}

		message = message instanceof Error
			? message.message
			: (message || this.message);

		Error.call(this, message);
		Error.captureStackTrace(this, errorExError);

		this.name = name;

		Object.defineProperty(this, 'message', {
			configurable: true,
			enumerable: false,
			get: function () {
				var newMessage = message.split(/\r?\n/g);

				for (var key in properties) {
					if (!properties.hasOwnProperty(key)) {
						continue;
					}

					var modifier = properties[key];

					if ('message' in modifier) {
						newMessage = modifier.message(this[key], newMessage) || newMessage;
						if (!isArrayish(newMessage)) {
							newMessage = [newMessage];
						}
					}
				}

				return newMessage.join('\n');
			},
			set: function (v) {
				message = v;
			}
		});

		var stackDescriptor = Object.getOwnPropertyDescriptor(this, 'stack');
		var stackGetter = stackDescriptor.get;
		var stackValue = stackDescriptor.value;
		delete stackDescriptor.value;
		delete stackDescriptor.writable;

		stackDescriptor.get = function () {
			var stack = (stackGetter)
				? stackGetter.call(this).split(/\r?\n+/g)
				: stackValue.split(/\r?\n+/g);

			// starting in Node 7, the stack builder caches the message.
			// just replace it.
			stack[0] = this.name + ': ' + this.message;

			var lineCount = 1;
			for (var key in properties) {
				if (!properties.hasOwnProperty(key)) {
					continue;
				}

				var modifier = properties[key];

				if ('line' in modifier) {
					var line = modifier.line(this[key]);
					if (line) {
						stack.splice(lineCount++, 0, '    ' + line);
					}
				}

				if ('stack' in modifier) {
					modifier.stack(this[key], stack);
				}
			}

			return stack.join('\n');
		};

		Object.defineProperty(this, 'stack', stackDescriptor);
	};

	if (Object.setPrototypeOf) {
		Object.setPrototypeOf(errorExError.prototype, Error.prototype);
		Object.setPrototypeOf(errorExError, Error);
	} else {
		util.inherits(errorExError, Error);
	}

	return errorExError;
};

errorEx.append = function (str, def) {
	return {
		message: function (v, message) {
			v = v || def;

			if (v) {
				message[0] += ' ' + str.replace('%s', v.toString());
			}

			return message;
		}
	};
};

errorEx.line = function (str, def) {
	return {
		line: function (v) {
			v = v || def;

			if (v) {
				return str.replace('%s', v.toString());
			}

			return null;
		}
	};
};

module.exports = errorEx;

},{"is-arrayish":47,"util":128}],23:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],24:[function(require,module,exports){
(function (process){
'use strict';
var got = require('got');
var objectAssign = require('object-assign');

function ghGot(path, opts, cb) {
	if (!path) {
		throw new Error('path required');
	}

	if (typeof opts === 'function') {
		cb = opts;
		opts = {};
	}

	opts = objectAssign({json: true}, opts);

	opts.headers = objectAssign({
		accept: 'application/vnd.github.v3+json',
		'user-agent': 'https://github.com/sindresorhus/gh-got'
	}, opts.headers);

	var env = process.env;
	var token = env.GITHUB_TOKEN || opts.token;

	if (token) {
		opts.headers.authorization = 'token ' + token;
	}

	// https://developer.github.com/v3/#http-verbs
	if (opts.method && opts.method.toLowerCase() === 'put' && !opts.body) {
		opts.headers['content-length'] = 0;
	}

	var endpoint = env.GITHUB_ENDPOINT ? env.GITHUB_ENDPOINT.replace(/[^/]$/, '$&/') : opts.endpoint;
	var url = (endpoint || 'https://api.github.com/') + path;

	return got(url, opts, cb);
}

[
	'get',
	'post',
	'put',
	'patch',
	'head',
	'delete'
].forEach(function (el) {
	ghGot[el] = function (url, opts, cb) {
		return ghGot(url, objectAssign({}, opts, {method: el.toUpperCase()}), cb);
	};
});

module.exports = ghGot;

}).call(this,require('_process'))
},{"_process":86,"got":35,"object-assign":25}],25:[function(require,module,exports){
'use strict';

function ToObject(val) {
	if (val == null) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

module.exports = Object.assign || function (target, source) {
	var from;
	var keys;
	var to = ToObject(target);

	for (var s = 1; s < arguments.length; s++) {
		from = arguments[s];
		keys = Object.keys(Object(from));

		for (var i = 0; i < keys.length; i++) {
			to[keys[i]] = from[keys[i]];
		}
	}

	return to;
};

},{}],26:[function(require,module,exports){
'use strict';
var emailRegex = require('email-regex');
var githubUsername= require('github-username');
var ghGot = require('gh-got');

module.exports = function (str, token, cb) {

	if (typeof token === 'function') {
		cb = token;
		token = {};
	}

	if (typeof str !== 'string') {
		throw new TypeError('Expected a string');
	}

	var fetchAvatar =  function (err, data) {
		if(err) return cb(err,null);
		return cb(null,data.avatar_url)
	};

	emailRegex({exact: true}).test(str) ?
	githubUsername(str,function(err,userName){
		ghGot('users/' + userName, token, fetchAvatar)
	}) : ghGot('users/' + str, token, fetchAvatar);
	
};

},{"email-regex":20,"gh-got":24,"github-username":27}],27:[function(require,module,exports){
'use strict';
var ghGot = require('gh-got');

module.exports = function (email, token, cb) {
	if (typeof email !== 'string' || email.indexOf('@') === -1) {
		throw new Error('`email` required');
	}

	if (typeof token === 'function') {
		cb = token;
		token = null;
	}

	ghGot('search/users', {
		token: token,
		query: {
			q: email + ' in:email'
		},
		headers: {
			'user-agent': 'https://github.com/sindresorhus/github-username'
		}
	}).then(function (result) {
		var data = result.body;

		if (data.total_count === 0) {
			cb(new Error('Couldn\'t find a username for the supplied email'));
			return;
		}

		cb(null, data.items[0].login);
	}).catch(cb);
};

},{"gh-got":29}],28:[function(require,module,exports){
"use strict";

var stream = require("readable-stream");

function DuplexWrapper(options, writable, readable) {
  if (typeof readable === "undefined") {
    readable = writable;
    writable = options;
    options = null;
  }

  stream.Duplex.call(this, options);

  if (typeof readable.read !== "function") {
    readable = (new stream.Readable(options)).wrap(readable);
  }

  this._writable = writable;
  this._readable = readable;
  this._waiting = false;

  var self = this;

  writable.once("finish", function() {
    self.end();
  });

  this.once("finish", function() {
    writable.end();
  });

  readable.on("readable", function() {
    if (self._waiting) {
      self._waiting = false;
      self._read();
    }
  });

  readable.once("end", function() {
    self.push(null);
  });

  if (!options || typeof options.bubbleErrors === "undefined" || options.bubbleErrors) {
    writable.on("error", function(err) {
      self.emit("error", err);
    });

    readable.on("error", function(err) {
      self.emit("error", err);
    });
  }
}

DuplexWrapper.prototype = Object.create(stream.Duplex.prototype, {constructor: {value: DuplexWrapper}});

DuplexWrapper.prototype._write = function _write(input, encoding, done) {
  this._writable.write(input, encoding, done);
};

DuplexWrapper.prototype._read = function _read() {
  var buf;
  var reads = 0;
  while ((buf = this._readable.read()) !== null) {
    this.push(buf);
    reads++;
  }
  if (reads === 0) {
    this._waiting = true;
  }
};

module.exports = function duplex2(options, writable, readable) {
  return new DuplexWrapper(options, writable, readable);
};

module.exports.DuplexWrapper = DuplexWrapper;

},{"readable-stream":97}],29:[function(require,module,exports){
(function (process){
'use strict';
var got = require('got');
var objectAssign = require('object-assign');
var Promise = require('pinkie-promise');

function ghGot(path, opts) {
	if (typeof path !== 'string') {
		return Promise.reject(new TypeError('Path should be a string'));
	}

	opts = objectAssign({json: true, endpoint: 'https://api.github.com/'}, opts);

	opts.headers = objectAssign({
		'accept': 'application/vnd.github.v3+json',
		'user-agent': 'https://github.com/sindresorhus/gh-got'
	}, opts.headers);

	var env = process.env;
	var token = env.GITHUB_TOKEN || opts.token;

	if (token) {
		opts.headers.authorization = 'token ' + token;
	}

	// https://developer.github.com/v3/#http-verbs
	if (opts.method && opts.method.toLowerCase() === 'put' && !opts.body) {
		opts.headers['content-length'] = 0;
	}

	var endpoint = env.GITHUB_ENDPOINT ? env.GITHUB_ENDPOINT.replace(/[^/]$/, '$&/') : opts.endpoint;
	var url = /https?/.test(path) ? path : endpoint + path;

	if (opts.stream) {
		return got.stream(url, opts);
	}

	return got(url, opts);
}

var helpers = [
	'get',
	'post',
	'put',
	'patch',
	'head',
	'delete'
];

helpers.forEach(function (el) {
	ghGot[el] = function (url, opts) {
		return ghGot(url, objectAssign({}, opts, {method: el.toUpperCase()}));
	};
});

ghGot.stream = function (url, opts) {
	return ghGot(url, objectAssign({}, opts, {json: false, stream: true}));
};

helpers.forEach(function (el) {
	ghGot.stream[el] = function (url, opts) {
		return ghGot.stream(url, objectAssign({}, opts, {method: el.toUpperCase()}));
	};
});

module.exports = ghGot;

}).call(this,require('_process'))
},{"_process":86,"got":30,"object-assign":64,"pinkie-promise":82}],30:[function(require,module,exports){
(function (Buffer){
'use strict';

var EventEmitter = require('events').EventEmitter;
var http = require('http');
var https = require('https');
var urlLib = require('url');
var querystring = require('querystring');
var objectAssign = require('object-assign');
var PassThrough = require('readable-stream').PassThrough;
var duplexer2 = require('duplexer2');
var isStream = require('is-stream');
var readAllStream = require('read-all-stream');
var timedOut = require('timed-out');
var urlParseLax = require('url-parse-lax');
var lowercaseKeys = require('lowercase-keys');
var isRedirect = require('is-redirect');
var PinkiePromise = require('pinkie-promise');
var unzipResponse = require('unzip-response');
var createErrorClass = require('create-error-class');
var nodeStatusCodes = require('node-status-codes');
var parseJson = require('parse-json');
var isRetryAllowed = require('is-retry-allowed');
var pkg = require('./package.json');

function requestAsEventEmitter(opts) {
	opts = opts || {};

	var ee = new EventEmitter();
	var requestUrl = opts.href || urlLib.resolve(urlLib.format(opts), opts.path);
	var redirectCount = 0;
	var retryCount = 0;
	var redirectUrl;

	var get = function (opts) {
		var fn = opts.protocol === 'https:' ? https : http;

		var req = fn.request(opts, function (res) {
			var statusCode = res.statusCode;

			if (isRedirect(statusCode) && opts.followRedirect && 'location' in res.headers && (opts.method === 'GET' || opts.method === 'HEAD')) {
				res.resume();

				if (++redirectCount > 10) {
					ee.emit('error', new got.MaxRedirectsError(statusCode, opts), null, res);
					return;
				}

				redirectUrl = urlLib.resolve(urlLib.format(opts), res.headers.location);
				var redirectOpts = objectAssign({}, opts, urlLib.parse(redirectUrl));

				ee.emit('redirect', res, redirectOpts);

				get(redirectOpts);
				return;
			}

			// do not write ee.bind(...) instead of function - it will break gzip in Node.js 0.10
			setImmediate(function () {
				var response = typeof unzipResponse === 'function' && req.method !== 'HEAD' ? unzipResponse(res) : res;
				response.url = redirectUrl || requestUrl;
				response.requestUrl = requestUrl;

				ee.emit('response', response);
			});
		});

		req.once('error', function (err) {
			var backoff = opts.retries(++retryCount, err);
			if (backoff) {
				setTimeout(get, backoff, opts);
				return;
			}

			ee.emit('error', new got.RequestError(err, opts));
		});

		if (opts.timeout) {
			timedOut(req, opts.timeout);
		}

		setImmediate(ee.emit.bind(ee), 'request', req);
	};

	get(opts);
	return ee;
}

function asCallback(opts, cb) {
	var ee = requestAsEventEmitter(opts);

	ee.on('request', function (req) {
		if (isStream(opts.body)) {
			opts.body.pipe(req);
			opts.body = undefined;
			return;
		}

		req.end(opts.body);
	});

	ee.on('response', function (res) {
		readAllStream(res, opts.encoding, function (error, data) {
			var statusCode = res.statusCode;
			var limitStatusCode = opts.followRedirect ? 299 : 399;

			if (error) {
				cb(new got.ReadError(error, opts), null, res);
				return;
			}

			if (statusCode < 200 || statusCode > limitStatusCode) {
				error = new got.HTTPError(statusCode, opts);
			}

			if (opts.json && data) {
				try {
					data = parseJson(data);
				} catch (err) {
					err.fileName = urlLib.format(opts);
					error = new got.ParseError(err, statusCode, opts);
				}
			}

			cb(error, data, res);
		});
	});

	ee.on('error', cb);
}

function asPromise(opts) {
	return new PinkiePromise(function (resolve, reject) {
		asCallback(opts, function (err, data, response) {
			if (response) {
				response.body = data;
			}

			if (err) {
				Object.defineProperty(err, 'response', {
					value: response,
					enumerable: false
				});
				reject(err);
				return;
			}

			resolve(response);
		});
	});
}

function asStream(opts) {
	var input = new PassThrough();
	var output = new PassThrough();
	var proxy = duplexer2(input, output);

	if (opts.json) {
		throw new Error('got can not be used as stream when options.json is used');
	}

	if (opts.body) {
		proxy.write = function () {
			throw new Error('got\'s stream is not writable when options.body is used');
		};
	}

	var ee = requestAsEventEmitter(opts);

	ee.on('request', function (req) {
		proxy.emit('request', req);

		if (isStream(opts.body)) {
			opts.body.pipe(req);
			return;
		}

		if (opts.body) {
			req.end(opts.body);
			return;
		}

		if (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH') {
			input.pipe(req);
			return;
		}

		req.end();
	});

	ee.on('response', function (res) {
		var statusCode = res.statusCode;
		var limitStatusCode = opts.followRedirect ? 299 : 399;

		res.pipe(output);

		if (statusCode < 200 || statusCode > limitStatusCode) {
			proxy.emit('error', new got.HTTPError(statusCode, opts), null, res);
			return;
		}

		proxy.emit('response', res);
	});

	ee.on('redirect', proxy.emit.bind(proxy, 'redirect'));

	ee.on('error', proxy.emit.bind(proxy, 'error'));

	return proxy;
}

function normalizeArguments(url, opts) {
	if (typeof url !== 'string' && typeof url !== 'object') {
		throw new Error('Parameter `url` must be a string or object, not ' + typeof url);
	}

	if (typeof url === 'string') {
		url = url.replace(/^unix:/, 'http://$&');
		url = urlParseLax(url);

		if (url.auth) {
			throw new Error('Basic authentication must be done with auth option');
		}
	}

	opts = objectAssign(
		{protocol: 'http:', path: '', retries: 5},
		url,
		opts
	);

	opts.headers = objectAssign({
		'user-agent': pkg.name + '/' + pkg.version + ' (https://github.com/sindresorhus/got)',
		'accept-encoding': 'gzip,deflate'
	}, lowercaseKeys(opts.headers));

	var query = opts.query;

	if (query) {
		if (typeof query !== 'string') {
			opts.query = querystring.stringify(query);
		}

		opts.path = opts.path.split('?')[0] + '?' + opts.query;
		delete opts.query;
	}

	if (opts.json && opts.headers.accept === undefined) {
		opts.headers.accept = 'application/json';
	}

	var body = opts.body;

	if (body) {
		if (typeof body !== 'string' && !(body !== null && typeof body === 'object')) {
			throw new Error('options.body must be a ReadableStream, string, Buffer or plain Object');
		}

		opts.method = opts.method || 'POST';

		if (isStream(body) && typeof body.getBoundary === 'function') {
			// Special case for https://github.com/form-data/form-data
			opts.headers['content-type'] = opts.headers['content-type'] || 'multipart/form-data; boundary=' + body.getBoundary();
		} else if (body !== null && typeof body === 'object' && !Buffer.isBuffer(body) && !isStream(body)) {
			opts.headers['content-type'] = opts.headers['content-type'] || 'application/x-www-form-urlencoded';
			body = opts.body = querystring.stringify(body);
		}

		if (opts.headers['content-length'] === undefined && opts.headers['transfer-encoding'] === undefined && !isStream(body)) {
			var length = typeof body === 'string' ? Buffer.byteLength(body) : body.length;
			opts.headers['content-length'] = length;
		}
	}

	opts.method = opts.method || 'GET';

	opts.method = opts.method.toUpperCase();

	if (opts.hostname === 'unix') {
		var matches = /(.+):(.+)/.exec(opts.path);

		if (matches) {
			opts.socketPath = matches[1];
			opts.path = matches[2];
			opts.host = null;
		}
	}

	if (typeof opts.retries !== 'function') {
		var retries = opts.retries;
		opts.retries = function backoff(iter, err) {
			if (iter > retries || !isRetryAllowed(err)) {
				return 0;
			}

			var noise = Math.random() * 100;
			return ((1 << iter) * 1000) + noise;
		};
	}

	if (opts.followRedirect === undefined) {
		opts.followRedirect = true;
	}

	return opts;
}

function got(url, opts, cb) {
	if (typeof opts === 'function') {
		cb = opts;
		opts = {};
	}

	if (cb) {
		asCallback(normalizeArguments(url, opts), cb);
		return null;
	}

	try {
		return asPromise(normalizeArguments(url, opts));
	} catch (err) {
		return PinkiePromise.reject(err);
	}
}

var helpers = [
	'get',
	'post',
	'put',
	'patch',
	'head',
	'delete'
];

helpers.forEach(function (el) {
	got[el] = function (url, opts, cb) {
		if (typeof opts === 'function') {
			cb = opts;
			opts = {};
		}

		return got(url, objectAssign({}, opts, {method: el}), cb);
	};
});

got.stream = function (url, opts, cb) {
	if (cb || typeof opts === 'function') {
		throw new Error('callback can not be used with stream mode');
	}

	return asStream(normalizeArguments(url, opts));
};

helpers.forEach(function (el) {
	got.stream[el] = function (url, opts, cb) {
		if (typeof opts === 'function') {
			cb = opts;
			opts = {};
		}

		return got.stream(url, objectAssign({}, opts, {method: el}), cb);
	};
});

function stdError(error, opts) {
	if (error.code !== undefined) {
		this.code = error.code;
	}

	objectAssign(this, {
		message: error.message,
		host: opts.host,
		hostname: opts.hostname,
		method: opts.method,
		path: opts.path
	});
}

got.RequestError = createErrorClass('RequestError', stdError);
got.ReadError = createErrorClass('ReadError', stdError);

got.ParseError = createErrorClass('ParseError', function (e, statusCode, opts) {
	stdError.call(this, e, opts);
	this.statusCode = statusCode;
	this.statusMessage = nodeStatusCodes[this.statusCode];
});

got.HTTPError = createErrorClass('HTTPError', function (statusCode, opts) {
	stdError.call(this, {}, opts);
	this.statusCode = statusCode;
	this.statusMessage = nodeStatusCodes[this.statusCode];
	this.message = 'Response code ' + this.statusCode + ' (' + this.statusMessage + ')';
});

got.MaxRedirectsError = createErrorClass('MaxRedirectsError', function (statusCode, opts) {
	stdError.call(this, {}, opts);
	this.statusCode = statusCode;
	this.statusMessage = nodeStatusCodes[this.statusCode];
	this.message = 'Redirected 10 times. Aborting.';
});

module.exports = got;

}).call(this,require("buffer").Buffer)
},{"./package.json":31,"buffer":11,"create-error-class":17,"duplexer2":28,"events":23,"http":104,"https":38,"is-redirect":49,"is-retry-allowed":50,"is-stream":51,"lowercase-keys":53,"node-status-codes":63,"object-assign":64,"parse-json":78,"pinkie-promise":82,"querystring":90,"read-all-stream":91,"readable-stream":97,"timed-out":32,"unzip-response":7,"url":123,"url-parse-lax":122}],31:[function(require,module,exports){
module.exports={
  "_from": "got@^5.2.0",
  "_id": "got@5.7.1",
  "_inBundle": false,
  "_integrity": "sha1-X4FjWmHkplifGAVp6k44FoClHzU=",
  "_location": "/github-username/got",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "got@^5.2.0",
    "name": "got",
    "escapedName": "got",
    "rawSpec": "^5.2.0",
    "saveSpec": null,
    "fetchSpec": "^5.2.0"
  },
  "_requiredBy": [
    "/github-username/gh-got"
  ],
  "_resolved": "https://registry.npmjs.org/got/-/got-5.7.1.tgz",
  "_shasum": "5f81635a61e4a6589f180569ea4e381680a51f35",
  "_spec": "got@^5.2.0",
  "_where": "/Users/joe/code/node_modules/minidocs-awesome/node_modules/github-username/node_modules/gh-got",
  "browser": {
    "unzip-response": false
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/got/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "create-error-class": "^3.0.1",
    "duplexer2": "^0.1.4",
    "is-redirect": "^1.0.0",
    "is-retry-allowed": "^1.0.0",
    "is-stream": "^1.0.0",
    "lowercase-keys": "^1.0.0",
    "node-status-codes": "^1.0.0",
    "object-assign": "^4.0.1",
    "parse-json": "^2.1.0",
    "pinkie-promise": "^2.0.0",
    "read-all-stream": "^3.0.0",
    "readable-stream": "^2.0.5",
    "timed-out": "^3.0.0",
    "unzip-response": "^1.0.2",
    "url-parse-lax": "^1.0.0"
  },
  "deprecated": false,
  "description": "Simplified HTTP/HTTPS requests",
  "devDependencies": {
    "ava": "^0.16.0",
    "coveralls": "^2.11.4",
    "form-data": "^2.1.1",
    "get-port": "^2.0.0",
    "get-stream": "^2.3.0",
    "into-stream": "^2.0.0",
    "nyc": "^8.1.0",
    "pem": "^1.4.4",
    "pify": "^2.3.0",
    "tempfile": "^1.1.1",
    "xo": "0.16.x"
  },
  "engines": {
    "node": ">=0.10.0 <7"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/sindresorhus/got#readme",
  "keywords": [
    "http",
    "https",
    "get",
    "got",
    "url",
    "uri",
    "request",
    "util",
    "utility",
    "simple",
    "curl",
    "wget",
    "fetch"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "sindresorhus.com"
    },
    {
      "name": "Vsevolod Strukchinsky",
      "email": "floatdrop@gmail.com",
      "url": "github.com/floatdrop"
    }
  ],
  "name": "got",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/got.git"
  },
  "scripts": {
    "coveralls": "nyc report --reporter=text-lcov | coveralls",
    "test": "xo && nyc ava"
  },
  "version": "5.7.1",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">=0.10.0 <7"
      },
      "pkgid": "got@5.7.1"
    }
  ],
  "xo": {
    "ignores": [
      "test/**"
    ]
  }
}

},{}],32:[function(require,module,exports){
'use strict';

module.exports = function (req, time) {
	if (req.timeoutTimer) {
		return req;
	}

	var delays = isNaN(time) ? time : {socket: time, connect: time};
	var host = req._headers ? (' to ' + req._headers.host) : '';

	if (delays.connect !== undefined) {
		req.timeoutTimer = setTimeout(function timeoutHandler() {
			req.abort();
			var e = new Error('Connection timed out on request' + host);
			e.code = 'ETIMEDOUT';
			req.emit('error', e);
		}, delays.connect);
	}

	// Clear the connection timeout timer once a socket is assigned to the
	// request and is connected.
	req.on('socket', function assign(socket) {
		// Socket may come from Agent pool and may be already connected.
		if (!(socket.connecting || socket._connecting)) {
			connect.call(socket);
			return;
		}

		socket.once('connect', connect);
	});

	function clear() {
		if (req.timeoutTimer) {
			clearTimeout(req.timeoutTimer);
			req.timeoutTimer = null;
		}
	}

	function connect() {
		clear();

		if (delays.socket !== undefined) {
			// Abort the request if there is no activity on the socket for more
			// than `delays.socket` milliseconds.
			this.setTimeout(delays.socket, function socketTimeoutHandler() {
				req.abort();
				var e = new Error('Socket timed out on request' + host);
				e.code = 'ESOCKETTIMEDOUT';
				req.emit('error', e);
			});
		}
	}

	return req.on('error', clear);
};

},{}],33:[function(require,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = require('min-document');

var doccy;

if (typeof document !== 'undefined') {
    doccy = document;
} else {
    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }
}

module.exports = doccy;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"min-document":7}],34:[function(require,module,exports){
(function (global){
var win;

if (typeof window !== "undefined") {
    win = window;
} else if (typeof global !== "undefined") {
    win = global;
} else if (typeof self !== "undefined"){
    win = self;
} else {
    win = {};
}

module.exports = win;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],35:[function(require,module,exports){
(function (process,Buffer){
'use strict';
var http = require('http');
var https = require('https');
var urlLib = require('url');
var util = require('util');
var zlib = require('zlib');
var querystring = require('querystring');
var objectAssign = require('object-assign');
var infinityAgent = require('infinity-agent');
var duplexify = require('duplexify');
var isStream = require('is-stream');
var readAllStream = require('read-all-stream');
var timedOut = require('timed-out');
var prependHttp = require('prepend-http');
var lowercaseKeys = require('lowercase-keys');
var isRedirect = require('is-redirect');
var NestedErrorStacks = require('nested-error-stacks');

function GotError(message, nested) {
	NestedErrorStacks.call(this, message, nested);
	objectAssign(this, nested, {nested: this.nested});
}

util.inherits(GotError, NestedErrorStacks);
GotError.prototype.name = 'GotError';

function got(url, opts, cb) {
	if (typeof url !== 'string' && typeof url !== 'object') {
		throw new GotError('Parameter `url` must be a string or object, not ' + typeof url);
	}

	if (typeof opts === 'function') {
		cb = opts;
		opts = {};
	}

	opts = objectAssign(
		{
			protocol: 'http:'
		},
		typeof url === 'string' ? urlLib.parse(prependHttp(url)) : url,
		opts
	);

	opts.headers = objectAssign({
		'user-agent': 'https://github.com/sindresorhus/got',
		'accept-encoding': 'gzip,deflate'
	}, lowercaseKeys(opts.headers));

	if (opts.pathname) {
		opts.path = opts.pathname;
	}

	if (opts.query) {
		if (typeof opts.query !== 'string') {
			opts.query = querystring.stringify(opts.query);
		}

		opts.path = opts.pathname + '?' + opts.query;
		delete opts.query;
	}

	var encoding = opts.encoding;
	var body = opts.body;
	var json = opts.json;
	var timeout = opts.timeout;
	var proxy;
	var redirectCount = 0;

	delete opts.encoding;
	delete opts.body;
	delete opts.json;
	delete opts.timeout;

	if (json) {
		opts.headers.accept = opts.headers.accept || 'application/json';
	}

	if (body) {
		if (typeof body !== 'string' && !Buffer.isBuffer(body) && !isStream.readable(body)) {
			throw new GotError('options.body must be a ReadableStream, string or Buffer');
		}

		opts.method = opts.method || 'POST';

		if (!opts.headers['content-length'] && !opts.headers['transfer-encoding'] && !isStream.readable(body)) {
			var length = typeof body === 'string' ? Buffer.byteLength(body) : body.length;
			opts.headers['content-length'] = length;
		}
	}

	opts.method = opts.method || 'GET';

	// returns a proxy stream to the response
	// if no callback has been provided
	if (!cb) {
		proxy = duplexify();

		// forward errors on the stream
		cb = function (err, data, response) {
			proxy.emit('error', err, data, response);
		};
	}

	if (proxy && json) {
		throw new GotError('got can not be used as stream when options.json is used');
	}

	function get(opts, cb) {
		var fn = opts.protocol === 'https:' ? https : http;
		var url = urlLib.format(opts);

		if (opts.agent === undefined) {
			opts.agent = infinityAgent[fn === https ? 'https' : 'http'].globalAgent;

			if (process.version.indexOf('v0.10') === 0 && fn === https && (
				typeof opts.ca !== 'undefined' ||
				typeof opts.cert !== 'undefined' ||
				typeof opts.ciphers !== 'undefined' ||
				typeof opts.key !== 'undefined' ||
				typeof opts.passphrase !== 'undefined' ||
				typeof opts.pfx !== 'undefined' ||
				typeof opts.rejectUnauthorized !== 'undefined')) {
				opts.agent = new infinityAgent.https.Agent({
					ca: opts.ca,
					cert: opts.cert,
					ciphers: opts.ciphers,
					key: opts.key,
					passphrase: opts.passphrase,
					pfx: opts.pfx,
					rejectUnauthorized: opts.rejectUnauthorized
				});
			}
		}

		var req = fn.request(opts, function (response) {
			var statusCode = response.statusCode;
			var res = response;

			// auto-redirect only for GET and HEAD methods
			if (isRedirect(statusCode) && 'location' in res.headers && (opts.method === 'GET' || opts.method === 'HEAD')) {
				// discard response
				res.resume();

				if (++redirectCount > 10) {
					cb(new GotError('Redirected 10 times. Aborting.'), undefined, res);
					return;
				}

				var redirectUrl = urlLib.resolve(url, res.headers.location);
				var redirectOpts = objectAssign({}, opts, urlLib.parse(redirectUrl));

				if (opts.agent === infinityAgent.http.globalAgent && redirectOpts.protocol === 'https:' && opts.protocol === 'http:') {
					redirectOpts.agent = undefined;
				}

				if (proxy) {
					proxy.emit('redirect', res, redirectOpts);
				}

				get(redirectOpts, cb);
				return;
			}

			if (proxy) {
				proxy.emit('response', res);
			}

			if (['gzip', 'deflate'].indexOf(res.headers['content-encoding']) !== -1) {
				res = res.pipe(zlib.createUnzip());
			}

			if (statusCode < 200 || statusCode > 299) {
				readAllStream(res, encoding, function (err, data) {
					err = new GotError(opts.method + ' ' + url + ' response code is ' + statusCode + ' (' + http.STATUS_CODES[statusCode] + ')', err);
					err.code = statusCode;

					if (data && json) {
						try {
							data = JSON.parse(data);
						} catch (e) {
							err = new GotError('Parsing ' + url + ' response failed', new GotError(e.message, err));
						}
					}

					cb(err, data, response);
				});

				return;
			}

			// pipe the response to the proxy if in proxy mode
			if (proxy) {
				proxy.setReadable(res);
				return;
			}

			readAllStream(res, encoding, function (err, data) {
				if (err) {
					err = new GotError('Reading ' + url + ' response failed', err);
				} else if (json && statusCode !== 204) {
					// only parse json if the option is enabled, and the response
					// is not a 204 (empty reponse)
					try {
						data = JSON.parse(data);
					} catch (e) {
						err = new GotError('Parsing ' + url + ' response failed', e);
					}
				}

				cb(err, data, response);
			});
		}).once('error', function (err) {
			cb(new GotError('Request to ' + url + ' failed', err));
		});

		if (timeout) {
			timedOut(req, timeout);
		}

		if (!proxy) {
			if (isStream.readable(body)) {
				body.pipe(req);
			} else {
				req.end(body);
			}

			return;
		}

		if (body) {
			proxy.write = function () {
				throw new Error('got\'s stream is not writable when options.body is used');
			};

			if (isStream.readable(body)) {
				body.pipe(req);
			} else {
				req.end(body);
			}

			return;
		}

		if (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH') {
			proxy.setWritable(req);
			return;
		}

		req.end();
	}

	get(opts, cb);

	return proxy;
}

[
	'get',
	'post',
	'put',
	'patch',
	'head',
	'delete'
].forEach(function (el) {
	got[el] = function (url, opts, cb) {
		if (typeof opts === 'function') {
			cb = opts;
			opts = {};
		}

		return got(url, objectAssign({}, opts, {method: el.toUpperCase()}), cb);
	};
});

module.exports = got;

}).call(this,require('_process'),require("buffer").Buffer)
},{"_process":86,"buffer":11,"duplexify":19,"http":104,"https":38,"infinity-agent":44,"is-redirect":49,"is-stream":51,"lowercase-keys":53,"nested-error-stacks":62,"object-assign":36,"prepend-http":84,"querystring":90,"read-all-stream":91,"timed-out":120,"url":123,"util":128,"zlib":9}],36:[function(require,module,exports){
'use strict';
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function ToObject(val) {
	if (val == null) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function ownEnumerableKeys(obj) {
	var keys = Object.getOwnPropertyNames(obj);

	if (Object.getOwnPropertySymbols) {
		keys = keys.concat(Object.getOwnPropertySymbols(obj));
	}

	return keys.filter(function (key) {
		return propIsEnumerable.call(obj, key);
	});
}

module.exports = Object.assign || function (target, source) {
	var from;
	var keys;
	var to = ToObject(target);

	for (var s = 1; s < arguments.length; s++) {
		from = arguments[s];
		keys = ownEnumerableKeys(Object(from));

		for (var i = 0; i < keys.length; i++) {
			to[keys[i]] = from[keys[i]];
		}
	}

	return to;
};

},{}],37:[function(require,module,exports){
module.exports = function hashMatch (hash, prefix) {
  var pre = prefix || '/';
  if (hash.length === 0) return pre;
  hash = hash.replace('#', '');
  hash = hash.replace(/\/$/, '')
  if (hash.indexOf('/') != 0) hash = '/' + hash;
  if (pre == '/') return hash;
  else return hash.replace(pre, '');
}

},{}],38:[function(require,module,exports){
var http = require('http');

var https = module.exports;

for (var key in http) {
    if (http.hasOwnProperty(key)) https[key] = http[key];
};

https.request = function (params, cb) {
    if (!params) params = {};
    params.scheme = 'https';
    params.protocol = 'https:';
    return http.request.call(this, params, cb);
}

},{"http":104}],39:[function(require,module,exports){
module.exports = attributeToProperty

var transform = {
  'class': 'className',
  'for': 'htmlFor',
  'http-equiv': 'httpEquiv'
}

function attributeToProperty (h) {
  return function (tagName, attrs, children) {
    for (var attr in attrs) {
      if (attr in transform) {
        attrs[transform[attr]] = attrs[attr]
        delete attrs[attr]
      }
    }
    return h(tagName, attrs, children)
  }
}

},{}],40:[function(require,module,exports){
var attrToProp = require('hyperscript-attribute-to-property')

var VAR = 0, TEXT = 1, OPEN = 2, CLOSE = 3, ATTR = 4
var ATTR_KEY = 5, ATTR_KEY_W = 6
var ATTR_VALUE_W = 7, ATTR_VALUE = 8
var ATTR_VALUE_SQ = 9, ATTR_VALUE_DQ = 10
var ATTR_EQ = 11, ATTR_BREAK = 12
var COMMENT = 13

module.exports = function (h, opts) {
  if (!opts) opts = {}
  var concat = opts.concat || function (a, b) {
    return String(a) + String(b)
  }
  if (opts.attrToProp !== false) {
    h = attrToProp(h)
  }

  return function (strings) {
    var state = TEXT, reg = ''
    var arglen = arguments.length
    var parts = []

    for (var i = 0; i < strings.length; i++) {
      if (i < arglen - 1) {
        var arg = arguments[i+1]
        var p = parse(strings[i])
        var xstate = state
        if (xstate === ATTR_VALUE_DQ) xstate = ATTR_VALUE
        if (xstate === ATTR_VALUE_SQ) xstate = ATTR_VALUE
        if (xstate === ATTR_VALUE_W) xstate = ATTR_VALUE
        if (xstate === ATTR) xstate = ATTR_KEY
        p.push([ VAR, xstate, arg ])
        parts.push.apply(parts, p)
      } else parts.push.apply(parts, parse(strings[i]))
    }

    var tree = [null,{},[]]
    var stack = [[tree,-1]]
    for (var i = 0; i < parts.length; i++) {
      var cur = stack[stack.length-1][0]
      var p = parts[i], s = p[0]
      if (s === OPEN && /^\//.test(p[1])) {
        var ix = stack[stack.length-1][1]
        if (stack.length > 1) {
          stack.pop()
          stack[stack.length-1][0][2][ix] = h(
            cur[0], cur[1], cur[2].length ? cur[2] : undefined
          )
        }
      } else if (s === OPEN) {
        var c = [p[1],{},[]]
        cur[2].push(c)
        stack.push([c,cur[2].length-1])
      } else if (s === ATTR_KEY || (s === VAR && p[1] === ATTR_KEY)) {
        var key = ''
        var copyKey
        for (; i < parts.length; i++) {
          if (parts[i][0] === ATTR_KEY) {
            key = concat(key, parts[i][1])
          } else if (parts[i][0] === VAR && parts[i][1] === ATTR_KEY) {
            if (typeof parts[i][2] === 'object' && !key) {
              for (copyKey in parts[i][2]) {
                if (parts[i][2].hasOwnProperty(copyKey) && !cur[1][copyKey]) {
                  cur[1][copyKey] = parts[i][2][copyKey]
                }
              }
            } else {
              key = concat(key, parts[i][2])
            }
          } else break
        }
        if (parts[i][0] === ATTR_EQ) i++
        var j = i
        for (; i < parts.length; i++) {
          if (parts[i][0] === ATTR_VALUE || parts[i][0] === ATTR_KEY) {
            if (!cur[1][key]) cur[1][key] = strfn(parts[i][1])
            else cur[1][key] = concat(cur[1][key], parts[i][1])
          } else if (parts[i][0] === VAR
          && (parts[i][1] === ATTR_VALUE || parts[i][1] === ATTR_KEY)) {
            if (!cur[1][key]) cur[1][key] = strfn(parts[i][2])
            else cur[1][key] = concat(cur[1][key], parts[i][2])
          } else {
            if (key.length && !cur[1][key] && i === j
            && (parts[i][0] === CLOSE || parts[i][0] === ATTR_BREAK)) {
              // https://html.spec.whatwg.org/multipage/infrastructure.html#boolean-attributes
              // empty string is falsy, not well behaved value in browser
              cur[1][key] = key.toLowerCase()
            }
            break
          }
        }
      } else if (s === ATTR_KEY) {
        cur[1][p[1]] = true
      } else if (s === VAR && p[1] === ATTR_KEY) {
        cur[1][p[2]] = true
      } else if (s === CLOSE) {
        if (selfClosing(cur[0]) && stack.length) {
          var ix = stack[stack.length-1][1]
          stack.pop()
          stack[stack.length-1][0][2][ix] = h(
            cur[0], cur[1], cur[2].length ? cur[2] : undefined
          )
        }
      } else if (s === VAR && p[1] === TEXT) {
        if (p[2] === undefined || p[2] === null) p[2] = ''
        else if (!p[2]) p[2] = concat('', p[2])
        if (Array.isArray(p[2][0])) {
          cur[2].push.apply(cur[2], p[2])
        } else {
          cur[2].push(p[2])
        }
      } else if (s === TEXT) {
        cur[2].push(p[1])
      } else if (s === ATTR_EQ || s === ATTR_BREAK) {
        // no-op
      } else {
        throw new Error('unhandled: ' + s)
      }
    }

    if (tree[2].length > 1 && /^\s*$/.test(tree[2][0])) {
      tree[2].shift()
    }

    if (tree[2].length > 2
    || (tree[2].length === 2 && /\S/.test(tree[2][1]))) {
      throw new Error(
        'multiple root elements must be wrapped in an enclosing tag'
      )
    }
    if (Array.isArray(tree[2][0]) && typeof tree[2][0][0] === 'string'
    && Array.isArray(tree[2][0][2])) {
      tree[2][0] = h(tree[2][0][0], tree[2][0][1], tree[2][0][2])
    }
    return tree[2][0]

    function parse (str) {
      var res = []
      if (state === ATTR_VALUE_W) state = ATTR
      for (var i = 0; i < str.length; i++) {
        var c = str.charAt(i)
        if (state === TEXT && c === '<') {
          if (reg.length) res.push([TEXT, reg])
          reg = ''
          state = OPEN
        } else if (c === '>' && !quot(state) && state !== COMMENT) {
          if (state === OPEN) {
            res.push([OPEN,reg])
          } else if (state === ATTR_KEY) {
            res.push([ATTR_KEY,reg])
          } else if (state === ATTR_VALUE && reg.length) {
            res.push([ATTR_VALUE,reg])
          }
          res.push([CLOSE])
          reg = ''
          state = TEXT
        } else if (state === COMMENT && /-$/.test(reg) && c === '-') {
          if (opts.comments) {
            res.push([ATTR_VALUE,reg.substr(0, reg.length - 1)],[CLOSE])
          }
          reg = ''
          state = TEXT
        } else if (state === OPEN && /^!--$/.test(reg)) {
          if (opts.comments) {
            res.push([OPEN, reg],[ATTR_KEY,'comment'],[ATTR_EQ])
          }
          reg = c
          state = COMMENT
        } else if (state === TEXT || state === COMMENT) {
          reg += c
        } else if (state === OPEN && /\s/.test(c)) {
          res.push([OPEN, reg])
          reg = ''
          state = ATTR
        } else if (state === OPEN) {
          reg += c
        } else if (state === ATTR && /[^\s"'=/]/.test(c)) {
          state = ATTR_KEY
          reg = c
        } else if (state === ATTR && /\s/.test(c)) {
          if (reg.length) res.push([ATTR_KEY,reg])
          res.push([ATTR_BREAK])
        } else if (state === ATTR_KEY && /\s/.test(c)) {
          res.push([ATTR_KEY,reg])
          reg = ''
          state = ATTR_KEY_W
        } else if (state === ATTR_KEY && c === '=') {
          res.push([ATTR_KEY,reg],[ATTR_EQ])
          reg = ''
          state = ATTR_VALUE_W
        } else if (state === ATTR_KEY) {
          reg += c
        } else if ((state === ATTR_KEY_W || state === ATTR) && c === '=') {
          res.push([ATTR_EQ])
          state = ATTR_VALUE_W
        } else if ((state === ATTR_KEY_W || state === ATTR) && !/\s/.test(c)) {
          res.push([ATTR_BREAK])
          if (/[\w-]/.test(c)) {
            reg += c
            state = ATTR_KEY
          } else state = ATTR
        } else if (state === ATTR_VALUE_W && c === '"') {
          state = ATTR_VALUE_DQ
        } else if (state === ATTR_VALUE_W && c === "'") {
          state = ATTR_VALUE_SQ
        } else if (state === ATTR_VALUE_DQ && c === '"') {
          res.push([ATTR_VALUE,reg],[ATTR_BREAK])
          reg = ''
          state = ATTR
        } else if (state === ATTR_VALUE_SQ && c === "'") {
          res.push([ATTR_VALUE,reg],[ATTR_BREAK])
          reg = ''
          state = ATTR
        } else if (state === ATTR_VALUE_W && !/\s/.test(c)) {
          state = ATTR_VALUE
          i--
        } else if (state === ATTR_VALUE && /\s/.test(c)) {
          res.push([ATTR_VALUE,reg],[ATTR_BREAK])
          reg = ''
          state = ATTR
        } else if (state === ATTR_VALUE || state === ATTR_VALUE_SQ
        || state === ATTR_VALUE_DQ) {
          reg += c
        }
      }
      if (state === TEXT && reg.length) {
        res.push([TEXT,reg])
        reg = ''
      } else if (state === ATTR_VALUE && reg.length) {
        res.push([ATTR_VALUE,reg])
        reg = ''
      } else if (state === ATTR_VALUE_DQ && reg.length) {
        res.push([ATTR_VALUE,reg])
        reg = ''
      } else if (state === ATTR_VALUE_SQ && reg.length) {
        res.push([ATTR_VALUE,reg])
        reg = ''
      } else if (state === ATTR_KEY) {
        res.push([ATTR_KEY,reg])
        reg = ''
      }
      return res
    }
  }

  function strfn (x) {
    if (typeof x === 'function') return x
    else if (typeof x === 'string') return x
    else if (x && typeof x === 'object') return x
    else return concat('', x)
  }
}

function quot (state) {
  return state === ATTR_VALUE_SQ || state === ATTR_VALUE_DQ
}

var hasOwn = Object.prototype.hasOwnProperty
function has (obj, key) { return hasOwn.call(obj, key) }

var closeRE = RegExp('^(' + [
  'area', 'base', 'basefont', 'bgsound', 'br', 'col', 'command', 'embed',
  'frame', 'hr', 'img', 'input', 'isindex', 'keygen', 'link', 'meta', 'param',
  'source', 'track', 'wbr', '!--',
  // SVG TAGS
  'animate', 'animateTransform', 'circle', 'cursor', 'desc', 'ellipse',
  'feBlend', 'feColorMatrix', 'feComposite',
  'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap',
  'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR',
  'feGaussianBlur', 'feImage', 'feMergeNode', 'feMorphology',
  'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile',
  'feTurbulence', 'font-face-format', 'font-face-name', 'font-face-uri',
  'glyph', 'glyphRef', 'hkern', 'image', 'line', 'missing-glyph', 'mpath',
  'path', 'polygon', 'polyline', 'rect', 'set', 'stop', 'tref', 'use', 'view',
  'vkern'
].join('|') + ')(?:[\.#][a-zA-Z0-9\u007F-\uFFFF_:-]+)*$')
function selfClosing (tag) { return closeRE.test(tag) }

},{"hyperscript-attribute-to-property":39}],41:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],42:[function(require,module,exports){
(function (process){
'use strict';

var net = require('net');
var util = require('util');
var EventEmitter = require('events').EventEmitter;

var debug;

if (util.debuglog) {
  debug = util.debuglog('http');
} else {
  debug = function (x) {
    if (process.env.NODE_DEBUG && /http/.test(process.env.NODE_DEBUG)) {
      console.error('HTTP: %s', x);
    }
  };
}

// New Agent code.

// The largest departure from the previous implementation is that
// an Agent instance holds connections for a variable number of host:ports.
// Surprisingly, this is still API compatible as far as third parties are
// concerned. The only code that really notices the difference is the
// request object.

// Another departure is that all code related to HTTP parsing is in
// ClientRequest.onSocket(). The Agent is now *strictly*
// concerned with managing a connection pool.

function Agent(options) {
  if (!(this instanceof Agent))
    return new Agent(options);

  EventEmitter.call(this);

  var self = this;

  self.defaultPort = 80;
  self.protocol = 'http:';

  self.options = util._extend({}, options);

  // don't confuse net and make it think that we're connecting to a pipe
  self.options.path = null;
  self.requests = {};
  self.sockets = {};
  self.freeSockets = {};
  self.keepAliveMsecs = self.options.keepAliveMsecs || 1000;
  self.keepAlive = self.options.keepAlive || false;
  self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets;
  self.maxFreeSockets = self.options.maxFreeSockets || 256;

  self.on('free', function(socket, options) {
    var name = self.getName(options);
    debug('agent.on(free)', name);

    if (!socket.destroyed &&
        self.requests[name] && self.requests[name].length) {
      self.requests[name].shift().onSocket(socket);
      if (self.requests[name].length === 0) {
        // don't leak
        delete self.requests[name];
      }
    } else {
      // If there are no pending requests, then put it in
      // the freeSockets pool, but only if we're allowed to do so.
      var req = socket._httpMessage;
      if (req &&
          req.shouldKeepAlive &&
          !socket.destroyed &&
          self.options.keepAlive) {
        var freeSockets = self.freeSockets[name];
        var freeLen = freeSockets ? freeSockets.length : 0;
        var count = freeLen;
        if (self.sockets[name])
          count += self.sockets[name].length;

        if (count >= self.maxSockets || freeLen >= self.maxFreeSockets) {
          self.removeSocket(socket, options);
          socket.destroy();
        } else {
          freeSockets = freeSockets || [];
          self.freeSockets[name] = freeSockets;
          socket.setKeepAlive(true, self.keepAliveMsecs);
          socket.unref();
          socket._httpMessage = null;
          self.removeSocket(socket, options);
          freeSockets.push(socket);
        }
      } else {
        self.removeSocket(socket, options);
        socket.destroy();
      }
    }
  });
}

util.inherits(Agent, EventEmitter);
exports.Agent = Agent;

Agent.defaultMaxSockets = Infinity;

Agent.prototype.createConnection = net.createConnection;

// Get the key for a given set of request options
Agent.prototype.getName = function(options) {
  var name = '';

  if (options.host)
    name += options.host;
  else
    name += 'localhost';

  name += ':';
  if (options.port)
    name += options.port;
  name += ':';
  if (options.localAddress)
    name += options.localAddress;
  name += ':';
  return name;
};

Agent.prototype.addRequest = function(req, options) {
  // Legacy API: addRequest(req, host, port, path)
  if (typeof options === 'string') {
    options = {
      host: options,
      port: arguments[2],
      path: arguments[3]
    };
  }

  // If we are not keepAlive agent and maxSockets is Infinity
  // then disable shouldKeepAlive
  if (!this.keepAlive && !Number.isFinite(this.maxSockets)) {
    req._last = true;
    req.shouldKeepAlive = false;
  }

  var name = this.getName(options);
  if (!this.sockets[name]) {
    this.sockets[name] = [];
  }

  var freeLen = this.freeSockets[name] ? this.freeSockets[name].length : 0;
  var sockLen = freeLen + this.sockets[name].length;

  if (freeLen) {
    // we have a free socket, so use that.
    var socket = this.freeSockets[name].shift();
    debug('have free socket');

    // don't leak
    if (!this.freeSockets[name].length)
      delete this.freeSockets[name];

    socket.ref();
    req.onSocket(socket);
    this.sockets[name].push(socket);
  } else if (sockLen < this.maxSockets) {
    debug('call onSocket', sockLen, freeLen);
    // If we are under maxSockets create a new one.
    req.onSocket(this.createSocket(req, options));
  } else {
    debug('wait for socket');
    // We are over limit so we'll add it to the queue.
    if (!this.requests[name]) {
      this.requests[name] = [];
    }
    this.requests[name].push(req);
  }
};

Agent.prototype.createSocket = function(req, options) {
  var self = this;
  options = util._extend({}, options);
  options = util._extend(options, self.options);

  if (!options.servername) {
    options.servername = options.host;
    if (req) {
      var hostHeader = req.getHeader('host');
      if (hostHeader) {
        options.servername = hostHeader.replace(/:.*$/, '');
      }
    }
  }

  var name = self.getName(options);

  debug('createConnection', name, options);
  options.encoding = null;
  var s = self.createConnection(options);
  if (!self.sockets[name]) {
    self.sockets[name] = [];
  }
  this.sockets[name].push(s);
  debug('sockets', name, this.sockets[name].length);

  function onFree() {
    self.emit('free', s, options);
  }
  s.on('free', onFree);

  function onClose(err) {
    debug('CLIENT socket onClose');
    // This is the only place where sockets get removed from the Agent.
    // If you want to remove a socket from the pool, just close it.
    // All socket errors end in a close event anyway.
    self.removeSocket(s, options);
  }
  s.on('close', onClose);

  function onRemove() {
    // We need this function for cases like HTTP 'upgrade'
    // (defined by WebSockets) where we need to remove a socket from the
    // pool because it'll be locked up indefinitely
    debug('CLIENT socket onRemove');
    self.removeSocket(s, options);
    s.removeListener('close', onClose);
    s.removeListener('free', onFree);
    s.removeListener('agentRemove', onRemove);
  }
  s.on('agentRemove', onRemove);
  return s;
};

Agent.prototype.removeSocket = function(s, options) {
  var name = this.getName(options);
  debug('removeSocket', name, 'destroyed:', s.destroyed);
  var sets = [this.sockets];

  // If the socket was destroyed, remove it from the free buffers too.
  if (s.destroyed)
    sets.push(this.freeSockets);

  for (var sk = 0; sk < sets.length; sk++) {
    var sockets = sets[sk];

    if (sockets[name]) {
      var index = sockets[name].indexOf(s);
      if (index !== -1) {
        sockets[name].splice(index, 1);
        // Don't leak
        if (sockets[name].length === 0)
          delete sockets[name];
      }
    }
  }

  if (this.requests[name] && this.requests[name].length) {
    debug('removeSocket, have a request, make a socket');
    var req = this.requests[name][0];
    // If we have pending requests and a socket gets closed make a new one
    this.createSocket(req, options).emit('free');
  }
};

Agent.prototype.destroy = function() {
  var sets = [this.freeSockets, this.sockets];
  for (var s = 0; s < sets.length; s++) {
    var set = sets[s];
    var keys = Object.keys(set);
    for (var v = 0; v < keys.length; v++) {
      var setName = set[keys[v]];
      for (var n = 0; n < setName.length; n++) {
        setName[n].destroy();
      }
    }
  }
};

exports.globalAgent = new Agent();

}).call(this,require('_process'))
},{"_process":86,"events":23,"net":10,"util":128}],43:[function(require,module,exports){
(function (process){
'use strict';

var tls = require('tls');
var http = require('./http.js');
var util = require('util');
var inherits = util.inherits;

var debug;

if (util.debuglog) {
  debug = util.debuglog('https');
} else {
  debug = function (x) {
    if (process.env.NODE_DEBUG && /http/.test(process.env.NODE_DEBUG)) {
      console.error('HTTPS: %s', x);
    }
  };
}
function createConnection(port, host, options) {
  if (port !== null && typeof port === 'object') {
    options = port;
  } else if (host !== null && typeof host === 'object') {
    options = host;
  } else if (options === null || typeof options !== 'object') {
    options = {};
  }

  if (typeof port === 'number') {
    options.port = port;
  }

  if (typeof host === 'string') {
    options.host = host;
  }

  debug('createConnection', options);
  return tls.connect(options);
}


function Agent(options) {
  http.Agent.call(this, options);
  this.defaultPort = 443;
  this.protocol = 'https:';
}
inherits(Agent, http.Agent);
Agent.prototype.createConnection = createConnection;

Agent.prototype.getName = function(options) {
  var name = http.Agent.prototype.getName.call(this, options);

  name += ':';
  if (options.ca)
    name += options.ca;

  name += ':';
  if (options.cert)
    name += options.cert;

  name += ':';
  if (options.ciphers)
    name += options.ciphers;

  name += ':';
  if (options.key)
    name += options.key;

  name += ':';
  if (options.pfx)
    name += options.pfx;

  name += ':';
  if (options.rejectUnauthorized !== undefined)
    name += options.rejectUnauthorized;

  return name;
};

var globalAgent = new Agent();

exports.globalAgent = globalAgent;
exports.Agent = Agent;

}).call(this,require('_process'))
},{"./http.js":42,"_process":86,"tls":10,"util":128}],44:[function(require,module,exports){
'use strict';

exports.http = require('./http.js');
exports.https = require('./https.js');

},{"./http.js":42,"./https.js":43}],45:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],46:[function(require,module,exports){
var containers = []; // will store container HTMLElement references
var styleElements = []; // will store {prepend: HTMLElement, append: HTMLElement}

function insertCss(css, options) {
    options = options || {};

    var position = options.prepend === true ? 'prepend' : 'append';
    var container = options.container !== undefined ? options.container : document.querySelector('head');
    var containerId = containers.indexOf(container);

    // first time we see this container, create the necessary entries
    if (containerId === -1) {
        containerId = containers.push(container) - 1;
        styleElements[containerId] = {};
    }

    // try to get the correponding container + position styleElement, create it otherwise
    var styleElement;

    if (styleElements[containerId] !== undefined && styleElements[containerId][position] !== undefined) {
        styleElement = styleElements[containerId][position];
    } else {
        styleElement = styleElements[containerId][position] = createStyleElement();

        if (position === 'prepend') {
            container.insertBefore(styleElement, container.childNodes[0]);
        } else {
            container.appendChild(styleElement);
        }
    }

    // strip potential UTF-8 BOM if css was read from a file
    if (css.charCodeAt(0) === 0xFEFF) { css = css.substr(1, css.length); }

    // actually add the stylesheet
    if (styleElement.styleSheet) {
        styleElement.styleSheet.cssText += css
    } else {
        styleElement.textContent += css;
    }

    return styleElement;
};

function createStyleElement() {
    var styleElement = document.createElement('style');
    styleElement.setAttribute('type', 'text/css');
    return styleElement;
}

module.exports = insertCss;
module.exports.insertCss = insertCss;

},{}],47:[function(require,module,exports){
'use strict';

module.exports = function isArrayish(obj) {
	if (!obj) {
		return false;
	}

	return obj instanceof Array || Array.isArray(obj) ||
		(obj.length >= 0 && obj.splice instanceof Function);
};

},{}],48:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],49:[function(require,module,exports){
'use strict';
module.exports = function (x) {
	if (typeof x !== 'number') {
		throw new TypeError('Expected a number');
	}

	return x === 300 ||
		x === 301 ||
		x === 302 ||
		x === 303 ||
		x === 305 ||
		x === 307 ||
		x === 308;
};

},{}],50:[function(require,module,exports){
'use strict';

var WHITELIST = [
	'ETIMEDOUT',
	'ECONNRESET',
	'EADDRINUSE',
	'ESOCKETTIMEDOUT',
	'ECONNREFUSED',
	'EPIPE'
];

var BLACKLIST = [
	'ENOTFOUND',
	'ENETUNREACH',

	// SSL errors from https://github.com/nodejs/node/blob/ed3d8b13ee9a705d89f9e0397d9e96519e7e47ac/src/node_crypto.cc#L1950
	'UNABLE_TO_GET_ISSUER_CERT',
	'UNABLE_TO_GET_CRL',
	'UNABLE_TO_DECRYPT_CERT_SIGNATURE',
	'UNABLE_TO_DECRYPT_CRL_SIGNATURE',
	'UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY',
	'CERT_SIGNATURE_FAILURE',
	'CRL_SIGNATURE_FAILURE',
	'CERT_NOT_YET_VALID',
	'CERT_HAS_EXPIRED',
	'CRL_NOT_YET_VALID',
	'CRL_HAS_EXPIRED',
	'ERROR_IN_CERT_NOT_BEFORE_FIELD',
	'ERROR_IN_CERT_NOT_AFTER_FIELD',
	'ERROR_IN_CRL_LAST_UPDATE_FIELD',
	'ERROR_IN_CRL_NEXT_UPDATE_FIELD',
	'OUT_OF_MEM',
	'DEPTH_ZERO_SELF_SIGNED_CERT',
	'SELF_SIGNED_CERT_IN_CHAIN',
	'UNABLE_TO_GET_ISSUER_CERT_LOCALLY',
	'UNABLE_TO_VERIFY_LEAF_SIGNATURE',
	'CERT_CHAIN_TOO_LONG',
	'CERT_REVOKED',
	'INVALID_CA',
	'PATH_LENGTH_EXCEEDED',
	'INVALID_PURPOSE',
	'CERT_UNTRUSTED',
	'CERT_REJECTED'
];

module.exports = function (err) {
	if (!err || !err.code) {
		return true;
	}

	if (WHITELIST.indexOf(err.code) !== -1) {
		return true;
	}

	if (BLACKLIST.indexOf(err.code) !== -1) {
		return false;
	}

	return true;
};

},{}],51:[function(require,module,exports){
'use strict';

var isStream = module.exports = function (stream) {
	return stream !== null && typeof stream === 'object' && typeof stream.pipe === 'function';
};

isStream.writable = function (stream) {
	return isStream(stream) && stream.writable !== false && typeof stream._write === 'function' && typeof stream._writableState === 'object';
};

isStream.readable = function (stream) {
	return isStream(stream) && stream.readable !== false && typeof stream._read === 'function' && typeof stream._readableState === 'object';
};

isStream.duplex = function (stream) {
	return isStream.writable(stream) && isStream.readable(stream);
};

isStream.transform = function (stream) {
	return isStream.duplex(stream) && typeof stream._transform === 'function' && typeof stream._transformState === 'object';
};

},{}],52:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],53:[function(require,module,exports){
'use strict';
module.exports = function (obj) {
	var ret = {};
	var keys = Object.keys(Object(obj));

	for (var i = 0; i < keys.length; i++) {
		ret[keys[i].toLowerCase()] = obj[keys[i]];
	}

	return ret;
};

},{}],54:[function(require,module,exports){
var choo = require('choo')

var main = require('./components/main')

module.exports = function (opts) {
  opts.basedir = (opts.basedir || '').replace(/\/$/, '')
  var app = choo()

  app.model({
    state: {
      title: opts.title,
      logo: opts.logo,
      contents: opts.contents,
      html: opts.html,
      routes: opts.routes,
      current: opts.initial,
      basedir: opts.basedir
    },
    reducers: {},
    subscriptions: [
      function catchLinks (send, done) {
        window.onclick = function (e) {
          var node = (function traverse (node) {
            if (!node) return
            if (node.localName !== 'a') return traverse(node.parentNode)
            if (node.href === undefined) return traverse(node.parentNode)
            if (window.location.host !== node.host) return traverse(node.parentNode)
            return node
          })(e.target)

          if (!node) return
          e.preventDefault()
          var href = node.href

          if (window.location.pathname !== node.pathname) {
            send('location:setLocation', { location: href }, done)
            window.history.pushState(null, null, href)
            document.body.scrollTop = 0
            var content = document.getElementById('minidocs-content')
            content.scrollTop = 0
          } else {
            window.location.hash = node.hash
            var el = document.querySelector(node.hash)
            window.scrollTo(0, el.offsetTop)
          }
        }
      }
    ]
  })

  app.model({
    namespace: 'menu',
    state: {
      open: false,
      size: 'small'
    },
    reducers: {
      toggle: function (data, state) {
        return {open: !state.open}
      },
      set: function (data, state) {
        return data
      },
      size: function (data, state) {
        return data
      }
    },
    subscriptions: [
      checkSize,
      function (send, done) {
        window.onresize = function () {
          checkSize(send, done)
        }
      }
    ]
  })

  function checkSize (send, done) {
    var size = window.innerWidth > 600 ? 'large' : 'small'
    send('menu:size', { size: size }, done)
  }

  app.router(function (route) {
    var routes = [
      route('/', main),
      route('/:page', main)
    ]

    if (opts.basedir) {
      return route(opts.basedir, routes)
    }

    return routes
  })

  return app
}

},{"./components/main":57,"choo":15}],55:[function(require,module,exports){
var html = require('choo/html')
var css = 0
var avatar = require('github-avatar-url')

module.exports = function (state, prev, send) {
  var currentPage = state.params.page || state.current
  var page = state.html[currentPage]
  var pageData = state.contents.filter(function (item) {
    return item.key === currentPage
  })[0]

  var prefix = ((null || true) && "_32076d68")

  var contentWrapper = html`<div></div>`
  contentWrapper.innerHTML = page

  var link = pageData.source ? html`<a class="markdown-link" href="${pageData.source}">source</a>` : ''

  function contributors (items) {
    return items.map(function (item) {
      if (!item) return
      var user = item.replace('@', '')
      var img = html`<img class="${prefix} contributor"></img>`
      img.style.opacity = 0
      avatar(user, function (err, url) {
        if (err) {
          // TODO: handle requests in effects, send error messages to state
          console.log(err)
        }
        img.src = url
        img.onload = function () {
          img.style.opacity = 1
        }
      })
      return html`<div class="${prefix} contributor-wrapper">
        <a href='https://github.com/${user}'>
          ${img}
        </a>
      </div>`
    })
  }

  if (pageData.contributors) {
    var contributorWrapper = html`<div class="${prefix} contributor-container">
      ${contributors(pageData.contributors)}
    </div>`
  }

  return html`<div class="${prefix} pa3 ph5-ns pv4-ns">
    ${link}
    ${contributorWrapper}
    ${contentWrapper}
  </div>`
}

},{"choo/html":14,"github-avatar-url":26,"insert-css":46}],56:[function(require,module,exports){
var html = require('choo/html')
var css = 0

module.exports = (state, prev, send) => {
  var prefix = ((null || true) && "_19f2d18a")

  return html`
  <header class="${prefix} minidocs-header ph4 w-100 bg-black-90">
    <nav class="flex justify-between">
      <div class="flex items-center">
        <div class="menu-button">
          <a class=" menu-toggle" onclick=${() => {send('menu:toggle')} }></a>
        </div>
        ${logo()}
      </div>
      <div class="minidocs-header-nav flex-grow flex items-center tr ttu">
        <a class="minidocs-header-link white dim link dn dib-ns mr3-ns" href="/install" title="Install">Install</a>
        <a class="minidocs-header-link white dim link dib mr3-ns" href="http://datproject.org/" title="Home">Home</a>
      </a>
    </nav>
  </header>`

  function logo () {
    if (!state.logo) {
      return html`
        <a class="inline-flex items-center" href="/" title="${state.title}">
          <span class="minidocs-header-title ml2 pr2 white">${state.title}</span>
        </a>
      `
    }

    return html`
      <a class="inline-flex items-center" href="/" title="${state.title}">
        <img class="minidocs-header-logo dib w2 h2" src="${state.basedir + '/' + state.logo}" alt="${state.title}"/>
        <span class="minidocs-header-title ml2 pr2 white">${state.title}</span>
      </a>
    `
  }
}

},{"choo/html":14,"insert-css":46}],57:[function(require,module,exports){
var html = require('choo/html')
var css = 0
var header = require('./header')
var sidebar = require('./sidebar')
var content = require('./content')

module.exports = function (state, prev, send) {
  ;((null || true) && "_01e59c26")
  var prefix = ((null || true) && "_d4e87350")

  return html`
    <div id="choo-root" class="${prefix} minidocs flex flex-column m0 h-100" onclick=${(e) => { checkMenu(e) }}>
      <div class="minidocs-header-flex flex">
        ${header(state, prev, send)}
      </div>
      <main class="minidocs-main-flex flex">
        ${createSidebar()}
        <div id="minidocs-content" class="minidocs-content-flex order-1 overflow-auto">
          ${content(state, prev, send)}
        </div>
      </main>
    </div>`

  function createSidebar () {
    if (typeof window !== 'undefined' && window.innerWidth <= 800) {
      if (!state.menu.open) return ''
    }

    return html`
      <div class="minidocs-sidebar-flex open order-0 overflow-auto bg-near-white">
        ${sidebar(state, prev, send)}
      </div>
    `
  }

  function checkMenu (e) {
    if (state.menu.open) return send('menu:set', { open: false })
  }
}

},{"./content":55,"./header":56,"./sidebar":58,"choo/html":14,"insert-css":46}],58:[function(require,module,exports){
var url = require('url')
var css = 0
var html = require('choo/html')

module.exports = function (state, prev, send) {
  var prefix = ((null || true) && "_068b628f")

  return html`
    <div class="${prefix} minidocs-menu pa3">
      ${createMenu(state.contents)}
    </div>
  `

  function createMenu (contents) {
    return contents.map(function (item) {
      // TODO: figure out a better way to get current page in state based on link click
      var current
      var location

      if (state.location && state.location.pathname) {
        location = url.parse(state.location.pathname)
        var sliceBy = state.basedir.length + 1
        current = location.pathname.slice(sliceBy)
      }

      if (!current || current.length <= 1) {
        current = state.current
      }

      if (isActive(current, item.key) && item.toc.length > 1) {
        return html`
          <div>
            <a href="${item.link}" class="content-link ${isActive(current, item.key)}">${item.name}</a>
            <div class="minidocs-menu-toc">
              ${item.toc.map(function (tocItem) {
                return (tocItem.level === 2) ? createTocItem(tocItem) : ''
              })}
            </div>
          </div>
        `
      }

      if (item.link) {
        return html`<div><a href="${item.link}" class="content-link ${isActive(current, item.key)}">${item.name}</a></div>`
      }

      return html`<div class="f3 pt2">${item.name}</div>`

      function createTocItem (tocItem) {
        if (tocItem.level === 1) return '' // Don't put title
        var depth = item.depth + (tocItem.level - 1) + 2
        return html`<a href="#${tocItem.slug}" class="f${depth} content-link">${tocItem.title}</a>`
      }
    })
  }

  function isActive (current, item) {
    return current === item ? 'active' : ''
  }
}

},{"choo/html":14,"insert-css":46,"url":123}],59:[function(require,module,exports){
var css = 0

var minidocs = require('./app')

module.exports = function (opts, callback) {
  var app = minidocs(opts)

  ;((null || true) && "_b9d1ef07")
  ;((null || true) && "_b8e1f1b6")
  ;((null || true) && "_3b66eb47")
  ;((null || true) && "_4337a147")

  return {
    app: app,
    start: function (id, opts) {
      if (typeof id === 'object') {
        opts = id
        id = null
      }
      if (!opts) opts = {}
      opts.href = opts.href || false
      return app.start(id, opts)
    }
  }
}

},{"./app":54,"insert-css":46}],60:[function(require,module,exports){
'use strict';

var range; // Create a range object for efficently rendering strings to elements.
var NS_XHTML = 'http://www.w3.org/1999/xhtml';

var doc = typeof document === 'undefined' ? undefined : document;

var testEl = doc ?
    doc.body || doc.createElement('div') :
    {};

// Fixes <https://github.com/patrick-steele-idem/morphdom/issues/32>
// (IE7+ support) <=IE7 does not support el.hasAttribute(name)
var actualHasAttributeNS;

if (testEl.hasAttributeNS) {
    actualHasAttributeNS = function(el, namespaceURI, name) {
        return el.hasAttributeNS(namespaceURI, name);
    };
} else if (testEl.hasAttribute) {
    actualHasAttributeNS = function(el, namespaceURI, name) {
        return el.hasAttribute(name);
    };
} else {
    actualHasAttributeNS = function(el, namespaceURI, name) {
        return el.getAttributeNode(namespaceURI, name) != null;
    };
}

var hasAttributeNS = actualHasAttributeNS;


function toElement(str) {
    if (!range && doc.createRange) {
        range = doc.createRange();
        range.selectNode(doc.body);
    }

    var fragment;
    if (range && range.createContextualFragment) {
        fragment = range.createContextualFragment(str);
    } else {
        fragment = doc.createElement('body');
        fragment.innerHTML = str;
    }
    return fragment.childNodes[0];
}

/**
 * Returns true if two node's names are the same.
 *
 * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same
 *       nodeName and different namespace URIs.
 *
 * @param {Element} a
 * @param {Element} b The target element
 * @return {boolean}
 */
function compareNodeNames(fromEl, toEl) {
    var fromNodeName = fromEl.nodeName;
    var toNodeName = toEl.nodeName;

    if (fromNodeName === toNodeName) {
        return true;
    }

    if (toEl.actualize &&
        fromNodeName.charCodeAt(0) < 91 && /* from tag name is upper case */
        toNodeName.charCodeAt(0) > 90 /* target tag name is lower case */) {
        // If the target element is a virtual DOM node then we may need to normalize the tag name
        // before comparing. Normal HTML elements that are in the "http://www.w3.org/1999/xhtml"
        // are converted to upper case
        return fromNodeName === toNodeName.toUpperCase();
    } else {
        return false;
    }
}

/**
 * Create an element, optionally with a known namespace URI.
 *
 * @param {string} name the element name, e.g. 'div' or 'svg'
 * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of
 * its `xmlns` attribute or its inferred namespace.
 *
 * @return {Element}
 */
function createElementNS(name, namespaceURI) {
    return !namespaceURI || namespaceURI === NS_XHTML ?
        doc.createElement(name) :
        doc.createElementNS(namespaceURI, name);
}

/**
 * Copies the children of one DOM element to another DOM element
 */
function moveChildren(fromEl, toEl) {
    var curChild = fromEl.firstChild;
    while (curChild) {
        var nextChild = curChild.nextSibling;
        toEl.appendChild(curChild);
        curChild = nextChild;
    }
    return toEl;
}

function morphAttrs(fromNode, toNode) {
    var attrs = toNode.attributes;
    var i;
    var attr;
    var attrName;
    var attrNamespaceURI;
    var attrValue;
    var fromValue;

    for (i = attrs.length - 1; i >= 0; --i) {
        attr = attrs[i];
        attrName = attr.name;
        attrNamespaceURI = attr.namespaceURI;
        attrValue = attr.value;

        if (attrNamespaceURI) {
            attrName = attr.localName || attrName;
            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);

            if (fromValue !== attrValue) {
                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);
            }
        } else {
            fromValue = fromNode.getAttribute(attrName);

            if (fromValue !== attrValue) {
                fromNode.setAttribute(attrName, attrValue);
            }
        }
    }

    // Remove any extra attributes found on the original DOM element that
    // weren't found on the target element.
    attrs = fromNode.attributes;

    for (i = attrs.length - 1; i >= 0; --i) {
        attr = attrs[i];
        if (attr.specified !== false) {
            attrName = attr.name;
            attrNamespaceURI = attr.namespaceURI;

            if (attrNamespaceURI) {
                attrName = attr.localName || attrName;

                if (!hasAttributeNS(toNode, attrNamespaceURI, attrName)) {
                    fromNode.removeAttributeNS(attrNamespaceURI, attrName);
                }
            } else {
                if (!hasAttributeNS(toNode, null, attrName)) {
                    fromNode.removeAttribute(attrName);
                }
            }
        }
    }
}

function syncBooleanAttrProp(fromEl, toEl, name) {
    if (fromEl[name] !== toEl[name]) {
        fromEl[name] = toEl[name];
        if (fromEl[name]) {
            fromEl.setAttribute(name, '');
        } else {
            fromEl.removeAttribute(name, '');
        }
    }
}

var specialElHandlers = {
    /**
     * Needed for IE. Apparently IE doesn't think that "selected" is an
     * attribute when reading over the attributes using selectEl.attributes
     */
    OPTION: function(fromEl, toEl) {
        syncBooleanAttrProp(fromEl, toEl, 'selected');
    },
    /**
     * The "value" attribute is special for the <input> element since it sets
     * the initial value. Changing the "value" attribute without changing the
     * "value" property will have no effect since it is only used to the set the
     * initial value.  Similar for the "checked" attribute, and "disabled".
     */
    INPUT: function(fromEl, toEl) {
        syncBooleanAttrProp(fromEl, toEl, 'checked');
        syncBooleanAttrProp(fromEl, toEl, 'disabled');

        if (fromEl.value !== toEl.value) {
            fromEl.value = toEl.value;
        }

        if (!hasAttributeNS(toEl, null, 'value')) {
            fromEl.removeAttribute('value');
        }
    },

    TEXTAREA: function(fromEl, toEl) {
        var newValue = toEl.value;
        if (fromEl.value !== newValue) {
            fromEl.value = newValue;
        }

        var firstChild = fromEl.firstChild;
        if (firstChild) {
            // Needed for IE. Apparently IE sets the placeholder as the
            // node value and vise versa. This ignores an empty update.
            var oldValue = firstChild.nodeValue;

            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {
                return;
            }

            firstChild.nodeValue = newValue;
        }
    },
    SELECT: function(fromEl, toEl) {
        if (!hasAttributeNS(toEl, null, 'multiple')) {
            var selectedIndex = -1;
            var i = 0;
            var curChild = toEl.firstChild;
            while(curChild) {
                var nodeName = curChild.nodeName;
                if (nodeName && nodeName.toUpperCase() === 'OPTION') {
                    if (hasAttributeNS(curChild, null, 'selected')) {
                        selectedIndex = i;
                        break;
                    }
                    i++;
                }
                curChild = curChild.nextSibling;
            }

            fromEl.selectedIndex = i;
        }
    }
};

var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;

function noop() {}

function defaultGetNodeKey(node) {
    return node.id;
}

function morphdomFactory(morphAttrs) {

    return function morphdom(fromNode, toNode, options) {
        if (!options) {
            options = {};
        }

        if (typeof toNode === 'string') {
            if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML') {
                var toNodeHtml = toNode;
                toNode = doc.createElement('html');
                toNode.innerHTML = toNodeHtml;
            } else {
                toNode = toElement(toNode);
            }
        }

        var getNodeKey = options.getNodeKey || defaultGetNodeKey;
        var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;
        var onNodeAdded = options.onNodeAdded || noop;
        var onBeforeElUpdated = options.onBeforeElUpdated || noop;
        var onElUpdated = options.onElUpdated || noop;
        var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;
        var onNodeDiscarded = options.onNodeDiscarded || noop;
        var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;
        var childrenOnly = options.childrenOnly === true;

        // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.
        var fromNodesLookup = {};
        var keyedRemovalList;

        function addKeyedRemoval(key) {
            if (keyedRemovalList) {
                keyedRemovalList.push(key);
            } else {
                keyedRemovalList = [key];
            }
        }

        function walkDiscardedChildNodes(node, skipKeyedNodes) {
            if (node.nodeType === ELEMENT_NODE) {
                var curChild = node.firstChild;
                while (curChild) {

                    var key = undefined;

                    if (skipKeyedNodes && (key = getNodeKey(curChild))) {
                        // If we are skipping keyed nodes then we add the key
                        // to a list so that it can be handled at the very end.
                        addKeyedRemoval(key);
                    } else {
                        // Only report the node as discarded if it is not keyed. We do this because
                        // at the end we loop through all keyed elements that were unmatched
                        // and then discard them in one final pass.
                        onNodeDiscarded(curChild);
                        if (curChild.firstChild) {
                            walkDiscardedChildNodes(curChild, skipKeyedNodes);
                        }
                    }

                    curChild = curChild.nextSibling;
                }
            }
        }

        /**
         * Removes a DOM node out of the original DOM
         *
         * @param  {Node} node The node to remove
         * @param  {Node} parentNode The nodes parent
         * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.
         * @return {undefined}
         */
        function removeNode(node, parentNode, skipKeyedNodes) {
            if (onBeforeNodeDiscarded(node) === false) {
                return;
            }

            if (parentNode) {
                parentNode.removeChild(node);
            }

            onNodeDiscarded(node);
            walkDiscardedChildNodes(node, skipKeyedNodes);
        }

        // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future
        // function indexTree(root) {
        //     var treeWalker = document.createTreeWalker(
        //         root,
        //         NodeFilter.SHOW_ELEMENT);
        //
        //     var el;
        //     while((el = treeWalker.nextNode())) {
        //         var key = getNodeKey(el);
        //         if (key) {
        //             fromNodesLookup[key] = el;
        //         }
        //     }
        // }

        // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future
        //
        // function indexTree(node) {
        //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);
        //     var el;
        //     while((el = nodeIterator.nextNode())) {
        //         var key = getNodeKey(el);
        //         if (key) {
        //             fromNodesLookup[key] = el;
        //         }
        //     }
        // }

        function indexTree(node) {
            if (node.nodeType === ELEMENT_NODE) {
                var curChild = node.firstChild;
                while (curChild) {
                    var key = getNodeKey(curChild);
                    if (key) {
                        fromNodesLookup[key] = curChild;
                    }

                    // Walk recursively
                    indexTree(curChild);

                    curChild = curChild.nextSibling;
                }
            }
        }

        indexTree(fromNode);

        function handleNodeAdded(el) {
            onNodeAdded(el);

            var curChild = el.firstChild;
            while (curChild) {
                var nextSibling = curChild.nextSibling;

                var key = getNodeKey(curChild);
                if (key) {
                    var unmatchedFromEl = fromNodesLookup[key];
                    if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {
                        curChild.parentNode.replaceChild(unmatchedFromEl, curChild);
                        morphEl(unmatchedFromEl, curChild);
                    }
                }

                handleNodeAdded(curChild);
                curChild = nextSibling;
            }
        }

        function morphEl(fromEl, toEl, childrenOnly) {
            var toElKey = getNodeKey(toEl);
            var curFromNodeKey;

            if (toElKey) {
                // If an element with an ID is being morphed then it is will be in the final
                // DOM so clear it out of the saved elements collection
                delete fromNodesLookup[toElKey];
            }

            if (toNode.isSameNode && toNode.isSameNode(fromNode)) {
                return;
            }

            if (!childrenOnly) {
                if (onBeforeElUpdated(fromEl, toEl) === false) {
                    return;
                }

                morphAttrs(fromEl, toEl);
                onElUpdated(fromEl);

                if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {
                    return;
                }
            }

            if (fromEl.nodeName !== 'TEXTAREA') {
                var curToNodeChild = toEl.firstChild;
                var curFromNodeChild = fromEl.firstChild;
                var curToNodeKey;

                var fromNextSibling;
                var toNextSibling;
                var matchingFromEl;

                outer: while (curToNodeChild) {
                    toNextSibling = curToNodeChild.nextSibling;
                    curToNodeKey = getNodeKey(curToNodeChild);

                    while (curFromNodeChild) {
                        fromNextSibling = curFromNodeChild.nextSibling;

                        if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {
                            curToNodeChild = toNextSibling;
                            curFromNodeChild = fromNextSibling;
                            continue outer;
                        }

                        curFromNodeKey = getNodeKey(curFromNodeChild);

                        var curFromNodeType = curFromNodeChild.nodeType;

                        var isCompatible = undefined;

                        if (curFromNodeType === curToNodeChild.nodeType) {
                            if (curFromNodeType === ELEMENT_NODE) {
                                // Both nodes being compared are Element nodes

                                if (curToNodeKey) {
                                    // The target node has a key so we want to match it up with the correct element
                                    // in the original DOM tree
                                    if (curToNodeKey !== curFromNodeKey) {
                                        // The current element in the original DOM tree does not have a matching key so
                                        // let's check our lookup to see if there is a matching element in the original
                                        // DOM tree
                                        if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {
                                            if (curFromNodeChild.nextSibling === matchingFromEl) {
                                                // Special case for single element removals. To avoid removing the original
                                                // DOM node out of the tree (since that can break CSS transitions, etc.),
                                                // we will instead discard the current node and wait until the next
                                                // iteration to properly match up the keyed target element with its matching
                                                // element in the original tree
                                                isCompatible = false;
                                            } else {
                                                // We found a matching keyed element somewhere in the original DOM tree.
                                                // Let's moving the original DOM node into the current position and morph
                                                // it.

                                                // NOTE: We use insertBefore instead of replaceChild because we want to go through
                                                // the `removeNode()` function for the node that is being discarded so that
                                                // all lifecycle hooks are correctly invoked
                                                fromEl.insertBefore(matchingFromEl, curFromNodeChild);

                                                fromNextSibling = curFromNodeChild.nextSibling;

                                                if (curFromNodeKey) {
                                                    // Since the node is keyed it might be matched up later so we defer
                                                    // the actual removal to later
                                                    addKeyedRemoval(curFromNodeKey);
                                                } else {
                                                    // NOTE: we skip nested keyed nodes from being removed since there is
                                                    //       still a chance they will be matched up later
                                                    removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);
                                                }

                                                curFromNodeChild = matchingFromEl;
                                            }
                                        } else {
                                            // The nodes are not compatible since the "to" node has a key and there
                                            // is no matching keyed node in the source tree
                                            isCompatible = false;
                                        }
                                    }
                                } else if (curFromNodeKey) {
                                    // The original has a key
                                    isCompatible = false;
                                }

                                isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);
                                if (isCompatible) {
                                    // We found compatible DOM elements so transform
                                    // the current "from" node to match the current
                                    // target DOM node.
                                    morphEl(curFromNodeChild, curToNodeChild);
                                }

                            } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {
                                // Both nodes being compared are Text or Comment nodes
                                isCompatible = true;
                                // Simply update nodeValue on the original node to
                                // change the text value
                                if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {
                                    curFromNodeChild.nodeValue = curToNodeChild.nodeValue;
                                }

                            }
                        }

                        if (isCompatible) {
                            // Advance both the "to" child and the "from" child since we found a match
                            curToNodeChild = toNextSibling;
                            curFromNodeChild = fromNextSibling;
                            continue outer;
                        }

                        // No compatible match so remove the old node from the DOM and continue trying to find a
                        // match in the original DOM. However, we only do this if the from node is not keyed
                        // since it is possible that a keyed node might match up with a node somewhere else in the
                        // target tree and we don't want to discard it just yet since it still might find a
                        // home in the final DOM tree. After everything is done we will remove any keyed nodes
                        // that didn't find a home
                        if (curFromNodeKey) {
                            // Since the node is keyed it might be matched up later so we defer
                            // the actual removal to later
                            addKeyedRemoval(curFromNodeKey);
                        } else {
                            // NOTE: we skip nested keyed nodes from being removed since there is
                            //       still a chance they will be matched up later
                            removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);
                        }

                        curFromNodeChild = fromNextSibling;
                    }

                    // If we got this far then we did not find a candidate match for
                    // our "to node" and we exhausted all of the children "from"
                    // nodes. Therefore, we will just append the current "to" node
                    // to the end
                    if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {
                        fromEl.appendChild(matchingFromEl);
                        morphEl(matchingFromEl, curToNodeChild);
                    } else {
                        var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);
                        if (onBeforeNodeAddedResult !== false) {
                            if (onBeforeNodeAddedResult) {
                                curToNodeChild = onBeforeNodeAddedResult;
                            }

                            if (curToNodeChild.actualize) {
                                curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);
                            }
                            fromEl.appendChild(curToNodeChild);
                            handleNodeAdded(curToNodeChild);
                        }
                    }

                    curToNodeChild = toNextSibling;
                    curFromNodeChild = fromNextSibling;
                }

                // We have processed all of the "to nodes". If curFromNodeChild is
                // non-null then we still have some from nodes left over that need
                // to be removed
                while (curFromNodeChild) {
                    fromNextSibling = curFromNodeChild.nextSibling;
                    if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {
                        // Since the node is keyed it might be matched up later so we defer
                        // the actual removal to later
                        addKeyedRemoval(curFromNodeKey);
                    } else {
                        // NOTE: we skip nested keyed nodes from being removed since there is
                        //       still a chance they will be matched up later
                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);
                    }
                    curFromNodeChild = fromNextSibling;
                }
            }

            var specialElHandler = specialElHandlers[fromEl.nodeName];
            if (specialElHandler) {
                specialElHandler(fromEl, toEl);
            }
        } // END: morphEl(...)

        var morphedNode = fromNode;
        var morphedNodeType = morphedNode.nodeType;
        var toNodeType = toNode.nodeType;

        if (!childrenOnly) {
            // Handle the case where we are given two DOM nodes that are not
            // compatible (e.g. <div> --> <span> or <div> --> TEXT)
            if (morphedNodeType === ELEMENT_NODE) {
                if (toNodeType === ELEMENT_NODE) {
                    if (!compareNodeNames(fromNode, toNode)) {
                        onNodeDiscarded(fromNode);
                        morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));
                    }
                } else {
                    // Going from an element node to a text node
                    morphedNode = toNode;
                }
            } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node
                if (toNodeType === morphedNodeType) {
                    if (morphedNode.nodeValue !== toNode.nodeValue) {
                        morphedNode.nodeValue = toNode.nodeValue;
                    }

                    return morphedNode;
                } else {
                    // Text node to something else
                    morphedNode = toNode;
                }
            }
        }

        if (morphedNode === toNode) {
            // The "to node" was not compatible with the "from node" so we had to
            // toss out the "from node" and use the "to node"
            onNodeDiscarded(fromNode);
        } else {
            morphEl(morphedNode, toNode, childrenOnly);

            // We now need to loop over any keyed nodes that might need to be
            // removed. We only do the removal if we know that the keyed node
            // never found a match. When a keyed node is matched up we remove
            // it out of fromNodesLookup and we use fromNodesLookup to determine
            // if a keyed node has been matched up or not
            if (keyedRemovalList) {
                for (var i=0, len=keyedRemovalList.length; i<len; i++) {
                    var elToRemove = fromNodesLookup[keyedRemovalList[i]];
                    if (elToRemove) {
                        removeNode(elToRemove, elToRemove.parentNode, false);
                    }
                }
            }
        }

        if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {
            if (morphedNode.actualize) {
                morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);
            }
            // If we had to swap out the from node with a new node because the old
            // node was not compatible with the target node then we need to
            // replace the old DOM node in the original DOM tree. This is only
            // possible if the original DOM node was part of a DOM tree which
            // we know is the case if it has a parent node.
            fromNode.parentNode.replaceChild(morphedNode, fromNode);
        }

        return morphedNode;
    };
}

var morphdom = morphdomFactory(morphAttrs);

module.exports = morphdom;

},{}],61:[function(require,module,exports){
var window = require('global/window')
var assert = require('assert')

module.exports = nanoraf

// Only call RAF when needed
// (fn, fn?) -> fn
function nanoraf (render, raf) {
  assert.equal(typeof render, 'function', 'nanoraf: render should be a function')
  assert.ok(typeof raf === 'function' || typeof raf === 'undefined', 'nanoraf: raf should be a function or undefined')

  raf = raf || window.requestAnimationFrame

  var inRenderingTransaction = false
  var redrawScheduled = false
  var currentState = null

  // pass new state to be rendered
  // (obj, obj?) -> null
  return function frame (state, prev) {
    assert.equal(typeof state, 'object', 'nanoraf: state should be an object')
    assert.equal(typeof prev, 'object', 'nanoraf: prev should be an object')
    assert.equal(inRenderingTransaction, false, 'nanoraf: new frame was created before previous frame finished')

    // request a redraw for next frame
    if (currentState === null && !redrawScheduled) {
      redrawScheduled = true

      raf(function redraw () {
        redrawScheduled = false
        if (!currentState) return

        inRenderingTransaction = true
        render(currentState, prev)
        inRenderingTransaction = false

        currentState = null
      })
    }

    // update data for redraw
    currentState = state
  }
}

},{"assert":2,"global/window":34}],62:[function(require,module,exports){
var inherits = require('inherits');

var NestedError = function (message, nested) {
    this.nested = nested;

    Error.captureStackTrace(this, this.constructor);

    var oldStackDescriptor = Object.getOwnPropertyDescriptor(this, 'stack');

    if (typeof message !== 'undefined') {
        Object.defineProperty(this, 'message', {
            value: message,
            writable: true,
            enumerable: false,
            configurable: true
        });
    }

    Object.defineProperties(this, {
        stack: {
            get: function () {
                var stack = oldStackDescriptor.get.call(this);
                if (this.nested) {
                    stack += '\nCaused By: ' + this.nested.stack;
                }
                return stack;
            }
        }

    });
};

inherits(NestedError, Error);
NestedError.prototype.name = 'NestedError';


module.exports = NestedError;

},{"inherits":45}],63:[function(require,module,exports){
'use strict';

// https://github.com/nodejs/io.js/commit/8be6060020
module.exports = {
	100: 'Continue',
	101: 'Switching Protocols',
	102: 'Processing',
	200: 'OK',
	201: 'Created',
	202: 'Accepted',
	203: 'Non-Authoritative Information',
	204: 'No Content',
	205: 'Reset Content',
	206: 'Partial Content',
	207: 'Multi-Status',
	300: 'Multiple Choices',
	301: 'Moved Permanently',
	302: 'Moved Temporarily',
	303: 'See Other',
	304: 'Not Modified',
	305: 'Use Proxy',
	307: 'Temporary Redirect',
	308: 'Permanent Redirect',
	400: 'Bad Request',
	401: 'Unauthorized',
	402: 'Payment Required',
	403: 'Forbidden',
	404: 'Not Found',
	405: 'Method Not Allowed',
	406: 'Not Acceptable',
	407: 'Proxy Authentication Required',
	408: 'Request Time-out',
	409: 'Conflict',
	410: 'Gone',
	411: 'Length Required',
	412: 'Precondition Failed',
	413: 'Request Entity Too Large',
	414: 'Request-URI Too Large',
	415: 'Unsupported Media Type',
	416: 'Requested Range Not Satisfiable',
	417: 'Expectation Failed',
	418: 'I\'m a teapot',
	422: 'Unprocessable Entity',
	423: 'Locked',
	424: 'Failed Dependency',
	425: 'Unordered Collection',
	426: 'Upgrade Required',
	428: 'Precondition Required',
	429: 'Too Many Requests',
	431: 'Request Header Fields Too Large',
	500: 'Internal Server Error',
	501: 'Not Implemented',
	502: 'Bad Gateway',
	503: 'Service Unavailable',
	504: 'Gateway Time-out',
	505: 'HTTP Version Not Supported',
	506: 'Variant Also Negotiates',
	507: 'Insufficient Storage',
	509: 'Bandwidth Limit Exceeded',
	510: 'Not Extended',
	511: 'Network Authentication Required'
};

},{}],64:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],65:[function(require,module,exports){
/* global MutationObserver */
var document = require('global/document')
var window = require('global/window')
var watch = Object.create(null)
var KEY_ID = 'onloadid' + (new Date() % 9e6).toString(36)
var KEY_ATTR = 'data-' + KEY_ID
var INDEX = 0

if (window && window.MutationObserver) {
  var observer = new MutationObserver(function (mutations) {
    if (Object.keys(watch).length < 1) return
    for (var i = 0; i < mutations.length; i++) {
      if (mutations[i].attributeName === KEY_ATTR) {
        eachAttr(mutations[i], turnon, turnoff)
        continue
      }
      eachMutation(mutations[i].removedNodes, turnoff)
      eachMutation(mutations[i].addedNodes, turnon)
    }
  })
  observer.observe(document.body, {
    childList: true,
    subtree: true,
    attributes: true,
    attributeOldValue: true,
    attributeFilter: [KEY_ATTR]
  })
}

module.exports = function onload (el, on, off, caller) {
  on = on || function () {}
  off = off || function () {}
  el.setAttribute(KEY_ATTR, 'o' + INDEX)
  watch['o' + INDEX] = [on, off, 0, caller || onload.caller]
  INDEX += 1
  return el
}

function turnon (index, el) {
  if (watch[index][0] && watch[index][2] === 0) {
    watch[index][0](el)
    watch[index][2] = 1
  }
}

function turnoff (index, el) {
  if (watch[index][1] && watch[index][2] === 1) {
    watch[index][1](el)
    watch[index][2] = 0
  }
}

function eachAttr (mutation, on, off) {
  var newValue = mutation.target.getAttribute(KEY_ATTR)
  if (sameOrigin(mutation.oldValue, newValue)) {
    watch[newValue] = watch[mutation.oldValue]
    return
  }
  if (watch[mutation.oldValue]) {
    off(mutation.oldValue, mutation.target)
  }
  if (watch[newValue]) {
    on(newValue, mutation.target)
  }
}

function sameOrigin (oldValue, newValue) {
  if (!oldValue || !newValue) return false
  return watch[oldValue][3] === watch[newValue][3]
}

function eachMutation (nodes, fn) {
  var keys = Object.keys(watch)
  for (var i = 0; i < nodes.length; i++) {
    if (nodes[i] && nodes[i].getAttribute && nodes[i].getAttribute(KEY_ATTR)) {
      var onloadid = nodes[i].getAttribute(KEY_ATTR)
      keys.forEach(function (k) {
        if (onloadid === k) {
          fn(k, nodes[i])
        }
      })
    }
    if (nodes[i].childNodes.length > 0) {
      eachMutation(nodes[i].childNodes, fn)
    }
  }
}

},{"global/document":33,"global/window":34}],66:[function(require,module,exports){
var wrappy = require('wrappy')
module.exports = wrappy(once)
module.exports.strict = wrappy(onceStrict)

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })

  Object.defineProperty(Function.prototype, 'onceStrict', {
    value: function () {
      return onceStrict(this)
    },
    configurable: true
  })
})

function once (fn) {
  var f = function () {
    if (f.called) return f.value
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  f.called = false
  return f
}

function onceStrict (fn) {
  var f = function () {
    if (f.called)
      throw new Error(f.onceError)
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  var name = fn.name || 'Function wrapped with `once`'
  f.onceError = name + " shouldn't be called more than once"
  f.called = false
  return f
}

},{"wrappy":131}],67:[function(require,module,exports){
'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');


exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (source.hasOwnProperty(p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);

},{}],68:[function(require,module,exports){
'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;

},{}],69:[function(require,module,exports){
'use strict';


module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

},{}],70:[function(require,module,exports){
'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.


// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;

},{}],71:[function(require,module,exports){
'use strict';

var utils   = require('../utils/common');
var trees   = require('./trees');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var msg     = require('./messages');

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
                );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

},{"../utils/common":67,"./adler32":68,"./crc32":70,"./messages":75,"./trees":76}],72:[function(require,module,exports){
'use strict';

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

},{}],73:[function(require,module,exports){
'use strict';


var utils         = require('../utils/common');
var adler32       = require('./adler32');
var crc32         = require('./crc32');
var inflate_fast  = require('./inffast');
var inflate_table = require('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
    case HEAD:
      if (state.wrap === 0) {
        state.mode = TYPEDO;
        break;
      }
      //=== NEEDBITS(16);
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//

        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = FLAGS;
        break;
      }
      state.flags = 0;           /* expect zlib header */
      if (state.head) {
        state.head.done = false;
      }
      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
        strm.msg = 'incorrect header check';
        state.mode = BAD;
        break;
      }
      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
      len = (hold & 0x0f)/*BITS(4)*/ + 8;
      if (state.wbits === 0) {
        state.wbits = len;
      }
      else if (len > state.wbits) {
        strm.msg = 'invalid window size';
        state.mode = BAD;
        break;
      }
      state.dmax = 1 << len;
      //Tracev((stderr, "inflate:   zlib header ok\n"));
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = hold & 0x200 ? DICTID : TYPE;
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      break;
    case FLAGS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.flags = hold;
      if ((state.flags & 0xff) !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      if (state.flags & 0xe000) {
        strm.msg = 'unknown header flags set';
        state.mode = BAD;
        break;
      }
      if (state.head) {
        state.head.text = ((hold >> 8) & 1);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = TIME;
      /* falls through */
    case TIME:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.time = hold;
      }
      if (state.flags & 0x0200) {
        //=== CRC4(state.check, hold)
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        hbuf[2] = (hold >>> 16) & 0xff;
        hbuf[3] = (hold >>> 24) & 0xff;
        state.check = crc32(state.check, hbuf, 4, 0);
        //===
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = OS;
      /* falls through */
    case OS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.xflags = (hold & 0xff);
        state.head.os = (hold >> 8);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = EXLEN;
      /* falls through */
    case EXLEN:
      if (state.flags & 0x0400) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length = hold;
        if (state.head) {
          state.head.extra_len = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      else if (state.head) {
        state.head.extra = null/*Z_NULL*/;
      }
      state.mode = EXTRA;
      /* falls through */
    case EXTRA:
      if (state.flags & 0x0400) {
        copy = state.length;
        if (copy > have) { copy = have; }
        if (copy) {
          if (state.head) {
            len = state.head.extra_len - state.length;
            if (!state.head.extra) {
              // Use untyped array for more conveniend processing later
              state.head.extra = new Array(state.head.extra_len);
            }
            utils.arraySet(
              state.head.extra,
              input,
              next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len
            );
            //zmemcpy(state.head.extra + len, next,
            //        len + copy > state.head.extra_max ?
            //        state.head.extra_max - len : copy);
          }
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          state.length -= copy;
        }
        if (state.length) { break inf_leave; }
      }
      state.length = 0;
      state.mode = NAME;
      /* falls through */
    case NAME:
      if (state.flags & 0x0800) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          // TODO: 2 or 1 bytes?
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.name_max*/)) {
            state.head.name += String.fromCharCode(len);
          }
        } while (len && copy < have);

        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.name = null;
      }
      state.length = 0;
      state.mode = COMMENT;
      /* falls through */
    case COMMENT:
      if (state.flags & 0x1000) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.comm_max*/)) {
            state.head.comment += String.fromCharCode(len);
          }
        } while (len && copy < have);
        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.comment = null;
      }
      state.mode = HCRC;
      /* falls through */
    case HCRC:
      if (state.flags & 0x0200) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.check & 0xffff)) {
          strm.msg = 'header crc mismatch';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      if (state.head) {
        state.head.hcrc = ((state.flags >> 9) & 1);
        state.head.done = true;
      }
      strm.adler = state.check = 0;
      state.mode = TYPE;
      break;
    case DICTID:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      strm.adler = state.check = zswap32(hold);
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = DICT;
      /* falls through */
    case DICT:
      if (state.havedict === 0) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        return Z_NEED_DICT;
      }
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      /* falls through */
    case TYPE:
      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case TYPEDO:
      if (state.last) {
        //--- BYTEBITS() ---//
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        state.mode = CHECK;
        break;
      }
      //=== NEEDBITS(3); */
      while (bits < 3) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.last = (hold & 0x01)/*BITS(1)*/;
      //--- DROPBITS(1) ---//
      hold >>>= 1;
      bits -= 1;
      //---//

      switch ((hold & 0x03)/*BITS(2)*/) {
      case 0:                             /* stored block */
        //Tracev((stderr, "inflate:     stored block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = STORED;
        break;
      case 1:                             /* fixed block */
        fixedtables(state);
        //Tracev((stderr, "inflate:     fixed codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = LEN_;             /* decode codes */
        if (flush === Z_TREES) {
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break inf_leave;
        }
        break;
      case 2:                             /* dynamic block */
        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = TABLE;
        break;
      case 3:
        strm.msg = 'invalid block type';
        state.mode = BAD;
      }
      //--- DROPBITS(2) ---//
      hold >>>= 2;
      bits -= 2;
      //---//
      break;
    case STORED:
      //--- BYTEBITS() ---// /* go to byte boundary */
      hold >>>= bits & 7;
      bits -= bits & 7;
      //---//
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
        strm.msg = 'invalid stored block lengths';
        state.mode = BAD;
        break;
      }
      state.length = hold & 0xffff;
      //Tracev((stderr, "inflate:       stored length %u\n",
      //        state.length));
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = COPY_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case COPY_:
      state.mode = COPY;
      /* falls through */
    case COPY:
      copy = state.length;
      if (copy) {
        if (copy > have) { copy = have; }
        if (copy > left) { copy = left; }
        if (copy === 0) { break inf_leave; }
        //--- zmemcpy(put, next, copy); ---
        utils.arraySet(output, input, next, copy, put);
        //---//
        have -= copy;
        next += copy;
        left -= copy;
        put += copy;
        state.length -= copy;
        break;
      }
      //Tracev((stderr, "inflate:       stored end\n"));
      state.mode = TYPE;
      break;
    case TABLE:
      //=== NEEDBITS(14); */
      while (bits < 14) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
//#ifndef PKZIP_BUG_WORKAROUND
      if (state.nlen > 286 || state.ndist > 30) {
        strm.msg = 'too many length or distance symbols';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracev((stderr, "inflate:       table sizes ok\n"));
      state.have = 0;
      state.mode = LENLENS;
      /* falls through */
    case LENLENS:
      while (state.have < state.ncode) {
        //=== NEEDBITS(3);
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
        //--- DROPBITS(3) ---//
        hold >>>= 3;
        bits -= 3;
        //---//
      }
      while (state.have < 19) {
        state.lens[order[state.have++]] = 0;
      }
      // We have separate tables & no pointers. 2 commented lines below not needed.
      //state.next = state.codes;
      //state.lencode = state.next;
      // Switch to use dynamic table
      state.lencode = state.lendyn;
      state.lenbits = 7;

      opts = { bits: state.lenbits };
      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
      state.lenbits = opts.bits;

      if (ret) {
        strm.msg = 'invalid code lengths set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, "inflate:       code lengths ok\n"));
      state.have = 0;
      state.mode = CODELENS;
      /* falls through */
    case CODELENS:
      while (state.have < state.nlen + state.ndist) {
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_val < 16) {
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.lens[state.have++] = here_val;
        }
        else {
          if (here_val === 16) {
            //=== NEEDBITS(here.bits + 2);
            n = here_bits + 2;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            if (state.have === 0) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            len = state.lens[state.have - 1];
            copy = 3 + (hold & 0x03);//BITS(2);
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
          }
          else if (here_val === 17) {
            //=== NEEDBITS(here.bits + 3);
            n = here_bits + 3;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 3 + (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          else {
            //=== NEEDBITS(here.bits + 7);
            n = here_bits + 7;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 11 + (hold & 0x7f);//BITS(7);
            //--- DROPBITS(7) ---//
            hold >>>= 7;
            bits -= 7;
            //---//
          }
          if (state.have + copy > state.nlen + state.ndist) {
            strm.msg = 'invalid bit length repeat';
            state.mode = BAD;
            break;
          }
          while (copy--) {
            state.lens[state.have++] = len;
          }
        }
      }

      /* handle error breaks in while */
      if (state.mode === BAD) { break; }

      /* check for end-of-block code (better have one) */
      if (state.lens[256] === 0) {
        strm.msg = 'invalid code -- missing end-of-block';
        state.mode = BAD;
        break;
      }

      /* build code tables -- note: do not change the lenbits or distbits
         values here (9 and 6) without reading the comments in inftrees.h
         concerning the ENOUGH constants, which depend on those values */
      state.lenbits = 9;

      opts = { bits: state.lenbits };
      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.lenbits = opts.bits;
      // state.lencode = state.next;

      if (ret) {
        strm.msg = 'invalid literal/lengths set';
        state.mode = BAD;
        break;
      }

      state.distbits = 6;
      //state.distcode.copy(state.codes);
      // Switch to use dynamic table
      state.distcode = state.distdyn;
      opts = { bits: state.distbits };
      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.distbits = opts.bits;
      // state.distcode = state.next;

      if (ret) {
        strm.msg = 'invalid distances set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, 'inflate:       codes ok\n'));
      state.mode = LEN_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case LEN_:
      state.mode = LEN;
      /* falls through */
    case LEN:
      if (have >= 6 && left >= 258) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        inflate_fast(strm, _out);
        //--- LOAD() ---
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        //---

        if (state.mode === TYPE) {
          state.back = -1;
        }
        break;
      }
      state.back = 0;
      for (;;) {
        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if (here_bits <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if (here_op && (here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      state.length = here_val;
      if (here_op === 0) {
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        state.mode = LIT;
        break;
      }
      if (here_op & 32) {
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.back = -1;
        state.mode = TYPE;
        break;
      }
      if (here_op & 64) {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break;
      }
      state.extra = here_op & 15;
      state.mode = LENEXT;
      /* falls through */
    case LENEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
      //Tracevv((stderr, "inflate:         length %u\n", state.length));
      state.was = state.length;
      state.mode = DIST;
      /* falls through */
    case DIST:
      for (;;) {
        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if ((here_bits) <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if ((here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      if (here_op & 64) {
        strm.msg = 'invalid distance code';
        state.mode = BAD;
        break;
      }
      state.offset = here_val;
      state.extra = (here_op) & 15;
      state.mode = DISTEXT;
      /* falls through */
    case DISTEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
//#ifdef INFLATE_STRICT
      if (state.offset > state.dmax) {
        strm.msg = 'invalid distance too far back';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
      state.mode = MATCH;
      /* falls through */
    case MATCH:
      if (left === 0) { break inf_leave; }
      copy = _out - left;
      if (state.offset > copy) {         /* copy from window */
        copy = state.offset - copy;
        if (copy > state.whave) {
          if (state.sane) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
        }
        if (copy > state.wnext) {
          copy -= state.wnext;
          from = state.wsize - copy;
        }
        else {
          from = state.wnext - copy;
        }
        if (copy > state.length) { copy = state.length; }
        from_source = state.window;
      }
      else {                              /* copy from output */
        from_source = output;
        from = put - state.offset;
        copy = state.length;
      }
      if (copy > left) { copy = left; }
      left -= copy;
      state.length -= copy;
      do {
        output[put++] = from_source[from++];
      } while (--copy);
      if (state.length === 0) { state.mode = LEN; }
      break;
    case LIT:
      if (left === 0) { break inf_leave; }
      output[put++] = state.length;
      left--;
      state.mode = LEN;
      break;
    case CHECK:
      if (state.wrap) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          // Use '|' insdead of '+' to make sure that result is signed
          hold |= input[next++] << bits;
          bits += 8;
        }
        //===//
        _out -= left;
        strm.total_out += _out;
        state.total += _out;
        if (_out) {
          strm.adler = state.check =
              /*UPDATE(state.check, put - _out, _out);*/
              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

        }
        _out = left;
        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
          strm.msg = 'incorrect data check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   check matches trailer\n"));
      }
      state.mode = LENGTH;
      /* falls through */
    case LENGTH:
      if (state.wrap && state.flags) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.total & 0xffffffff)) {
          strm.msg = 'incorrect length check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   length matches trailer\n"));
      }
      state.mode = DONE;
      /* falls through */
    case DONE:
      ret = Z_STREAM_END;
      break inf_leave;
    case BAD:
      ret = Z_DATA_ERROR;
      break inf_leave;
    case MEM:
      return Z_MEM_ERROR;
    case SYNC:
      /* falls through */
    default:
      return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

},{"../utils/common":67,"./adler32":68,"./crc32":70,"./inffast":72,"./inftrees":74}],74:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  var i = 0;
  /* process all codes and make table entries */
  for (;;) {
    i++;
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

},{"../utils/common":67}],75:[function(require,module,exports){
'use strict';

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

},{}],76:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;

},{"../utils/common":67}],77:[function(require,module,exports){
'use strict';


function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;

},{}],78:[function(require,module,exports){
'use strict';
var errorEx = require('error-ex');
var fallback = require('./vendor/parse');

var JSONError = errorEx('JSONError', {
	fileName: errorEx.append('in %s')
});

module.exports = function (x, reviver, filename) {
	if (typeof reviver === 'string') {
		filename = reviver;
		reviver = null;
	}

	try {
		try {
			return JSON.parse(x, reviver);
		} catch (err) {
			fallback.parse(x, {
				mode: 'json',
				reviver: reviver
			});

			throw err;
		}
	} catch (err) {
		var jsonErr = new JSONError(err);

		if (filename) {
			jsonErr.fileName = filename;
		}

		throw jsonErr;
	}
};

},{"./vendor/parse":79,"error-ex":22}],79:[function(require,module,exports){
/*
 * Author: Alex Kocharin <alex@kocharin.ru>
 * GIT: https://github.com/rlidwka/jju
 * License: WTFPL, grab your copy here: http://www.wtfpl.net/txt/copying/
 */

// RTFM: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf

var Uni = require('./unicode')

function isHexDigit(x) {
  return (x >= '0' && x <= '9')
      || (x >= 'A' && x <= 'F')
      || (x >= 'a' && x <= 'f')
}

function isOctDigit(x) {
  return x >= '0' && x <= '7'
}

function isDecDigit(x) {
  return x >= '0' && x <= '9'
}

var unescapeMap = {
  '\'': '\'',
  '"' : '"',
  '\\': '\\',
  'b' : '\b',
  'f' : '\f',
  'n' : '\n',
  'r' : '\r',
  't' : '\t',
  'v' : '\v',
  '/' : '/',
}

function formatError(input, msg, position, lineno, column, json5) {
  var result = msg + ' at ' + (lineno + 1) + ':' + (column + 1)
    , tmppos = position - column - 1
    , srcline = ''
    , underline = ''

  var isLineTerminator = json5 ? Uni.isLineTerminator : Uni.isLineTerminatorJSON

  // output no more than 70 characters before the wrong ones
  if (tmppos < position - 70) {
    tmppos = position - 70
  }

  while (1) {
    var chr = input[++tmppos]

    if (isLineTerminator(chr) || tmppos === input.length) {
      if (position >= tmppos) {
        // ending line error, so show it after the last char
        underline += '^'
      }
      break
    }
    srcline += chr

    if (position === tmppos) {
      underline += '^'
    } else if (position > tmppos) {
      underline += input[tmppos] === '\t' ? '\t' : ' '
    }

    // output no more than 78 characters on the string
    if (srcline.length > 78) break
  }

  return result + '\n' + srcline + '\n' + underline
}

function parse(input, options) {
  // parse as a standard JSON mode
  var json5 = !(options.mode === 'json' || options.legacy)
  var isLineTerminator = json5 ? Uni.isLineTerminator : Uni.isLineTerminatorJSON
  var isWhiteSpace = json5 ? Uni.isWhiteSpace : Uni.isWhiteSpaceJSON

  var length = input.length
    , lineno = 0
    , linestart = 0
    , position = 0
    , stack = []

  var tokenStart = function() {}
  var tokenEnd = function(v) {return v}

  /* tokenize({
       raw: '...',
       type: 'whitespace'|'comment'|'key'|'literal'|'separator'|'newline',
       value: 'number'|'string'|'whatever',
       path: [...],
     })
  */
  if (options._tokenize) {
    ;(function() {
      var start = null
      tokenStart = function() {
        if (start !== null) throw Error('internal error, token overlap')
        start = position
      }

      tokenEnd = function(v, type) {
        if (start != position) {
          var hash = {
            raw: input.substr(start, position-start),
            type: type,
            stack: stack.slice(0),
          }
          if (v !== undefined) hash.value = v
          options._tokenize.call(null, hash)
        }
        start = null
        return v
      }
    })()
  }

  function fail(msg) {
    var column = position - linestart

    if (!msg) {
      if (position < length) {
        var token = '\'' +
          JSON
            .stringify(input[position])
            .replace(/^"|"$/g, '')
            .replace(/'/g, "\\'")
            .replace(/\\"/g, '"')
          + '\''

        if (!msg) msg = 'Unexpected token ' + token
      } else {
        if (!msg) msg = 'Unexpected end of input'
      }
    }

    var error = SyntaxError(formatError(input, msg, position, lineno, column, json5))
    error.row = lineno + 1
    error.column = column + 1
    throw error
  }

  function newline(chr) {
    // account for <cr><lf>
    if (chr === '\r' && input[position] === '\n') position++
    linestart = position
    lineno++
  }

  function parseGeneric() {
    var result

    while (position < length) {
      tokenStart()
      var chr = input[position++]

      if (chr === '"' || (chr === '\'' && json5)) {
        return tokenEnd(parseString(chr), 'literal')

      } else if (chr === '{') {
        tokenEnd(undefined, 'separator')
        return parseObject()

      } else if (chr === '[') {
        tokenEnd(undefined, 'separator')
        return parseArray()

      } else if (chr === '-'
             ||  chr === '.'
             ||  isDecDigit(chr)
                 //           + number       Infinity          NaN
             ||  (json5 && (chr === '+' || chr === 'I' || chr === 'N'))
      ) {
        return tokenEnd(parseNumber(), 'literal')

      } else if (chr === 'n') {
        parseKeyword('null')
        return tokenEnd(null, 'literal')

      } else if (chr === 't') {
        parseKeyword('true')
        return tokenEnd(true, 'literal')

      } else if (chr === 'f') {
        parseKeyword('false')
        return tokenEnd(false, 'literal')

      } else {
        position--
        return tokenEnd(undefined)
      }
    }
  }

  function parseKey() {
    var result

    while (position < length) {
      tokenStart()
      var chr = input[position++]

      if (chr === '"' || (chr === '\'' && json5)) {
        return tokenEnd(parseString(chr), 'key')

      } else if (chr === '{') {
        tokenEnd(undefined, 'separator')
        return parseObject()

      } else if (chr === '[') {
        tokenEnd(undefined, 'separator')
        return parseArray()

      } else if (chr === '.'
             ||  isDecDigit(chr)
      ) {
        return tokenEnd(parseNumber(true), 'key')

      } else if (json5
             &&  Uni.isIdentifierStart(chr) || (chr === '\\' && input[position] === 'u')) {
        // unicode char or a unicode sequence
        var rollback = position - 1
        var result = parseIdentifier()

        if (result === undefined) {
          position = rollback
          return tokenEnd(undefined)
        } else {
          return tokenEnd(result, 'key')
        }

      } else {
        position--
        return tokenEnd(undefined)
      }
    }
  }

  function skipWhiteSpace() {
    tokenStart()
    while (position < length) {
      var chr = input[position++]

      if (isLineTerminator(chr)) {
        position--
        tokenEnd(undefined, 'whitespace')
        tokenStart()
        position++
        newline(chr)
        tokenEnd(undefined, 'newline')
        tokenStart()

      } else if (isWhiteSpace(chr)) {
        // nothing

      } else if (chr === '/'
             && json5
             && (input[position] === '/' || input[position] === '*')
      ) {
        position--
        tokenEnd(undefined, 'whitespace')
        tokenStart()
        position++
        skipComment(input[position++] === '*')
        tokenEnd(undefined, 'comment')
        tokenStart()

      } else {
        position--
        break
      }
    }
    return tokenEnd(undefined, 'whitespace')
  }

  function skipComment(multi) {
    while (position < length) {
      var chr = input[position++]

      if (isLineTerminator(chr)) {
        // LineTerminator is an end of singleline comment
        if (!multi) {
          // let parent function deal with newline
          position--
          return
        }

        newline(chr)

      } else if (chr === '*' && multi) {
        // end of multiline comment
        if (input[position] === '/') {
          position++
          return
        }

      } else {
        // nothing
      }
    }

    if (multi) {
      fail('Unclosed multiline comment')
    }
  }

  function parseKeyword(keyword) {
    // keyword[0] is not checked because it should've checked earlier
    var _pos = position
    var len = keyword.length
    for (var i=1; i<len; i++) {
      if (position >= length || keyword[i] != input[position]) {
        position = _pos-1
        fail()
      }
      position++
    }
  }

  function parseObject() {
    var result = options.null_prototype ? Object.create(null) : {}
      , empty_object = {}
      , is_non_empty = false

    while (position < length) {
      skipWhiteSpace()
      var item1 = parseKey()
      skipWhiteSpace()
      tokenStart()
      var chr = input[position++]
      tokenEnd(undefined, 'separator')

      if (chr === '}' && item1 === undefined) {
        if (!json5 && is_non_empty) {
          position--
          fail('Trailing comma in object')
        }
        return result

      } else if (chr === ':' && item1 !== undefined) {
        skipWhiteSpace()
        stack.push(item1)
        var item2 = parseGeneric()
        stack.pop()

        if (item2 === undefined) fail('No value found for key ' + item1)
        if (typeof(item1) !== 'string') {
          if (!json5 || typeof(item1) !== 'number') {
            fail('Wrong key type: ' + item1)
          }
        }

        if ((item1 in empty_object || empty_object[item1] != null) && options.reserved_keys !== 'replace') {
          if (options.reserved_keys === 'throw') {
            fail('Reserved key: ' + item1)
          } else {
            // silently ignore it
          }
        } else {
          if (typeof(options.reviver) === 'function') {
            item2 = options.reviver.call(null, item1, item2)
          }

          if (item2 !== undefined) {
            is_non_empty = true
            Object.defineProperty(result, item1, {
              value: item2,
              enumerable: true,
              configurable: true,
              writable: true,
            })
          }
        }

        skipWhiteSpace()

        tokenStart()
        var chr = input[position++]
        tokenEnd(undefined, 'separator')

        if (chr === ',') {
          continue

        } else if (chr === '}') {
          return result

        } else {
          fail()
        }

      } else {
        position--
        fail()
      }
    }

    fail()
  }

  function parseArray() {
    var result = []

    while (position < length) {
      skipWhiteSpace()
      stack.push(result.length)
      var item = parseGeneric()
      stack.pop()
      skipWhiteSpace()
      tokenStart()
      var chr = input[position++]
      tokenEnd(undefined, 'separator')

      if (item !== undefined) {
        if (typeof(options.reviver) === 'function') {
          item = options.reviver.call(null, String(result.length), item)
        }
        if (item === undefined) {
          result.length++
          item = true // hack for check below, not included into result
        } else {
          result.push(item)
        }
      }

      if (chr === ',') {
        if (item === undefined) {
          fail('Elisions are not supported')
        }

      } else if (chr === ']') {
        if (!json5 && item === undefined && result.length) {
          position--
          fail('Trailing comma in array')
        }
        return result

      } else {
        position--
        fail()
      }
    }
  }

  function parseNumber() {
    // rewind because we don't know first char
    position--

    var start = position
      , chr = input[position++]
      , t

    var to_num = function(is_octal) {
      var str = input.substr(start, position - start)

      if (is_octal) {
        var result = parseInt(str.replace(/^0o?/, ''), 8)
      } else {
        var result = Number(str)
      }

      if (Number.isNaN(result)) {
        position--
        fail('Bad numeric literal - "' + input.substr(start, position - start + 1) + '"')
      } else if (!json5 && !str.match(/^-?(0|[1-9][0-9]*)(\.[0-9]+)?(e[+-]?[0-9]+)?$/i)) {
        // additional restrictions imposed by json
        position--
        fail('Non-json numeric literal - "' + input.substr(start, position - start + 1) + '"')
      } else {
        return result
      }
    }

    // ex: -5982475.249875e+29384
    //     ^ skipping this
    if (chr === '-' || (chr === '+' && json5)) chr = input[position++]

    if (chr === 'N' && json5) {
      parseKeyword('NaN')
      return NaN
    }

    if (chr === 'I' && json5) {
      parseKeyword('Infinity')

      // returning +inf or -inf
      return to_num()
    }

    if (chr >= '1' && chr <= '9') {
      // ex: -5982475.249875e+29384
      //        ^^^ skipping these
      while (position < length && isDecDigit(input[position])) position++
      chr = input[position++]
    }

    // special case for leading zero: 0.123456
    if (chr === '0') {
      chr = input[position++]

      //             new syntax, "0o777"           old syntax, "0777"
      var is_octal = chr === 'o' || chr === 'O' || isOctDigit(chr)
      var is_hex = chr === 'x' || chr === 'X'

      if (json5 && (is_octal || is_hex)) {
        while (position < length
           &&  (is_hex ? isHexDigit : isOctDigit)( input[position] )
        ) position++

        var sign = 1
        if (input[start] === '-') {
          sign = -1
          start++
        } else if (input[start] === '+') {
          start++
        }

        return sign * to_num(is_octal)
      }
    }

    if (chr === '.') {
      // ex: -5982475.249875e+29384
      //                ^^^ skipping these
      while (position < length && isDecDigit(input[position])) position++
      chr = input[position++]
    }

    if (chr === 'e' || chr === 'E') {
      chr = input[position++]
      if (chr === '-' || chr === '+') position++
      // ex: -5982475.249875e+29384
      //                       ^^^ skipping these
      while (position < length && isDecDigit(input[position])) position++
      chr = input[position++]
    }

    // we have char in the buffer, so count for it
    position--
    return to_num()
  }

  function parseIdentifier() {
    // rewind because we don't know first char
    position--

    var result = ''

    while (position < length) {
      var chr = input[position++]

      if (chr === '\\'
      &&  input[position] === 'u'
      &&  isHexDigit(input[position+1])
      &&  isHexDigit(input[position+2])
      &&  isHexDigit(input[position+3])
      &&  isHexDigit(input[position+4])
      ) {
        // UnicodeEscapeSequence
        chr = String.fromCharCode(parseInt(input.substr(position+1, 4), 16))
        position += 5
      }

      if (result.length) {
        // identifier started
        if (Uni.isIdentifierPart(chr)) {
          result += chr
        } else {
          position--
          return result
        }

      } else {
        if (Uni.isIdentifierStart(chr)) {
          result += chr
        } else {
          return undefined
        }
      }
    }

    fail()
  }

  function parseString(endChar) {
    // 7.8.4 of ES262 spec
    var result = ''

    while (position < length) {
      var chr = input[position++]

      if (chr === endChar) {
        return result

      } else if (chr === '\\') {
        if (position >= length) fail()
        chr = input[position++]

        if (unescapeMap[chr] && (json5 || (chr != 'v' && chr != "'"))) {
          result += unescapeMap[chr]

        } else if (json5 && isLineTerminator(chr)) {
          // line continuation
          newline(chr)

        } else if (chr === 'u' || (chr === 'x' && json5)) {
          // unicode/character escape sequence
          var off = chr === 'u' ? 4 : 2

          // validation for \uXXXX
          for (var i=0; i<off; i++) {
            if (position >= length) fail()
            if (!isHexDigit(input[position])) fail('Bad escape sequence')
            position++
          }

          result += String.fromCharCode(parseInt(input.substr(position-off, off), 16))
        } else if (json5 && isOctDigit(chr)) {
          if (chr < '4' && isOctDigit(input[position]) && isOctDigit(input[position+1])) {
            // three-digit octal
            var digits = 3
          } else if (isOctDigit(input[position])) {
            // two-digit octal
            var digits = 2
          } else {
            var digits = 1
          }
          position += digits - 1
          result += String.fromCharCode(parseInt(input.substr(position-digits, digits), 8))
          /*if (!isOctDigit(input[position])) {
            // \0 is allowed still
            result += '\0'
          } else {
            fail('Octal literals are not supported')
          }*/

        } else if (json5) {
          // \X -> x
          result += chr

        } else {
          position--
          fail()
        }

      } else if (isLineTerminator(chr)) {
        fail()

      } else {
        if (!json5 && chr.charCodeAt(0) < 32) {
          position--
          fail('Unexpected control character')
        }

        // SourceCharacter but not one of " or \ or LineTerminator
        result += chr
      }
    }

    fail()
  }

  skipWhiteSpace()
  var return_value = parseGeneric()
  if (return_value !== undefined || position < length) {
    skipWhiteSpace()

    if (position >= length) {
      if (typeof(options.reviver) === 'function') {
        return_value = options.reviver.call(null, '', return_value)
      }
      return return_value
    } else {
      fail()
    }

  } else {
    if (position) {
      fail('No data, only a whitespace')
    } else {
      fail('No data, empty input')
    }
  }
}

/*
 * parse(text, options)
 * or
 * parse(text, reviver)
 *
 * where:
 * text - string
 * options - object
 * reviver - function
 */
module.exports.parse = function parseJSON(input, options) {
  // support legacy functions
  if (typeof(options) === 'function') {
    options = {
      reviver: options
    }
  }

  if (input === undefined) {
    // parse(stringify(x)) should be equal x
    // with JSON functions it is not 'cause of undefined
    // so we're fixing it
    return undefined
  }

  // JSON.parse compat
  if (typeof(input) !== 'string') input = String(input)
  if (options == null) options = {}
  if (options.reserved_keys == null) options.reserved_keys = 'ignore'

  if (options.reserved_keys === 'throw' || options.reserved_keys === 'ignore') {
    if (options.null_prototype == null) {
      options.null_prototype = true
    }
  }

  try {
    return parse(input, options)
  } catch(err) {
    // jju is a recursive parser, so JSON.parse("{{{{{{{") could blow up the stack
    //
    // this catch is used to skip all those internal calls
    if (err instanceof SyntaxError && err.row != null && err.column != null) {
      var old_err = err
      err = SyntaxError(old_err.message)
      err.column = old_err.column
      err.row = old_err.row
    }
    throw err
  }
}

module.exports.tokenize = function tokenizeJSON(input, options) {
  if (options == null) options = {}

  options._tokenize = function(smth) {
    if (options._addstack) smth.stack.unshift.apply(smth.stack, options._addstack)
    tokens.push(smth)
  }

  var tokens = []
  tokens.data = module.exports.parse(input, options)
  return tokens
}


},{"./unicode":80}],80:[function(require,module,exports){

// This is autogenerated with esprima tools, see:
// https://github.com/ariya/esprima/blob/master/esprima.js
//
// PS: oh God, I hate Unicode

// ECMAScript 5.1/Unicode v6.3.0 NonAsciiIdentifierStart:

var Uni = module.exports

module.exports.isWhiteSpace = function isWhiteSpace(x) {
  // section 7.2, table 2
  return x === '\u0020'
      || x === '\u00A0'
      || x === '\uFEFF' // <-- this is not a Unicode WS, only a JS one
      || (x >= '\u0009' && x <= '\u000D') // 9 A B C D

      // + whitespace characters from unicode, category Zs
      || x === '\u1680'
      || x === '\u180E'
      || (x >= '\u2000' && x <= '\u200A') // 0 1 2 3 4 5 6 7 8 9 A
      || x === '\u2028'
      || x === '\u2029'
      || x === '\u202F'
      || x === '\u205F'
      || x === '\u3000'
}

module.exports.isWhiteSpaceJSON = function isWhiteSpaceJSON(x) {
  return x === '\u0020'
      || x === '\u0009'
      || x === '\u000A'
      || x === '\u000D'
}

module.exports.isLineTerminator = function isLineTerminator(x) {
  // ok, here is the part when JSON is wrong
  // section 7.3, table 3
  return x === '\u000A'
      || x === '\u000D'
      || x === '\u2028'
      || x === '\u2029'
}

module.exports.isLineTerminatorJSON = function isLineTerminatorJSON(x) {
  return x === '\u000A'
      || x === '\u000D'
}

module.exports.isIdentifierStart = function isIdentifierStart(x) {
  return x === '$'
      || x === '_'
      || (x >= 'A' && x <= 'Z')
      || (x >= 'a' && x <= 'z')
      || (x >= '\u0080' && Uni.NonAsciiIdentifierStart.test(x))
}

module.exports.isIdentifierPart = function isIdentifierPart(x) {
  return x === '$'
      || x === '_'
      || (x >= 'A' && x <= 'Z')
      || (x >= 'a' && x <= 'z')
      || (x >= '0' && x <= '9') // <-- addition to Start
      || (x >= '\u0080' && Uni.NonAsciiIdentifierPart.test(x))
}

module.exports.NonAsciiIdentifierStart = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/

// ECMAScript 5.1/Unicode v6.3.0 NonAsciiIdentifierPart:

module.exports.NonAsciiIdentifierPart = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0\u08A2-\u08AC\u08E4-\u08FE\u0900-\u0963\u0966-\u096F\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C82\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1D00-\u1DE6\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA697\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7B\uAA80-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE26\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/

},{}],81:[function(require,module,exports){
const assert = require('assert')

module.exports = match

// get url path section from a url
// strip querystrings / hashes
// strip protocol
// strip hostname and port (both ip and route)
// str -> str
function match (route) {
  assert.equal(typeof route, 'string')

  return route.trim()
    .replace(/[\?|#].*$/, '')
    .replace(/^(?:https?\:)\/\//, '')
    .replace(/^.*?(\/.*)/, '$1')
    .replace(/\/$/, '')
}

},{"assert":2}],82:[function(require,module,exports){
'use strict';

module.exports = typeof Promise === 'function' ? Promise : require('pinkie');

},{"pinkie":83}],83:[function(require,module,exports){
(function (global){
'use strict';

var PENDING = 'pending';
var SETTLED = 'settled';
var FULFILLED = 'fulfilled';
var REJECTED = 'rejected';
var NOOP = function () {};
var isNode = typeof global !== 'undefined' && typeof global.process !== 'undefined' && typeof global.process.emit === 'function';

var asyncSetTimer = typeof setImmediate === 'undefined' ? setTimeout : setImmediate;
var asyncQueue = [];
var asyncTimer;

function asyncFlush() {
	// run promise callbacks
	for (var i = 0; i < asyncQueue.length; i++) {
		asyncQueue[i][0](asyncQueue[i][1]);
	}

	// reset async asyncQueue
	asyncQueue = [];
	asyncTimer = false;
}

function asyncCall(callback, arg) {
	asyncQueue.push([callback, arg]);

	if (!asyncTimer) {
		asyncTimer = true;
		asyncSetTimer(asyncFlush, 0);
	}
}

function invokeResolver(resolver, promise) {
	function resolvePromise(value) {
		resolve(promise, value);
	}

	function rejectPromise(reason) {
		reject(promise, reason);
	}

	try {
		resolver(resolvePromise, rejectPromise);
	} catch (e) {
		rejectPromise(e);
	}
}

function invokeCallback(subscriber) {
	var owner = subscriber.owner;
	var settled = owner._state;
	var value = owner._data;
	var callback = subscriber[settled];
	var promise = subscriber.then;

	if (typeof callback === 'function') {
		settled = FULFILLED;
		try {
			value = callback(value);
		} catch (e) {
			reject(promise, e);
		}
	}

	if (!handleThenable(promise, value)) {
		if (settled === FULFILLED) {
			resolve(promise, value);
		}

		if (settled === REJECTED) {
			reject(promise, value);
		}
	}
}

function handleThenable(promise, value) {
	var resolved;

	try {
		if (promise === value) {
			throw new TypeError('A promises callback cannot return that same promise.');
		}

		if (value && (typeof value === 'function' || typeof value === 'object')) {
			// then should be retrieved only once
			var then = value.then;

			if (typeof then === 'function') {
				then.call(value, function (val) {
					if (!resolved) {
						resolved = true;

						if (value === val) {
							fulfill(promise, val);
						} else {
							resolve(promise, val);
						}
					}
				}, function (reason) {
					if (!resolved) {
						resolved = true;

						reject(promise, reason);
					}
				});

				return true;
			}
		}
	} catch (e) {
		if (!resolved) {
			reject(promise, e);
		}

		return true;
	}

	return false;
}

function resolve(promise, value) {
	if (promise === value || !handleThenable(promise, value)) {
		fulfill(promise, value);
	}
}

function fulfill(promise, value) {
	if (promise._state === PENDING) {
		promise._state = SETTLED;
		promise._data = value;

		asyncCall(publishFulfillment, promise);
	}
}

function reject(promise, reason) {
	if (promise._state === PENDING) {
		promise._state = SETTLED;
		promise._data = reason;

		asyncCall(publishRejection, promise);
	}
}

function publish(promise) {
	promise._then = promise._then.forEach(invokeCallback);
}

function publishFulfillment(promise) {
	promise._state = FULFILLED;
	publish(promise);
}

function publishRejection(promise) {
	promise._state = REJECTED;
	publish(promise);
	if (!promise._handled && isNode) {
		global.process.emit('unhandledRejection', promise._data, promise);
	}
}

function notifyRejectionHandled(promise) {
	global.process.emit('rejectionHandled', promise);
}

/**
 * @class
 */
function Promise(resolver) {
	if (typeof resolver !== 'function') {
		throw new TypeError('Promise resolver ' + resolver + ' is not a function');
	}

	if (this instanceof Promise === false) {
		throw new TypeError('Failed to construct \'Promise\': Please use the \'new\' operator, this object constructor cannot be called as a function.');
	}

	this._then = [];

	invokeResolver(resolver, this);
}

Promise.prototype = {
	constructor: Promise,

	_state: PENDING,
	_then: null,
	_data: undefined,
	_handled: false,

	then: function (onFulfillment, onRejection) {
		var subscriber = {
			owner: this,
			then: new this.constructor(NOOP),
			fulfilled: onFulfillment,
			rejected: onRejection
		};

		if ((onRejection || onFulfillment) && !this._handled) {
			this._handled = true;
			if (this._state === REJECTED && isNode) {
				asyncCall(notifyRejectionHandled, this);
			}
		}

		if (this._state === FULFILLED || this._state === REJECTED) {
			// already resolved, call callback async
			asyncCall(invokeCallback, subscriber);
		} else {
			// subscribe
			this._then.push(subscriber);
		}

		return subscriber.then;
	},

	catch: function (onRejection) {
		return this.then(null, onRejection);
	}
};

Promise.all = function (promises) {
	if (!Array.isArray(promises)) {
		throw new TypeError('You must pass an array to Promise.all().');
	}

	return new Promise(function (resolve, reject) {
		var results = [];
		var remaining = 0;

		function resolver(index) {
			remaining++;
			return function (value) {
				results[index] = value;
				if (!--remaining) {
					resolve(results);
				}
			};
		}

		for (var i = 0, promise; i < promises.length; i++) {
			promise = promises[i];

			if (promise && typeof promise.then === 'function') {
				promise.then(resolver(i), reject);
			} else {
				results[i] = promise;
			}
		}

		if (!remaining) {
			resolve(results);
		}
	});
};

Promise.race = function (promises) {
	if (!Array.isArray(promises)) {
		throw new TypeError('You must pass an array to Promise.race().');
	}

	return new Promise(function (resolve, reject) {
		for (var i = 0, promise; i < promises.length; i++) {
			promise = promises[i];

			if (promise && typeof promise.then === 'function') {
				promise.then(resolve, reject);
			} else {
				resolve(promise);
			}
		}
	});
};

Promise.resolve = function (value) {
	if (value && typeof value === 'object' && value.constructor === Promise) {
		return value;
	}

	return new Promise(function (resolve) {
		resolve(value);
	});
};

Promise.reject = function (reason) {
	return new Promise(function (resolve, reject) {
		reject(reason);
	});
};

module.exports = Promise;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],84:[function(require,module,exports){
'use strict';
module.exports = function (url) {
	if (typeof url !== 'string') {
		throw new TypeError('Expected a string, got ' + typeof url);
	}

	url = url.trim();

	if (/^\.*\/|^(?!localhost)\w+:/.test(url)) {
		return url;
	}

	return url.replace(/^(?!(?:\w+:)?\/\/)/, 'http://');
};

},{}],85:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))
},{"_process":86}],86:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],87:[function(require,module,exports){
(function (global){
/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],88:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],89:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],90:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":88,"./encode":89}],91:[function(require,module,exports){
(function (Buffer){
'use strict';

var Writable = require('readable-stream').Writable;
var inherits = require('util').inherits;
var Promise = require('pinkie-promise');

function BufferStream() {
	Writable.call(this, { objectMode: true });
	this.buffer = [];
	this.length = 0;
}

inherits(BufferStream, Writable);
BufferStream.prototype._write = function(chunk, enc, next) {
	if (!Buffer.isBuffer(chunk)) {
		chunk = new Buffer(chunk);
	}

	this.buffer.push(chunk);
	this.length += chunk.length;
	next();
};

module.exports = function read(stream, options, cb) {
	if (!stream) {
		throw new Error('stream argument is required');
	}

	if (typeof options === 'function') {
		cb = options;
		options = {};
	}

	if (typeof options === 'string' || options === undefined || options === null) {
		options = { encoding: options };
	}

	if (options.encoding === undefined) { options.encoding = 'utf8'; }

	var promise;

	if (!cb) {
		var resolve, reject;
		promise = new Promise(function(_res, _rej) {
			resolve = _res;
			reject = _rej;
		});

		cb = function (err, data) {
			if (err) { return reject(err); }
			resolve(data);
		};
	}

	var sink = new BufferStream();

	sink.on('finish', function () {
		var data = Buffer.concat(this.buffer, this.length);

		if (options.encoding) {
			data = data.toString(options.encoding);
		}

		cb(null, data);
	});

	stream.once('error', cb);

	stream.pipe(sink);

	return promise;
}

}).call(this,require("buffer").Buffer)
},{"buffer":11,"pinkie-promise":82,"readable-stream":97,"util":128}],92:[function(require,module,exports){
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":94,"./_stream_writable":96,"core-util-is":16,"inherits":45,"process-nextick-args":85}],93:[function(require,module,exports){
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":95,"core-util-is":16,"inherits":45}],94:[function(require,module,exports){
(function (process){
'use strict';

module.exports = Readable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events');

/*<replacement>*/
var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = require('st' + 'ream');
  } catch (_) {} finally {
    if (!Stream) Stream = require('events').EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = require('buffer').Buffer;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = undefined;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

var Duplex;
function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

var Duplex;
function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function') this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      var skipAdd;
      if (state.decoder && !addToFront && !encoding) {
        chunk = state.decoder.write(chunk);
        skipAdd = !state.objectMode && chunk.length === 0;
      }

      if (!addToFront) state.reading = false;

      // Don't add to the buffer if we've decoded to an empty string chunk and
      // we're not in object mode
      if (!skipAdd) {
        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

          if (state.needReadable) emitReadable(stream);
        }
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended) return 0;

  if (state.objectMode) return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;
  }

  if (n <= 0) return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else {
      return state.length;
    }
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended) state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0) endReadable(this);

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      if (state.pipesCount === 1 && state.pipes[0] === dest && src.listenerCount('data') === 1 && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error];

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var _i = 0; _i < len; _i++) {
      dests[_i].emit('unpipe', this);
    }return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1) return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && !this._readableState.endEmitted) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function (ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0) return null;

  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode) ret = list.join('');else if (list.length === 1) ret = list[0];else ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode) ret = '';else ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'))
},{"./_stream_duplex":92,"_process":86,"buffer":11,"core-util-is":16,"events":23,"inherits":45,"isarray":52,"process-nextick-args":85,"string_decoder/":119,"util":7}],95:[function(require,module,exports){
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er) {
      done(stream, er);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

function done(stream, er) {
  if (er) return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":92,"core-util-is":16,"inherits":45}],96:[function(require,module,exports){
(function (process){
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = require('st' + 'ream');
  } catch (_) {} finally {
    if (!Stream) Stream = require('events').EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = require('buffer').Buffer;

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

var Duplex;
function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // create the two objects needed to store the corked requests
  // they are not a linked list, as no new elements are inserted in there
  this.corkedRequestsFree = new CorkedRequest(this);
  this.corkedRequestsFree.next = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function writableStateGetBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
  } catch (_) {}
})();

var Duplex;
function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;

  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) processNextTick(cb, er);else cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
        afterWrite(stream, state, finished, cb);
      }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    while (entry) {
      buffer[count] = entry;
      entry = entry.next;
      count += 1;
    }

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    state.corkedRequestsFree = holder.next;
    holder.next = null;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function (err) {
    var entry = _this.entry;
    _this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = _this;
    } else {
      state.corkedRequestsFree = _this;
    }
  };
}
}).call(this,require('_process'))
},{"./_stream_duplex":92,"_process":86,"buffer":11,"core-util-is":16,"events":23,"inherits":45,"process-nextick-args":85,"util-deprecate":125}],97:[function(require,module,exports){
var Stream = (function (){
  try {
    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
  } catch(_){}
}());
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = Stream || exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":92,"./lib/_stream_passthrough.js":93,"./lib/_stream_readable.js":94,"./lib/_stream_transform.js":95,"./lib/_stream_writable.js":96}],98:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":95}],99:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":11}],100:[function(require,module,exports){
const window = require('global/window')
const assert = require('assert')

module.exports = hash

// listen to window hashchange events
// and update router accordingly
// fn(cb) -> null
function hash (cb) {
  assert.equal(typeof cb, 'function', 'cb must be a function')
  window.onhashchange = function (e) {
    cb(window.location.hash)
  }
}

},{"assert":2,"global/window":34}],101:[function(require,module,exports){
const document = require('global/document')
const window = require('global/window')
const assert = require('assert')

module.exports = history

// listen to html5 pushstate events
// and update router accordingly
// fn(str) -> null
function history (cb) {
  assert.equal(typeof cb, 'function', 'cb must be a function')
  window.onpopstate = function () {
    cb(document.location.href)
  }
}

},{"assert":2,"global/document":33,"global/window":34}],102:[function(require,module,exports){
const window = require('global/window')
const assert = require('assert')

module.exports = href

// handle a click if is anchor tag with an href
// and url lives on the same domain. Replaces
// trailing '#' so empty links work as expected.
// fn(str) -> null
function href (cb) {
  assert.equal(typeof cb, 'function', 'cb must be a function')

  window.onclick = function (e) {
    const node = (function traverse (node) {
      if (!node) return
      if (node.localName !== 'a') return traverse(node.parentNode)
      if (node.href === undefined) return traverse(node.parentNode)
      if (window.location.host !== node.host) return traverse(node.parentNode)
      return node
    })(e.target)

    if (!node) return

    e.preventDefault()
    const href = node.href.replace(/#$/, '')
    cb(href)
    window.history.pushState({}, null, href)
  }
}

},{"assert":2,"global/window":34}],103:[function(require,module,exports){
const pathname = require('pathname-match')
const wayfarer = require('wayfarer')
const assert = require('assert')

module.exports = sheetRouter

// Fast, modular client router
// fn(str, any[..], fn?) -> fn(str, any[..])
function sheetRouter (dft, createTree, createRoute) {
  createRoute = (createRoute ? createRoute(_createRoute) : _createRoute)

  if (!createTree) {
    createTree = dft
    dft = ''
  }

  assert.equal(typeof dft, 'string', 'sheet-router: dft must be a string')
  assert.equal(typeof createTree, 'function', 'sheet-router: createTree must be a function')
  assert.equal(typeof createRoute, 'function', 'sheet-router: createRoute must be a function')

  const router = wayfarer(dft)
  const tree = createTree(createRoute)

  // register tree in router
  ;(function walk (tree, route) {
    if (Array.isArray(tree[0])) {
      // walk over all routes at the root of the tree
      tree.forEach(function (node) {
        walk(node, route)
      })
    } else if (tree[1]) {
      // handle inline functions as args
      const innerRoute = tree[0]
        ? route.concat(tree[0]).join('/')
        : route.length ? route.join('/') : tree[0]
      router.on(innerRoute, tree[1])
      walk(tree[2], route.concat(tree[0]))
    } else if (Array.isArray(tree[2])) {
      // traverse and append route
      walk(tree[2], route.concat(tree[0]))
    } else {
      // register path in router
      const nwRoute = tree[0]
        ? route.concat(tree[0]).join('/')
        : route.length ? route.join('/') : tree[0]
      router.on(nwRoute, tree[2])
    }
  })(tree, [])

  // match a route on the router
  return function match (route) {
    assert.equal(typeof route, 'string', 'route must be a string')
    const args = [].slice.call(arguments)
    args[0] = pathname(args[0])
    return router.apply(null, args)
  }
}

// register regular route
function _createRoute (route, inline, child) {
  if (!child) {
    child = inline
    inline = null
  }
  assert.equal(typeof route, 'string', 'route must be a string')
  assert.ok(child, 'child exists')
  route = route.replace(/^\//, '')
  return [ route, inline, child ]
}

},{"assert":2,"pathname-match":81,"wayfarer":129}],104:[function(require,module,exports){
(function (global){
var ClientRequest = require('./lib/request')
var extend = require('xtend')
var statusCodes = require('builtin-status-codes')
var url = require('url')

var http = exports

http.request = function (opts, cb) {
	if (typeof opts === 'string')
		opts = url.parse(opts)
	else
		opts = extend(opts)

	// Normally, the page is loaded from http or https, so not specifying a protocol
	// will result in a (valid) protocol-relative url. However, this won't work if
	// the protocol is something else, like 'file:'
	var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''

	var protocol = opts.protocol || defaultProtocol
	var host = opts.hostname || opts.host
	var port = opts.port
	var path = opts.path || '/'

	// Necessary for IPv6 addresses
	if (host && host.indexOf(':') !== -1)
		host = '[' + host + ']'

	// This may be a relative url. The browser should always be able to interpret it correctly.
	opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
	opts.method = (opts.method || 'GET').toUpperCase()
	opts.headers = opts.headers || {}

	// Also valid opts.auth, opts.mode

	var req = new ClientRequest(opts)
	if (cb)
		req.on('response', cb)
	return req
}

http.get = function get (opts, cb) {
	var req = http.request(opts, cb)
	req.end()
	return req
}

http.Agent = function () {}
http.Agent.defaultMaxSockets = 4

http.STATUS_CODES = statusCodes

http.METHODS = [
	'CHECKOUT',
	'CONNECT',
	'COPY',
	'DELETE',
	'GET',
	'HEAD',
	'LOCK',
	'M-SEARCH',
	'MERGE',
	'MKACTIVITY',
	'MKCOL',
	'MOVE',
	'NOTIFY',
	'OPTIONS',
	'PATCH',
	'POST',
	'PROPFIND',
	'PROPPATCH',
	'PURGE',
	'PUT',
	'REPORT',
	'SEARCH',
	'SUBSCRIBE',
	'TRACE',
	'UNLOCK',
	'UNSUBSCRIBE'
]
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./lib/request":106,"builtin-status-codes":12,"url":123,"xtend":132}],105:[function(require,module,exports){
(function (global){
exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)

exports.blobConstructor = false
try {
	new Blob([new ArrayBuffer(1)])
	exports.blobConstructor = true
} catch (e) {}

// The xhr request to example.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
var xhr
function getXHR () {
	// Cache the xhr value
	if (xhr !== undefined) return xhr

	if (global.XMLHttpRequest) {
		xhr = new global.XMLHttpRequest()
		// If XDomainRequest is available (ie only, where xhr might not work
		// cross domain), use the page location. Otherwise use example.com
		// Note: this doesn't actually make an http request.
		try {
			xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')
		} catch(e) {
			xhr = null
		}
	} else {
		// Service workers don't have XHR
		xhr = null
	}
	return xhr
}

function checkTypeSupport (type) {
	var xhr = getXHR()
	if (!xhr) return false
	try {
		xhr.responseType = type
		return xhr.responseType === type
	} catch (e) {}
	return false
}

// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
// Safari 7.1 appears to have fixed this bug.
var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'
var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)

// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
exports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))

// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')
exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&
	checkTypeSupport('moz-chunked-arraybuffer')

// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)

exports.vbArray = isFunction(global.VBArray)

function isFunction (value) {
	return typeof value === 'function'
}

xhr = null // Help gc

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],106:[function(require,module,exports){
(function (process,global,Buffer){
var capability = require('./capability')
var inherits = require('inherits')
var response = require('./response')
var stream = require('readable-stream')
var toArrayBuffer = require('to-arraybuffer')

var IncomingMessage = response.IncomingMessage
var rStates = response.readyStates

function decideMode (preferBinary, useFetch) {
	if (capability.fetch && useFetch) {
		return 'fetch'
	} else if (capability.mozchunkedarraybuffer) {
		return 'moz-chunked-arraybuffer'
	} else if (capability.msstream) {
		return 'ms-stream'
	} else if (capability.arraybuffer && preferBinary) {
		return 'arraybuffer'
	} else if (capability.vbArray && preferBinary) {
		return 'text:vbarray'
	} else {
		return 'text'
	}
}

var ClientRequest = module.exports = function (opts) {
	var self = this
	stream.Writable.call(self)

	self._opts = opts
	self._body = []
	self._headers = {}
	if (opts.auth)
		self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))
	Object.keys(opts.headers).forEach(function (name) {
		self.setHeader(name, opts.headers[name])
	})

	var preferBinary
	var useFetch = true
	if (opts.mode === 'disable-fetch' || 'timeout' in opts) {
		// If the use of XHR should be preferred and includes preserving the 'content-type' header.
		// Force XHR to be used since the Fetch API does not yet support timeouts.
		useFetch = false
		preferBinary = true
	} else if (opts.mode === 'prefer-streaming') {
		// If streaming is a high priority but binary compatibility and
		// the accuracy of the 'content-type' header aren't
		preferBinary = false
	} else if (opts.mode === 'allow-wrong-content-type') {
		// If streaming is more important than preserving the 'content-type' header
		preferBinary = !capability.overrideMimeType
	} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
		// Use binary if text streaming may corrupt data or the content-type header, or for speed
		preferBinary = true
	} else {
		throw new Error('Invalid value for opts.mode')
	}
	self._mode = decideMode(preferBinary, useFetch)

	self.on('finish', function () {
		self._onFinish()
	})
}

inherits(ClientRequest, stream.Writable)

ClientRequest.prototype.setHeader = function (name, value) {
	var self = this
	var lowerName = name.toLowerCase()
	// This check is not necessary, but it prevents warnings from browsers about setting unsafe
	// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
	// http-browserify did it, so I will too.
	if (unsafeHeaders.indexOf(lowerName) !== -1)
		return

	self._headers[lowerName] = {
		name: name,
		value: value
	}
}

ClientRequest.prototype.getHeader = function (name) {
	var header = this._headers[name.toLowerCase()]
	if (header)
		return header.value
	return null
}

ClientRequest.prototype.removeHeader = function (name) {
	var self = this
	delete self._headers[name.toLowerCase()]
}

ClientRequest.prototype._onFinish = function () {
	var self = this

	if (self._destroyed)
		return
	var opts = self._opts

	var headersObj = self._headers
	var body = null
	if (opts.method !== 'GET' && opts.method !== 'HEAD') {
		if (capability.blobConstructor) {
			body = new global.Blob(self._body.map(function (buffer) {
				return toArrayBuffer(buffer)
			}), {
				type: (headersObj['content-type'] || {}).value || ''
			})
		} else {
			// get utf8 string
			body = Buffer.concat(self._body).toString()
		}
	}

	// create flattened list of headers
	var headersList = []
	Object.keys(headersObj).forEach(function (keyName) {
		var name = headersObj[keyName].name
		var value = headersObj[keyName].value
		if (Array.isArray(value)) {
			value.forEach(function (v) {
				headersList.push([name, v])
			})
		} else {
			headersList.push([name, value])
		}
	})

	if (self._mode === 'fetch') {
		global.fetch(self._opts.url, {
			method: self._opts.method,
			headers: headersList,
			body: body || undefined,
			mode: 'cors',
			credentials: opts.withCredentials ? 'include' : 'same-origin'
		}).then(function (response) {
			self._fetchResponse = response
			self._connect()
		}, function (reason) {
			self.emit('error', reason)
		})
	} else {
		var xhr = self._xhr = new global.XMLHttpRequest()
		try {
			xhr.open(self._opts.method, self._opts.url, true)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}

		// Can't set responseType on really old browsers
		if ('responseType' in xhr)
			xhr.responseType = self._mode.split(':')[0]

		if ('withCredentials' in xhr)
			xhr.withCredentials = !!opts.withCredentials

		if (self._mode === 'text' && 'overrideMimeType' in xhr)
			xhr.overrideMimeType('text/plain; charset=x-user-defined')

		if ('timeout' in opts) {
			xhr.timeout = opts.timeout
			xhr.ontimeout = function () {
				self.emit('timeout')
			}
		}

		headersList.forEach(function (header) {
			xhr.setRequestHeader(header[0], header[1])
		})

		self._response = null
		xhr.onreadystatechange = function () {
			switch (xhr.readyState) {
				case rStates.LOADING:
				case rStates.DONE:
					self._onXHRProgress()
					break
			}
		}
		// Necessary for streaming in Firefox, since xhr.response is ONLY defined
		// in onprogress, not in onreadystatechange with xhr.readyState = 3
		if (self._mode === 'moz-chunked-arraybuffer') {
			xhr.onprogress = function () {
				self._onXHRProgress()
			}
		}

		xhr.onerror = function () {
			if (self._destroyed)
				return
			self.emit('error', new Error('XHR error'))
		}

		try {
			xhr.send(body)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}
	}
}

/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */
function statusValid (xhr) {
	try {
		var status = xhr.status
		return (status !== null && status !== 0)
	} catch (e) {
		return false
	}
}

ClientRequest.prototype._onXHRProgress = function () {
	var self = this

	if (!statusValid(self._xhr) || self._destroyed)
		return

	if (!self._response)
		self._connect()

	self._response._onXHRProgress()
}

ClientRequest.prototype._connect = function () {
	var self = this

	if (self._destroyed)
		return

	self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode)
	self._response.on('error', function(err) {
		self.emit('error', err)
	})

	self.emit('response', self._response)
}

ClientRequest.prototype._write = function (chunk, encoding, cb) {
	var self = this

	self._body.push(chunk)
	cb()
}

ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
	var self = this
	self._destroyed = true
	if (self._response)
		self._response._destroyed = true
	if (self._xhr)
		self._xhr.abort()
	// Currently, there isn't a way to truly abort a fetch.
	// If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
}

ClientRequest.prototype.end = function (data, encoding, cb) {
	var self = this
	if (typeof data === 'function') {
		cb = data
		data = undefined
	}

	stream.Writable.prototype.end.call(self, data, encoding, cb)
}

ClientRequest.prototype.flushHeaders = function () {}
ClientRequest.prototype.setTimeout = function () {}
ClientRequest.prototype.setNoDelay = function () {}
ClientRequest.prototype.setSocketKeepAlive = function () {}

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var unsafeHeaders = [
	'accept-charset',
	'accept-encoding',
	'access-control-request-headers',
	'access-control-request-method',
	'connection',
	'content-length',
	'cookie',
	'cookie2',
	'date',
	'dnt',
	'expect',
	'host',
	'keep-alive',
	'origin',
	'referer',
	'te',
	'trailer',
	'transfer-encoding',
	'upgrade',
	'user-agent',
	'via'
]

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"./capability":105,"./response":107,"_process":86,"buffer":11,"inherits":45,"readable-stream":116,"to-arraybuffer":121}],107:[function(require,module,exports){
(function (process,global,Buffer){
var capability = require('./capability')
var inherits = require('inherits')
var stream = require('readable-stream')

var rStates = exports.readyStates = {
	UNSENT: 0,
	OPENED: 1,
	HEADERS_RECEIVED: 2,
	LOADING: 3,
	DONE: 4
}

var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {
	var self = this
	stream.Readable.call(self)

	self._mode = mode
	self.headers = {}
	self.rawHeaders = []
	self.trailers = {}
	self.rawTrailers = []

	// Fake the 'close' event, but only once 'end' fires
	self.on('end', function () {
		// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
		process.nextTick(function () {
			self.emit('close')
		})
	})

	if (mode === 'fetch') {
		self._fetchResponse = response

		self.url = response.url
		self.statusCode = response.status
		self.statusMessage = response.statusText
		
		response.headers.forEach(function(header, key){
			self.headers[key.toLowerCase()] = header
			self.rawHeaders.push(key, header)
		})


		// TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
		var reader = response.body.getReader()
		function read () {
			reader.read().then(function (result) {
				if (self._destroyed)
					return
				if (result.done) {
					self.push(null)
					return
				}
				self.push(new Buffer(result.value))
				read()
			}).catch(function(err) {
				self.emit('error', err)
			})
		}
		read()

	} else {
		self._xhr = xhr
		self._pos = 0

		self.url = xhr.responseURL
		self.statusCode = xhr.status
		self.statusMessage = xhr.statusText
		var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
		headers.forEach(function (header) {
			var matches = header.match(/^([^:]+):\s*(.*)/)
			if (matches) {
				var key = matches[1].toLowerCase()
				if (key === 'set-cookie') {
					if (self.headers[key] === undefined) {
						self.headers[key] = []
					}
					self.headers[key].push(matches[2])
				} else if (self.headers[key] !== undefined) {
					self.headers[key] += ', ' + matches[2]
				} else {
					self.headers[key] = matches[2]
				}
				self.rawHeaders.push(matches[1], matches[2])
			}
		})

		self._charset = 'x-user-defined'
		if (!capability.overrideMimeType) {
			var mimeType = self.rawHeaders['mime-type']
			if (mimeType) {
				var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
				if (charsetMatch) {
					self._charset = charsetMatch[1].toLowerCase()
				}
			}
			if (!self._charset)
				self._charset = 'utf-8' // best guess
		}
	}
}

inherits(IncomingMessage, stream.Readable)

IncomingMessage.prototype._read = function () {}

IncomingMessage.prototype._onXHRProgress = function () {
	var self = this

	var xhr = self._xhr

	var response = null
	switch (self._mode) {
		case 'text:vbarray': // For IE9
			if (xhr.readyState !== rStates.DONE)
				break
			try {
				// This fails in IE8
				response = new global.VBArray(xhr.responseBody).toArray()
			} catch (e) {}
			if (response !== null) {
				self.push(new Buffer(response))
				break
			}
			// Falls through in IE8	
		case 'text':
			try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
				response = xhr.responseText
			} catch (e) {
				self._mode = 'text:vbarray'
				break
			}
			if (response.length > self._pos) {
				var newData = response.substr(self._pos)
				if (self._charset === 'x-user-defined') {
					var buffer = new Buffer(newData.length)
					for (var i = 0; i < newData.length; i++)
						buffer[i] = newData.charCodeAt(i) & 0xff

					self.push(buffer)
				} else {
					self.push(newData, self._charset)
				}
				self._pos = response.length
			}
			break
		case 'arraybuffer':
			if (xhr.readyState !== rStates.DONE || !xhr.response)
				break
			response = xhr.response
			self.push(new Buffer(new Uint8Array(response)))
			break
		case 'moz-chunked-arraybuffer': // take whole
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING || !response)
				break
			self.push(new Buffer(new Uint8Array(response)))
			break
		case 'ms-stream':
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING)
				break
			var reader = new global.MSStreamReader()
			reader.onprogress = function () {
				if (reader.result.byteLength > self._pos) {
					self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))
					self._pos = reader.result.byteLength
				}
			}
			reader.onload = function () {
				self.push(null)
			}
			// reader.onerror = ??? // TODO: this
			reader.readAsArrayBuffer(response)
			break
	}

	// The ms-stream case handles end separately in reader.onload()
	if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
		self.push(null)
	}
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"./capability":105,"_process":86,"buffer":11,"inherits":45,"readable-stream":116}],108:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":110,"./_stream_writable":112,"core-util-is":16,"inherits":45,"process-nextick-args":85}],109:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":111,"core-util-is":16,"inherits":45}],110:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":108,"./internal/streams/BufferList":113,"./internal/streams/destroy":114,"./internal/streams/stream":115,"_process":86,"core-util-is":16,"events":23,"inherits":45,"isarray":52,"process-nextick-args":85,"safe-buffer":99,"string_decoder/":117,"util":7}],111:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":108,"core-util-is":16,"inherits":45}],112:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":108,"./internal/streams/destroy":114,"./internal/streams/stream":115,"_process":86,"core-util-is":16,"inherits":45,"process-nextick-args":85,"safe-buffer":99,"util-deprecate":125}],113:[function(require,module,exports){
'use strict';

/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();
},{"safe-buffer":99}],114:[function(require,module,exports){
'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":85}],115:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":23}],116:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":108,"./lib/_stream_passthrough.js":109,"./lib/_stream_readable.js":110,"./lib/_stream_transform.js":111,"./lib/_stream_writable.js":112}],117:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":99}],118:[function(require,module,exports){
module.exports = shift

function shift (stream) {
  var rs = stream._readableState
  if (!rs) return null
  return rs.objectMode ? stream.read() : stream.read(getStateLength(rs))
}

function getStateLength (state) {
  if (state.buffer.length) {
    // Since node 6.3.0 state.buffer is a BufferList not an array
    if (state.buffer.head) {
      return state.buffer.head.data.length
    }

    return state.buffer[0].length
  }

  return state.length
}

},{}],119:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":11}],120:[function(require,module,exports){
'use strict';

module.exports = function (req, time) {
	if (req.timeoutTimer) { return req; }

	var host = req._headers ? (' to ' + req._headers.host) : '';

	req.timeoutTimer = setTimeout(function timeoutHandler() {
		req.abort();
		var e = new Error('Connection timed out on request' + host);
		e.code = 'ETIMEDOUT';
		req.emit('error', e);
	}, time);

	// Set additional timeout on socket - in case if remote
	// server freeze after sending headers
	req.setTimeout(time, function socketTimeoutHandler() {
		req.abort();
		var e = new Error('Socket timed out on request' + host);
		e.code = 'ESOCKETTIMEDOUT';
		req.emit('error', e);
	});

	function clear() {
		if (req.timeoutTimer) {
			clearTimeout(req.timeoutTimer);
			req.timeoutTimer = null;
		}
	}

	return req
		.on('response', clear)
		.on('error', clear);
};

},{}],121:[function(require,module,exports){
var Buffer = require('buffer').Buffer

module.exports = function (buf) {
	// If the buffer is backed by a Uint8Array, a faster version will work
	if (buf instanceof Uint8Array) {
		// If the buffer isn't a subarray, return the underlying ArrayBuffer
		if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
			return buf.buffer
		} else if (typeof buf.buffer.slice === 'function') {
			// Otherwise we need to get a proper copy
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
		}
	}

	if (Buffer.isBuffer(buf)) {
		// This is the slow version that will work with any Buffer
		// implementation (even in old browsers)
		var arrayCopy = new Uint8Array(buf.length)
		var len = buf.length
		for (var i = 0; i < len; i++) {
			arrayCopy[i] = buf[i]
		}
		return arrayCopy.buffer
	} else {
		throw new Error('Argument must be a Buffer')
	}
}

},{"buffer":11}],122:[function(require,module,exports){
'use strict';
var url = require('url');
var prependHttp = require('prepend-http');

module.exports = function (x) {
	var withProtocol = prependHttp(x);
	var parsed = url.parse(withProtocol);

	if (withProtocol !== x) {
		parsed.protocol = null;
	}

	return parsed;
};

},{"prepend-http":84,"url":123}],123:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var punycode = require('punycode');
var util = require('./util');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

},{"./util":124,"punycode":87,"querystring":90}],124:[function(require,module,exports){
'use strict';

module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};

},{}],125:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],126:[function(require,module,exports){
arguments[4][45][0].apply(exports,arguments)
},{"dup":45}],127:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],128:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":127,"_process":86,"inherits":126}],129:[function(require,module,exports){
var assert = require('assert')
var trie = require('./trie')

module.exports = Wayfarer

// create a router
// str -> obj
function Wayfarer (dft) {
  if (!(this instanceof Wayfarer)) return new Wayfarer(dft)

  var _default = (dft || '').replace(/^\//, '')
  var _trie = trie()

  emit._trie = _trie
  emit.emit = emit
  emit.on = on
  emit._wayfarer = true

  return emit

  // define a route
  // (str, fn) -> obj
  function on (route, cb) {
    assert.equal(typeof route, 'string')
    assert.equal(typeof cb, 'function')

    route = route || '/'
    cb.route = route

    if (cb && cb._wayfarer && cb._trie) {
      _trie.mount(route, cb._trie.trie)
    } else {
      var node = _trie.create(route)
      node.cb = cb
    }

    return emit
  }

  // match and call a route
  // (str, obj?) -> null
  function emit (route) {
    assert.notEqual(route, undefined, "'route' must be defined")
    var args = new Array(arguments.length)
    for (var i = 1; i < args.length; i++) {
      args[i] = arguments[i]
    }

    var node = _trie.match(route)
    if (node && node.cb) {
      args[0] = node.params
      var cb = node.cb
      return cb.apply(cb, args)
    }

    var dft = _trie.match(_default)
    if (dft && dft.cb) {
      args[0] = dft.params
      var dftcb = dft.cb
      return dftcb.apply(dftcb, args)
    }

    throw new Error("route '" + route + "' did not match")
  }
}

},{"./trie":130,"assert":2}],130:[function(require,module,exports){
var mutate = require('xtend/mutable')
var assert = require('assert')
var xtend = require('xtend')

module.exports = Trie

// create a new trie
// null -> obj
function Trie () {
  if (!(this instanceof Trie)) return new Trie()
  this.trie = { nodes: {} }
}

// create a node on the trie at route
// and return a node
// str -> null
Trie.prototype.create = function (route) {
  assert.equal(typeof route, 'string', 'route should be a string')
  // strip leading '/' and split routes
  var routes = route.replace(/^\//, '').split('/')

  function createNode (index, trie) {
    var thisRoute = (routes.hasOwnProperty(index) && routes[index])
    if (thisRoute === false) return trie

    var node = null
    if (/^:|^\*/.test(thisRoute)) {
      // if node is a name match, set name and append to ':' node
      if (!trie.nodes.hasOwnProperty('$$')) {
        node = { nodes: {} }
        trie.nodes['$$'] = node
      } else {
        node = trie.nodes['$$']
      }

      if (thisRoute[0] === '*') {
        trie.wildcard = true
      }

      trie.name = thisRoute.replace(/^:|^\*/, '')
    } else if (!trie.nodes.hasOwnProperty(thisRoute)) {
      node = { nodes: {} }
      trie.nodes[thisRoute] = node
    } else {
      node = trie.nodes[thisRoute]
    }

    // we must recurse deeper
    return createNode(index + 1, node)
  }

  return createNode(0, this.trie)
}

// match a route on the trie
// and return the node
// str -> obj
Trie.prototype.match = function (route) {
  assert.equal(typeof route, 'string', 'route should be a string')

  var routes = route.replace(/^\//, '').split('/')
  var params = {}

  function search (index, trie) {
    // either there's no match, or we're done searching
    if (trie === undefined) return undefined
    var thisRoute = routes[index]
    if (thisRoute === undefined) return trie

    if (trie.nodes.hasOwnProperty(thisRoute)) {
      // match regular routes first
      return search(index + 1, trie.nodes[thisRoute])
    } else if (trie.name) {
      // match named routes
      try {
        params[trie.name] = decodeURIComponent(thisRoute)
      } catch (e) {
        return search(index, undefined)
      }
      return search(index + 1, trie.nodes['$$'])
    } else if (trie.wildcard) {
      // match wildcards
      try {
        params['wildcard'] = decodeURIComponent(routes.slice(index).join('/'))
      } catch (e) {
        return search(index, undefined)
      }
      // return early, or else search may keep recursing through the wildcard
      return trie.nodes['$$']
    } else {
      // no matches found
      return search(index + 1)
    }
  }

  var node = search(0, this.trie)

  if (!node) return undefined
  node = xtend(node)
  node.params = params
  return node
}

// mount a trie onto a node at route
// (str, obj) -> null
Trie.prototype.mount = function (route, trie) {
  assert.equal(typeof route, 'string', 'route should be a string')
  assert.equal(typeof trie, 'object', 'trie should be a object')

  var split = route.replace(/^\//, '').split('/')
  var node = null
  var key = null

  if (split.length === 1) {
    key = split[0]
    node = this.create(key)
  } else {
    var headArr = split.splice(0, split.length - 1)
    var head = headArr.join('/')
    key = split[0]
    node = this.create(head)
  }

  mutate(node.nodes, trie.nodes)
  if (trie.name) node.name = trie.name

  // delegate properties from '/' to the new node
  // '/' cannot be reached once mounted
  if (node.nodes['']) {
    Object.keys(node.nodes['']).forEach(function (key) {
      if (key === 'nodes') return
      node[key] = node.nodes[''][key]
    })
    mutate(node.nodes, node.nodes[''].nodes)
    delete node.nodes[''].nodes
  }
}

},{"assert":2,"xtend":132,"xtend/mutable":133}],131:[function(require,module,exports){
// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy
function wrappy (fn, cb) {
  if (fn && cb) return wrappy(fn)(cb)

  if (typeof fn !== 'function')
    throw new TypeError('need wrapper function')

  Object.keys(fn).forEach(function (k) {
    wrapper[k] = fn[k]
  })

  return wrapper

  function wrapper() {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i]
    }
    var ret = fn.apply(this, args)
    var cb = args[args.length-1]
    if (typeof ret === 'function' && ret !== cb) {
      Object.keys(cb).forEach(function (k) {
        ret[k] = cb[k]
      })
    }
    return ret
  }
}

},{}],132:[function(require,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],133:[function(require,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],134:[function(require,module,exports){
var bel = require('bel') // turns template tag into DOM elements
var morphdom = require('morphdom') // efficiently diffs + morphs two DOM elements
var defaultEvents = require('./update-events.js') // default events to be copied when dom elements update

module.exports = bel

// TODO move this + defaultEvents to a new module once we receive more feedback
module.exports.update = function (fromNode, toNode, opts) {
  if (!opts) opts = {}
  if (opts.events !== false) {
    if (!opts.onBeforeElUpdated) opts.onBeforeElUpdated = copier
  }

  return morphdom(fromNode, toNode, opts)

  // morphdom only copies attributes. we decided we also wanted to copy events
  // that can be set via attributes
  function copier (f, t) {
    // copy events:
    var events = opts.events || defaultEvents
    for (var i = 0; i < events.length; i++) {
      var ev = events[i]
      if (t[ev]) { // if new element has a whitelisted attribute
        f[ev] = t[ev] // update existing element
      } else if (f[ev]) { // if existing element has it and new one doesnt
        f[ev] = undefined // remove it from existing element
      }
    }
    var oldValue = f.value
    var newValue = t.value
    // copy values for form elements
    if ((f.nodeName === 'INPUT' && f.type !== 'file') || f.nodeName === 'SELECT') {
      if (!newValue && !t.hasAttribute('value')) {
        t.value = f.value
      } else if (newValue !== oldValue) {
        f.value = newValue
      }
    } else if (f.nodeName === 'TEXTAREA') {
      if (t.getAttribute('value') === null) f.value = t.value
    }
  }
}

},{"./update-events.js":135,"bel":6,"morphdom":60}],135:[function(require,module,exports){
module.exports = [
  // attribute events (can be set with attributes)
  'onclick',
  'ondblclick',
  'onmousedown',
  'onmouseup',
  'onmouseover',
  'onmousemove',
  'onmouseout',
  'ondragstart',
  'ondrag',
  'ondragenter',
  'ondragleave',
  'ondragover',
  'ondrop',
  'ondragend',
  'onkeydown',
  'onkeypress',
  'onkeyup',
  'onunload',
  'onabort',
  'onerror',
  'onresize',
  'onscroll',
  'onselect',
  'onchange',
  'onsubmit',
  'onreset',
  'onfocus',
  'onblur',
  'oninput',
  // other common events
  'oncontextmenu',
  'onfocusin',
  'onfocusout'
]

},{}]},{},[1]);
